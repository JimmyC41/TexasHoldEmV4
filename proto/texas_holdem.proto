syntax = "proto3";

service PokerService {
    // Server-to-client game state updates
    rpc GameStream(GameStreamReq) returns (stream GameStreamRes);

    // Client-to-server unary calls
    rpc JoinGame(JoinGameReq) returns (PlayerReqRes);
    rpc LeaveGame(LeaveGameReq) returns (PlayerReqRes);
    rpc PlayerAction(PlayerActionReq) returns (PlayerReqRes);
}

message JoinGameReq {
    string player_name = 1;
    uint32 chips = 2;
}

message LeaveGameReq {
    string player_id = 1;
}

message PlayerActionReq {
    string player_id = 1;
    ProtoActionType action_type = 2;
    uint32 action_amount = 3;
}

message PlayerReqRes {
    bool success = 1;
    string player_id = 2;
    string server_message = 3;
}

message GameStreamReq {
    string player_id = 1;
}

message GameStreamRes {
    oneof event {
        PlayersUpdateEvent players_update = 1;
        NewStreetEvent new_street = 2;
        DealPlayersEvent deal_players = 3;
        DealBoardEvent deal_board = 4;
        NewPlayerToActEvent next_player_to_act = 5;
        NewPlayerActionEvent new_player_action = 6;
        PotUpdateEvent pot_update = 7;
        ShowdownEvent showdown = 8;
        PotWinnerEvent pot_winner = 9;
    }
}

// Event: Players added, removed or chips update.
message PlayersUpdateEvent {
    repeated ProtoPlayer new_players = 1;
}

// Event: New betting street initalised.
message NewStreetEvent {
    ProtoStreet new_street = 1;
}

// Event: Players are dealt their hole cards.
message DealPlayersEvent {
    repeated PlayerCard player_cards = 1;
}

// Event: Community cards are dealt.
message DealBoardEvent {
    repeated ProtoCard community_cards = 1;
}

// Event: Awaiting input for the next player to act.
message NewPlayerToActEvent {
    PlayerToActInfo player_to_act_info = 1;
}

// Event: Game controller processes a new player action.
message NewPlayerActionEvent {
    PlayerActionInfo player_action_info = 1;
}

// Event: Pots are calculated at the end of each street.
message PotUpdateEvent {
    repeated ProtoPot updated_pots = 1;
}

// Event: Players in the pot reveal their hand
message ShowdownEvent {
    repeated string players_in_hand = 1;
}

// Event: Awards pots and updates player chips.
message PotWinnerEvent {
    repeated PotWinner pot_winners = 1;
}

message ProtoCard {
    enum ProtoSuit {
        SUIT_UNSPECIFIED = 0;
        HEARTS = 1;
        DIAMONDS = 2;
        CLUBS = 3;
        SPADES = 4;
    }

    enum ProtoValue {
        VALUE_UNSPECIFIED = 0;
        TWO = 2;
        THREE = 3;
        FOUR = 4;
        FIVE = 5;
        SIX = 6;
        SEVEN = 7;
        EIGHT = 8;
        NINE = 9;
        TEN = 10;
        JACK = 11;
        QUEEN = 12;
        KING = 13;
        ACE = 14;
    }

    ProtoSuit suit = 1;
    ProtoValue value = 2;
}

message ProtoPlayer {
    string name = 1;
    string id = 2;
    uint32 chips = 3;
    uint32 recent_bets = 4;

    enum ProtoPosition {
        LOBBY = 0;
        SMALL_BLIND = 1;
        BIG_BLIND = 2;
        UTG = 3;
        UTG_1 = 4;
        MIDDLE = 5;
        LOJACK = 6;
        HIJACK = 7;
        CUT_OFF = 8;
        DEALER = 9;
    }

    ProtoPosition position = 5;

    enum ProtoPlayerStatus {
        WAITING = 0;
        IN_HAND = 1;
        FOLDED = 2;
        ALL_IN_BET = 3;
        ALL_IN_CALL = 4;
    }

    ProtoPlayerStatus status = 6;
}

message PlayerCard {
    string player_id = 1;
    repeated ProtoCard hole_cards = 2;
}

message PlayerToActInfo {
    string player_to_act = 1;
    
    message ProtoPossibleAction {
        ProtoActionType action_type = 1;
        uint32 primary_amount = 2;
        uint32 secondary_amount = 3;
    }

    repeated ProtoPossibleAction possible_actions = 2;
}

message PlayerActionInfo {
    string player_id = 1;

    message ProtoAction {
        ProtoActionType action_type = 1;
        uint32 action_amount = 2;
    }

    // Update player recent bet and status in the frontend.
    ProtoAction action = 2;
}

message ProtoPot {
    uint32 pot_chips = 1;
    repeated string eligible_ids = 2;
}

message PotWinner {
    uint32 pot_chips = 1;
    string winner = 2;
}

enum ProtoStreet {
    STREET_UNSPECIFIED = 0;
    PRE_FLOP = 1;
    FLOP = 2;
    TURN = 3;
    RIVER = 4;
}

enum ProtoActionType {
    ACTION_UNSPECIFIED = 0;
    POST_SMALL = 1;
    POST_BIG = 2;
    CHECK = 3;
    BET = 4;
    CALL = 5;
    RAISE = 6;
    FOLD = 7;
    ALL_IN_BET = 8;
    ALL_IN_CALL = 9;
    ALL_IN_RAISE = 10;
}