/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.0
// source: texas_holdem.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = require('./texas_holdem_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.PokerServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.PokerServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.GameStreamReq,
 *   !proto.GameStreamRes>}
 */
const methodDescriptor_PokerService_GameStream = new grpc.web.MethodDescriptor(
  '/PokerService/GameStream',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.GameStreamReq,
  proto.GameStreamRes,
  /**
   * @param {!proto.GameStreamReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.GameStreamRes.deserializeBinary
);


/**
 * @param {!proto.GameStreamReq} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.GameStreamRes>}
 *     The XHR Node Readable Stream
 */
proto.PokerServiceClient.prototype.gameStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/PokerService/GameStream',
      request,
      metadata || {},
      methodDescriptor_PokerService_GameStream);
};


/**
 * @param {!proto.GameStreamReq} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.GameStreamRes>}
 *     The XHR Node Readable Stream
 */
proto.PokerServicePromiseClient.prototype.gameStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/PokerService/GameStream',
      request,
      metadata || {},
      methodDescriptor_PokerService_GameStream);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.JoinGameReq,
 *   !proto.PlayerReqRes>}
 */
const methodDescriptor_PokerService_JoinGame = new grpc.web.MethodDescriptor(
  '/PokerService/JoinGame',
  grpc.web.MethodType.UNARY,
  proto.JoinGameReq,
  proto.PlayerReqRes,
  /**
   * @param {!proto.JoinGameReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.PlayerReqRes.deserializeBinary
);


/**
 * @param {!proto.JoinGameReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.PlayerReqRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.PlayerReqRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.PokerServiceClient.prototype.joinGame =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/PokerService/JoinGame',
      request,
      metadata || {},
      methodDescriptor_PokerService_JoinGame,
      callback);
};


/**
 * @param {!proto.JoinGameReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.PlayerReqRes>}
 *     Promise that resolves to the response
 */
proto.PokerServicePromiseClient.prototype.joinGame =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/PokerService/JoinGame',
      request,
      metadata || {},
      methodDescriptor_PokerService_JoinGame);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.LeaveGameReq,
 *   !proto.PlayerReqRes>}
 */
const methodDescriptor_PokerService_LeaveGame = new grpc.web.MethodDescriptor(
  '/PokerService/LeaveGame',
  grpc.web.MethodType.UNARY,
  proto.LeaveGameReq,
  proto.PlayerReqRes,
  /**
   * @param {!proto.LeaveGameReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.PlayerReqRes.deserializeBinary
);


/**
 * @param {!proto.LeaveGameReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.PlayerReqRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.PlayerReqRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.PokerServiceClient.prototype.leaveGame =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/PokerService/LeaveGame',
      request,
      metadata || {},
      methodDescriptor_PokerService_LeaveGame,
      callback);
};


/**
 * @param {!proto.LeaveGameReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.PlayerReqRes>}
 *     Promise that resolves to the response
 */
proto.PokerServicePromiseClient.prototype.leaveGame =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/PokerService/LeaveGame',
      request,
      metadata || {},
      methodDescriptor_PokerService_LeaveGame);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.PlayerActionReq,
 *   !proto.PlayerReqRes>}
 */
const methodDescriptor_PokerService_PlayerAction = new grpc.web.MethodDescriptor(
  '/PokerService/PlayerAction',
  grpc.web.MethodType.UNARY,
  proto.PlayerActionReq,
  proto.PlayerReqRes,
  /**
   * @param {!proto.PlayerActionReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.PlayerReqRes.deserializeBinary
);


/**
 * @param {!proto.PlayerActionReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.PlayerReqRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.PlayerReqRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.PokerServiceClient.prototype.playerAction =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/PokerService/PlayerAction',
      request,
      metadata || {},
      methodDescriptor_PokerService_PlayerAction,
      callback);
};


/**
 * @param {!proto.PlayerActionReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.PlayerReqRes>}
 *     Promise that resolves to the response
 */
proto.PokerServicePromiseClient.prototype.playerAction =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/PokerService/PlayerAction',
      request,
      metadata || {},
      methodDescriptor_PokerService_PlayerAction);
};


module.exports = proto;

