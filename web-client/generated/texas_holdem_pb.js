// source: texas_holdem.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.DealBoardEvent', null, global);
goog.exportSymbol('proto.DealPlayersEvent', null, global);
goog.exportSymbol('proto.DealPlayersEvent.PlayerCard', null, global);
goog.exportSymbol('proto.GameStreamReq', null, global);
goog.exportSymbol('proto.GameStreamRes', null, global);
goog.exportSymbol('proto.GameStreamRes.EventCase', null, global);
goog.exportSymbol('proto.JoinGameReq', null, global);
goog.exportSymbol('proto.LeaveGameReq', null, global);
goog.exportSymbol('proto.NewPlayerActionEvent', null, global);
goog.exportSymbol('proto.NewPlayerActionEvent.ProtoAction', null, global);
goog.exportSymbol('proto.NewPlayerToActEvent', null, global);
goog.exportSymbol('proto.NewPlayerToActEvent.ProtoPossibleAction', null, global);
goog.exportSymbol('proto.NewStreetEvent', null, global);
goog.exportSymbol('proto.PlayerActionReq', null, global);
goog.exportSymbol('proto.PlayerReqRes', null, global);
goog.exportSymbol('proto.PlayersUpdateEvent', null, global);
goog.exportSymbol('proto.PotUpdateEvent', null, global);
goog.exportSymbol('proto.PotUpdateEvent.ProtoPot', null, global);
goog.exportSymbol('proto.PotWinnerEvent', null, global);
goog.exportSymbol('proto.PotWinnerEvent.PotWinner', null, global);
goog.exportSymbol('proto.ProtoActionType', null, global);
goog.exportSymbol('proto.ProtoCard', null, global);
goog.exportSymbol('proto.ProtoCard.ProtoSuit', null, global);
goog.exportSymbol('proto.ProtoCard.ProtoValue', null, global);
goog.exportSymbol('proto.ProtoPlayer', null, global);
goog.exportSymbol('proto.ProtoPlayer.ProtoPlayerStatus', null, global);
goog.exportSymbol('proto.ProtoPlayer.ProtoPosition', null, global);
goog.exportSymbol('proto.ProtoStreet', null, global);
goog.exportSymbol('proto.ShowdownEvent', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.JoinGameReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.JoinGameReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.JoinGameReq.displayName = 'proto.JoinGameReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LeaveGameReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LeaveGameReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.LeaveGameReq.displayName = 'proto.LeaveGameReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayerActionReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PlayerActionReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PlayerActionReq.displayName = 'proto.PlayerActionReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayerReqRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PlayerReqRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PlayerReqRes.displayName = 'proto.PlayerReqRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameStreamReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameStreamReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GameStreamReq.displayName = 'proto.GameStreamReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameStreamRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.GameStreamRes.oneofGroups_);
};
goog.inherits(proto.GameStreamRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GameStreamRes.displayName = 'proto.GameStreamRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayersUpdateEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PlayersUpdateEvent.repeatedFields_, null);
};
goog.inherits(proto.PlayersUpdateEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PlayersUpdateEvent.displayName = 'proto.PlayersUpdateEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NewStreetEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NewStreetEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NewStreetEvent.displayName = 'proto.NewStreetEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DealPlayersEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DealPlayersEvent.repeatedFields_, null);
};
goog.inherits(proto.DealPlayersEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DealPlayersEvent.displayName = 'proto.DealPlayersEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DealPlayersEvent.PlayerCard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DealPlayersEvent.PlayerCard.repeatedFields_, null);
};
goog.inherits(proto.DealPlayersEvent.PlayerCard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DealPlayersEvent.PlayerCard.displayName = 'proto.DealPlayersEvent.PlayerCard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DealBoardEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DealBoardEvent.repeatedFields_, null);
};
goog.inherits(proto.DealBoardEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DealBoardEvent.displayName = 'proto.DealBoardEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NewPlayerToActEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.NewPlayerToActEvent.repeatedFields_, null);
};
goog.inherits(proto.NewPlayerToActEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NewPlayerToActEvent.displayName = 'proto.NewPlayerToActEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NewPlayerToActEvent.ProtoPossibleAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NewPlayerToActEvent.ProtoPossibleAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NewPlayerToActEvent.ProtoPossibleAction.displayName = 'proto.NewPlayerToActEvent.ProtoPossibleAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NewPlayerActionEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NewPlayerActionEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NewPlayerActionEvent.displayName = 'proto.NewPlayerActionEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NewPlayerActionEvent.ProtoAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NewPlayerActionEvent.ProtoAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NewPlayerActionEvent.ProtoAction.displayName = 'proto.NewPlayerActionEvent.ProtoAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PotUpdateEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PotUpdateEvent.repeatedFields_, null);
};
goog.inherits(proto.PotUpdateEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PotUpdateEvent.displayName = 'proto.PotUpdateEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PotUpdateEvent.ProtoPot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PotUpdateEvent.ProtoPot.repeatedFields_, null);
};
goog.inherits(proto.PotUpdateEvent.ProtoPot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PotUpdateEvent.ProtoPot.displayName = 'proto.PotUpdateEvent.ProtoPot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ShowdownEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ShowdownEvent.repeatedFields_, null);
};
goog.inherits(proto.ShowdownEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ShowdownEvent.displayName = 'proto.ShowdownEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PotWinnerEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PotWinnerEvent.repeatedFields_, null);
};
goog.inherits(proto.PotWinnerEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PotWinnerEvent.displayName = 'proto.PotWinnerEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PotWinnerEvent.PotWinner = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PotWinnerEvent.PotWinner, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PotWinnerEvent.PotWinner.displayName = 'proto.PotWinnerEvent.PotWinner';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoCard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoCard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoCard.displayName = 'proto.ProtoCard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoPlayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ProtoPlayer.repeatedFields_, null);
};
goog.inherits(proto.ProtoPlayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoPlayer.displayName = 'proto.ProtoPlayer';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.JoinGameReq.prototype.toObject = function(opt_includeInstance) {
  return proto.JoinGameReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.JoinGameReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JoinGameReq.toObject = function(includeInstance, msg) {
  var f, obj = {
playerName: jspb.Message.getFieldWithDefault(msg, 1, ""),
chips: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.JoinGameReq}
 */
proto.JoinGameReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.JoinGameReq;
  return proto.JoinGameReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.JoinGameReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.JoinGameReq}
 */
proto.JoinGameReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChips(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.JoinGameReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.JoinGameReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.JoinGameReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JoinGameReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChips();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string player_name = 1;
 * @return {string}
 */
proto.JoinGameReq.prototype.getPlayerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.JoinGameReq} returns this
 */
proto.JoinGameReq.prototype.setPlayerName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 chips = 2;
 * @return {number}
 */
proto.JoinGameReq.prototype.getChips = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.JoinGameReq} returns this
 */
proto.JoinGameReq.prototype.setChips = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LeaveGameReq.prototype.toObject = function(opt_includeInstance) {
  return proto.LeaveGameReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LeaveGameReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LeaveGameReq.toObject = function(includeInstance, msg) {
  var f, obj = {
playerName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LeaveGameReq}
 */
proto.LeaveGameReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LeaveGameReq;
  return proto.LeaveGameReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LeaveGameReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LeaveGameReq}
 */
proto.LeaveGameReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LeaveGameReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LeaveGameReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LeaveGameReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LeaveGameReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string player_name = 1;
 * @return {string}
 */
proto.LeaveGameReq.prototype.getPlayerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.LeaveGameReq} returns this
 */
proto.LeaveGameReq.prototype.setPlayerName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayerActionReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayerActionReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayerActionReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerActionReq.toObject = function(includeInstance, msg) {
  var f, obj = {
playerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
actionType: jspb.Message.getFieldWithDefault(msg, 2, 0),
actionAmount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayerActionReq}
 */
proto.PlayerActionReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayerActionReq;
  return proto.PlayerActionReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayerActionReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayerActionReq}
 */
proto.PlayerActionReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {!proto.ProtoActionType} */ (reader.readEnum());
      msg.setActionType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActionAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayerActionReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayerActionReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayerActionReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerActionReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getActionType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getActionAmount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string player_id = 1;
 * @return {string}
 */
proto.PlayerActionReq.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PlayerActionReq} returns this
 */
proto.PlayerActionReq.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ProtoActionType action_type = 2;
 * @return {!proto.ProtoActionType}
 */
proto.PlayerActionReq.prototype.getActionType = function() {
  return /** @type {!proto.ProtoActionType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ProtoActionType} value
 * @return {!proto.PlayerActionReq} returns this
 */
proto.PlayerActionReq.prototype.setActionType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint32 action_amount = 3;
 * @return {number}
 */
proto.PlayerActionReq.prototype.getActionAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PlayerActionReq} returns this
 */
proto.PlayerActionReq.prototype.setActionAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayerReqRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayerReqRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayerReqRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerReqRes.toObject = function(includeInstance, msg) {
  var f, obj = {
success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayerReqRes}
 */
proto.PlayerReqRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayerReqRes;
  return proto.PlayerReqRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayerReqRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayerReqRes}
 */
proto.PlayerReqRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayerReqRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayerReqRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayerReqRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerReqRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.PlayerReqRes.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PlayerReqRes} returns this
 */
proto.PlayerReqRes.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.PlayerReqRes.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PlayerReqRes} returns this
 */
proto.PlayerReqRes.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameStreamReq.prototype.toObject = function(opt_includeInstance) {
  return proto.GameStreamReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameStreamReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameStreamReq.toObject = function(includeInstance, msg) {
  var f, obj = {
playerId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameStreamReq}
 */
proto.GameStreamReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameStreamReq;
  return proto.GameStreamReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameStreamReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameStreamReq}
 */
proto.GameStreamReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameStreamReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameStreamReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameStreamReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameStreamReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string player_id = 1;
 * @return {string}
 */
proto.GameStreamReq.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GameStreamReq} returns this
 */
proto.GameStreamReq.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.GameStreamRes.oneofGroups_ = [[1,2,3,4,5,6,7,8,9]];

/**
 * @enum {number}
 */
proto.GameStreamRes.EventCase = {
  EVENT_NOT_SET: 0,
  PLAYERS_UPDATE: 1,
  NEW_STREET: 2,
  DEAL_PLAYERS: 3,
  DEAL_BOARD: 4,
  NEXT_PLAYER_TO_ACT: 5,
  NEW_PLAYER_ACTION: 6,
  POT_UPDATE: 7,
  SHOWDOWN: 8,
  POT_WINNER: 9
};

/**
 * @return {proto.GameStreamRes.EventCase}
 */
proto.GameStreamRes.prototype.getEventCase = function() {
  return /** @type {proto.GameStreamRes.EventCase} */(jspb.Message.computeOneofCase(this, proto.GameStreamRes.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameStreamRes.prototype.toObject = function(opt_includeInstance) {
  return proto.GameStreamRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameStreamRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameStreamRes.toObject = function(includeInstance, msg) {
  var f, obj = {
playersUpdate: (f = msg.getPlayersUpdate()) && proto.PlayersUpdateEvent.toObject(includeInstance, f),
newStreet: (f = msg.getNewStreet()) && proto.NewStreetEvent.toObject(includeInstance, f),
dealPlayers: (f = msg.getDealPlayers()) && proto.DealPlayersEvent.toObject(includeInstance, f),
dealBoard: (f = msg.getDealBoard()) && proto.DealBoardEvent.toObject(includeInstance, f),
nextPlayerToAct: (f = msg.getNextPlayerToAct()) && proto.NewPlayerToActEvent.toObject(includeInstance, f),
newPlayerAction: (f = msg.getNewPlayerAction()) && proto.NewPlayerActionEvent.toObject(includeInstance, f),
potUpdate: (f = msg.getPotUpdate()) && proto.PotUpdateEvent.toObject(includeInstance, f),
showdown: (f = msg.getShowdown()) && proto.ShowdownEvent.toObject(includeInstance, f),
potWinner: (f = msg.getPotWinner()) && proto.PotWinnerEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameStreamRes}
 */
proto.GameStreamRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameStreamRes;
  return proto.GameStreamRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameStreamRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameStreamRes}
 */
proto.GameStreamRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PlayersUpdateEvent;
      reader.readMessage(value,proto.PlayersUpdateEvent.deserializeBinaryFromReader);
      msg.setPlayersUpdate(value);
      break;
    case 2:
      var value = new proto.NewStreetEvent;
      reader.readMessage(value,proto.NewStreetEvent.deserializeBinaryFromReader);
      msg.setNewStreet(value);
      break;
    case 3:
      var value = new proto.DealPlayersEvent;
      reader.readMessage(value,proto.DealPlayersEvent.deserializeBinaryFromReader);
      msg.setDealPlayers(value);
      break;
    case 4:
      var value = new proto.DealBoardEvent;
      reader.readMessage(value,proto.DealBoardEvent.deserializeBinaryFromReader);
      msg.setDealBoard(value);
      break;
    case 5:
      var value = new proto.NewPlayerToActEvent;
      reader.readMessage(value,proto.NewPlayerToActEvent.deserializeBinaryFromReader);
      msg.setNextPlayerToAct(value);
      break;
    case 6:
      var value = new proto.NewPlayerActionEvent;
      reader.readMessage(value,proto.NewPlayerActionEvent.deserializeBinaryFromReader);
      msg.setNewPlayerAction(value);
      break;
    case 7:
      var value = new proto.PotUpdateEvent;
      reader.readMessage(value,proto.PotUpdateEvent.deserializeBinaryFromReader);
      msg.setPotUpdate(value);
      break;
    case 8:
      var value = new proto.ShowdownEvent;
      reader.readMessage(value,proto.ShowdownEvent.deserializeBinaryFromReader);
      msg.setShowdown(value);
      break;
    case 9:
      var value = new proto.PotWinnerEvent;
      reader.readMessage(value,proto.PotWinnerEvent.deserializeBinaryFromReader);
      msg.setPotWinner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameStreamRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameStreamRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameStreamRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameStreamRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayersUpdate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PlayersUpdateEvent.serializeBinaryToWriter
    );
  }
  f = message.getNewStreet();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.NewStreetEvent.serializeBinaryToWriter
    );
  }
  f = message.getDealPlayers();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.DealPlayersEvent.serializeBinaryToWriter
    );
  }
  f = message.getDealBoard();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.DealBoardEvent.serializeBinaryToWriter
    );
  }
  f = message.getNextPlayerToAct();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.NewPlayerToActEvent.serializeBinaryToWriter
    );
  }
  f = message.getNewPlayerAction();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.NewPlayerActionEvent.serializeBinaryToWriter
    );
  }
  f = message.getPotUpdate();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.PotUpdateEvent.serializeBinaryToWriter
    );
  }
  f = message.getShowdown();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.ShowdownEvent.serializeBinaryToWriter
    );
  }
  f = message.getPotWinner();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.PotWinnerEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional PlayersUpdateEvent players_update = 1;
 * @return {?proto.PlayersUpdateEvent}
 */
proto.GameStreamRes.prototype.getPlayersUpdate = function() {
  return /** @type{?proto.PlayersUpdateEvent} */ (
    jspb.Message.getWrapperField(this, proto.PlayersUpdateEvent, 1));
};


/**
 * @param {?proto.PlayersUpdateEvent|undefined} value
 * @return {!proto.GameStreamRes} returns this
*/
proto.GameStreamRes.prototype.setPlayersUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.GameStreamRes.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GameStreamRes} returns this
 */
proto.GameStreamRes.prototype.clearPlayersUpdate = function() {
  return this.setPlayersUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GameStreamRes.prototype.hasPlayersUpdate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NewStreetEvent new_street = 2;
 * @return {?proto.NewStreetEvent}
 */
proto.GameStreamRes.prototype.getNewStreet = function() {
  return /** @type{?proto.NewStreetEvent} */ (
    jspb.Message.getWrapperField(this, proto.NewStreetEvent, 2));
};


/**
 * @param {?proto.NewStreetEvent|undefined} value
 * @return {!proto.GameStreamRes} returns this
*/
proto.GameStreamRes.prototype.setNewStreet = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.GameStreamRes.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GameStreamRes} returns this
 */
proto.GameStreamRes.prototype.clearNewStreet = function() {
  return this.setNewStreet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GameStreamRes.prototype.hasNewStreet = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DealPlayersEvent deal_players = 3;
 * @return {?proto.DealPlayersEvent}
 */
proto.GameStreamRes.prototype.getDealPlayers = function() {
  return /** @type{?proto.DealPlayersEvent} */ (
    jspb.Message.getWrapperField(this, proto.DealPlayersEvent, 3));
};


/**
 * @param {?proto.DealPlayersEvent|undefined} value
 * @return {!proto.GameStreamRes} returns this
*/
proto.GameStreamRes.prototype.setDealPlayers = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.GameStreamRes.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GameStreamRes} returns this
 */
proto.GameStreamRes.prototype.clearDealPlayers = function() {
  return this.setDealPlayers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GameStreamRes.prototype.hasDealPlayers = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DealBoardEvent deal_board = 4;
 * @return {?proto.DealBoardEvent}
 */
proto.GameStreamRes.prototype.getDealBoard = function() {
  return /** @type{?proto.DealBoardEvent} */ (
    jspb.Message.getWrapperField(this, proto.DealBoardEvent, 4));
};


/**
 * @param {?proto.DealBoardEvent|undefined} value
 * @return {!proto.GameStreamRes} returns this
*/
proto.GameStreamRes.prototype.setDealBoard = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.GameStreamRes.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GameStreamRes} returns this
 */
proto.GameStreamRes.prototype.clearDealBoard = function() {
  return this.setDealBoard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GameStreamRes.prototype.hasDealBoard = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional NewPlayerToActEvent next_player_to_act = 5;
 * @return {?proto.NewPlayerToActEvent}
 */
proto.GameStreamRes.prototype.getNextPlayerToAct = function() {
  return /** @type{?proto.NewPlayerToActEvent} */ (
    jspb.Message.getWrapperField(this, proto.NewPlayerToActEvent, 5));
};


/**
 * @param {?proto.NewPlayerToActEvent|undefined} value
 * @return {!proto.GameStreamRes} returns this
*/
proto.GameStreamRes.prototype.setNextPlayerToAct = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.GameStreamRes.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GameStreamRes} returns this
 */
proto.GameStreamRes.prototype.clearNextPlayerToAct = function() {
  return this.setNextPlayerToAct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GameStreamRes.prototype.hasNextPlayerToAct = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional NewPlayerActionEvent new_player_action = 6;
 * @return {?proto.NewPlayerActionEvent}
 */
proto.GameStreamRes.prototype.getNewPlayerAction = function() {
  return /** @type{?proto.NewPlayerActionEvent} */ (
    jspb.Message.getWrapperField(this, proto.NewPlayerActionEvent, 6));
};


/**
 * @param {?proto.NewPlayerActionEvent|undefined} value
 * @return {!proto.GameStreamRes} returns this
*/
proto.GameStreamRes.prototype.setNewPlayerAction = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.GameStreamRes.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GameStreamRes} returns this
 */
proto.GameStreamRes.prototype.clearNewPlayerAction = function() {
  return this.setNewPlayerAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GameStreamRes.prototype.hasNewPlayerAction = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional PotUpdateEvent pot_update = 7;
 * @return {?proto.PotUpdateEvent}
 */
proto.GameStreamRes.prototype.getPotUpdate = function() {
  return /** @type{?proto.PotUpdateEvent} */ (
    jspb.Message.getWrapperField(this, proto.PotUpdateEvent, 7));
};


/**
 * @param {?proto.PotUpdateEvent|undefined} value
 * @return {!proto.GameStreamRes} returns this
*/
proto.GameStreamRes.prototype.setPotUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.GameStreamRes.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GameStreamRes} returns this
 */
proto.GameStreamRes.prototype.clearPotUpdate = function() {
  return this.setPotUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GameStreamRes.prototype.hasPotUpdate = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ShowdownEvent showdown = 8;
 * @return {?proto.ShowdownEvent}
 */
proto.GameStreamRes.prototype.getShowdown = function() {
  return /** @type{?proto.ShowdownEvent} */ (
    jspb.Message.getWrapperField(this, proto.ShowdownEvent, 8));
};


/**
 * @param {?proto.ShowdownEvent|undefined} value
 * @return {!proto.GameStreamRes} returns this
*/
proto.GameStreamRes.prototype.setShowdown = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.GameStreamRes.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GameStreamRes} returns this
 */
proto.GameStreamRes.prototype.clearShowdown = function() {
  return this.setShowdown(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GameStreamRes.prototype.hasShowdown = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional PotWinnerEvent pot_winner = 9;
 * @return {?proto.PotWinnerEvent}
 */
proto.GameStreamRes.prototype.getPotWinner = function() {
  return /** @type{?proto.PotWinnerEvent} */ (
    jspb.Message.getWrapperField(this, proto.PotWinnerEvent, 9));
};


/**
 * @param {?proto.PotWinnerEvent|undefined} value
 * @return {!proto.GameStreamRes} returns this
*/
proto.GameStreamRes.prototype.setPotWinner = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.GameStreamRes.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GameStreamRes} returns this
 */
proto.GameStreamRes.prototype.clearPotWinner = function() {
  return this.setPotWinner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GameStreamRes.prototype.hasPotWinner = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PlayersUpdateEvent.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayersUpdateEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayersUpdateEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayersUpdateEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayersUpdateEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
newPlayersList: jspb.Message.toObjectList(msg.getNewPlayersList(),
    proto.ProtoPlayer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayersUpdateEvent}
 */
proto.PlayersUpdateEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayersUpdateEvent;
  return proto.PlayersUpdateEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayersUpdateEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayersUpdateEvent}
 */
proto.PlayersUpdateEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ProtoPlayer;
      reader.readMessage(value,proto.ProtoPlayer.deserializeBinaryFromReader);
      msg.addNewPlayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayersUpdateEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayersUpdateEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayersUpdateEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayersUpdateEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ProtoPlayer.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ProtoPlayer new_players = 1;
 * @return {!Array<!proto.ProtoPlayer>}
 */
proto.PlayersUpdateEvent.prototype.getNewPlayersList = function() {
  return /** @type{!Array<!proto.ProtoPlayer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ProtoPlayer, 1));
};


/**
 * @param {!Array<!proto.ProtoPlayer>} value
 * @return {!proto.PlayersUpdateEvent} returns this
*/
proto.PlayersUpdateEvent.prototype.setNewPlayersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ProtoPlayer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ProtoPlayer}
 */
proto.PlayersUpdateEvent.prototype.addNewPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ProtoPlayer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PlayersUpdateEvent} returns this
 */
proto.PlayersUpdateEvent.prototype.clearNewPlayersList = function() {
  return this.setNewPlayersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NewStreetEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.NewStreetEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NewStreetEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NewStreetEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
newStreet: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NewStreetEvent}
 */
proto.NewStreetEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NewStreetEvent;
  return proto.NewStreetEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NewStreetEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NewStreetEvent}
 */
proto.NewStreetEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ProtoStreet} */ (reader.readEnum());
      msg.setNewStreet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NewStreetEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NewStreetEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NewStreetEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NewStreetEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewStreet();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional ProtoStreet new_street = 1;
 * @return {!proto.ProtoStreet}
 */
proto.NewStreetEvent.prototype.getNewStreet = function() {
  return /** @type {!proto.ProtoStreet} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ProtoStreet} value
 * @return {!proto.NewStreetEvent} returns this
 */
proto.NewStreetEvent.prototype.setNewStreet = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DealPlayersEvent.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DealPlayersEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.DealPlayersEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DealPlayersEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DealPlayersEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
playerCardsList: jspb.Message.toObjectList(msg.getPlayerCardsList(),
    proto.DealPlayersEvent.PlayerCard.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DealPlayersEvent}
 */
proto.DealPlayersEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DealPlayersEvent;
  return proto.DealPlayersEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DealPlayersEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DealPlayersEvent}
 */
proto.DealPlayersEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DealPlayersEvent.PlayerCard;
      reader.readMessage(value,proto.DealPlayersEvent.PlayerCard.deserializeBinaryFromReader);
      msg.addPlayerCards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DealPlayersEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DealPlayersEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DealPlayersEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DealPlayersEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerCardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.DealPlayersEvent.PlayerCard.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DealPlayersEvent.PlayerCard.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DealPlayersEvent.PlayerCard.prototype.toObject = function(opt_includeInstance) {
  return proto.DealPlayersEvent.PlayerCard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DealPlayersEvent.PlayerCard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DealPlayersEvent.PlayerCard.toObject = function(includeInstance, msg) {
  var f, obj = {
playerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
holeCardsList: jspb.Message.toObjectList(msg.getHoleCardsList(),
    proto.ProtoCard.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DealPlayersEvent.PlayerCard}
 */
proto.DealPlayersEvent.PlayerCard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DealPlayersEvent.PlayerCard;
  return proto.DealPlayersEvent.PlayerCard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DealPlayersEvent.PlayerCard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DealPlayersEvent.PlayerCard}
 */
proto.DealPlayersEvent.PlayerCard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = new proto.ProtoCard;
      reader.readMessage(value,proto.ProtoCard.deserializeBinaryFromReader);
      msg.addHoleCards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DealPlayersEvent.PlayerCard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DealPlayersEvent.PlayerCard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DealPlayersEvent.PlayerCard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DealPlayersEvent.PlayerCard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHoleCardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ProtoCard.serializeBinaryToWriter
    );
  }
};


/**
 * optional string player_id = 1;
 * @return {string}
 */
proto.DealPlayersEvent.PlayerCard.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.DealPlayersEvent.PlayerCard} returns this
 */
proto.DealPlayersEvent.PlayerCard.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated ProtoCard hole_cards = 2;
 * @return {!Array<!proto.ProtoCard>}
 */
proto.DealPlayersEvent.PlayerCard.prototype.getHoleCardsList = function() {
  return /** @type{!Array<!proto.ProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ProtoCard, 2));
};


/**
 * @param {!Array<!proto.ProtoCard>} value
 * @return {!proto.DealPlayersEvent.PlayerCard} returns this
*/
proto.DealPlayersEvent.PlayerCard.prototype.setHoleCardsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ProtoCard}
 */
proto.DealPlayersEvent.PlayerCard.prototype.addHoleCards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ProtoCard, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DealPlayersEvent.PlayerCard} returns this
 */
proto.DealPlayersEvent.PlayerCard.prototype.clearHoleCardsList = function() {
  return this.setHoleCardsList([]);
};


/**
 * repeated PlayerCard player_cards = 1;
 * @return {!Array<!proto.DealPlayersEvent.PlayerCard>}
 */
proto.DealPlayersEvent.prototype.getPlayerCardsList = function() {
  return /** @type{!Array<!proto.DealPlayersEvent.PlayerCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DealPlayersEvent.PlayerCard, 1));
};


/**
 * @param {!Array<!proto.DealPlayersEvent.PlayerCard>} value
 * @return {!proto.DealPlayersEvent} returns this
*/
proto.DealPlayersEvent.prototype.setPlayerCardsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.DealPlayersEvent.PlayerCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DealPlayersEvent.PlayerCard}
 */
proto.DealPlayersEvent.prototype.addPlayerCards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.DealPlayersEvent.PlayerCard, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DealPlayersEvent} returns this
 */
proto.DealPlayersEvent.prototype.clearPlayerCardsList = function() {
  return this.setPlayerCardsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DealBoardEvent.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DealBoardEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.DealBoardEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DealBoardEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DealBoardEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
communityCardsList: jspb.Message.toObjectList(msg.getCommunityCardsList(),
    proto.ProtoCard.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DealBoardEvent}
 */
proto.DealBoardEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DealBoardEvent;
  return proto.DealBoardEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DealBoardEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DealBoardEvent}
 */
proto.DealBoardEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ProtoCard;
      reader.readMessage(value,proto.ProtoCard.deserializeBinaryFromReader);
      msg.addCommunityCards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DealBoardEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DealBoardEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DealBoardEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DealBoardEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommunityCardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ProtoCard.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ProtoCard community_cards = 1;
 * @return {!Array<!proto.ProtoCard>}
 */
proto.DealBoardEvent.prototype.getCommunityCardsList = function() {
  return /** @type{!Array<!proto.ProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ProtoCard, 1));
};


/**
 * @param {!Array<!proto.ProtoCard>} value
 * @return {!proto.DealBoardEvent} returns this
*/
proto.DealBoardEvent.prototype.setCommunityCardsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ProtoCard}
 */
proto.DealBoardEvent.prototype.addCommunityCards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ProtoCard, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DealBoardEvent} returns this
 */
proto.DealBoardEvent.prototype.clearCommunityCardsList = function() {
  return this.setCommunityCardsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.NewPlayerToActEvent.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NewPlayerToActEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.NewPlayerToActEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NewPlayerToActEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NewPlayerToActEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
playerToAct: jspb.Message.getFieldWithDefault(msg, 1, ""),
possibleActionsList: jspb.Message.toObjectList(msg.getPossibleActionsList(),
    proto.NewPlayerToActEvent.ProtoPossibleAction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NewPlayerToActEvent}
 */
proto.NewPlayerToActEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NewPlayerToActEvent;
  return proto.NewPlayerToActEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NewPlayerToActEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NewPlayerToActEvent}
 */
proto.NewPlayerToActEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerToAct(value);
      break;
    case 2:
      var value = new proto.NewPlayerToActEvent.ProtoPossibleAction;
      reader.readMessage(value,proto.NewPlayerToActEvent.ProtoPossibleAction.deserializeBinaryFromReader);
      msg.addPossibleActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NewPlayerToActEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NewPlayerToActEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NewPlayerToActEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NewPlayerToActEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerToAct();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPossibleActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.NewPlayerToActEvent.ProtoPossibleAction.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NewPlayerToActEvent.ProtoPossibleAction.prototype.toObject = function(opt_includeInstance) {
  return proto.NewPlayerToActEvent.ProtoPossibleAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NewPlayerToActEvent.ProtoPossibleAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NewPlayerToActEvent.ProtoPossibleAction.toObject = function(includeInstance, msg) {
  var f, obj = {
actionType: jspb.Message.getFieldWithDefault(msg, 1, 0),
primaryAmount: jspb.Message.getFieldWithDefault(msg, 2, 0),
secondaryAmount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NewPlayerToActEvent.ProtoPossibleAction}
 */
proto.NewPlayerToActEvent.ProtoPossibleAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NewPlayerToActEvent.ProtoPossibleAction;
  return proto.NewPlayerToActEvent.ProtoPossibleAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NewPlayerToActEvent.ProtoPossibleAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NewPlayerToActEvent.ProtoPossibleAction}
 */
proto.NewPlayerToActEvent.ProtoPossibleAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ProtoActionType} */ (reader.readEnum());
      msg.setActionType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPrimaryAmount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSecondaryAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NewPlayerToActEvent.ProtoPossibleAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NewPlayerToActEvent.ProtoPossibleAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NewPlayerToActEvent.ProtoPossibleAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NewPlayerToActEvent.ProtoPossibleAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPrimaryAmount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSecondaryAmount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional ProtoActionType action_type = 1;
 * @return {!proto.ProtoActionType}
 */
proto.NewPlayerToActEvent.ProtoPossibleAction.prototype.getActionType = function() {
  return /** @type {!proto.ProtoActionType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ProtoActionType} value
 * @return {!proto.NewPlayerToActEvent.ProtoPossibleAction} returns this
 */
proto.NewPlayerToActEvent.ProtoPossibleAction.prototype.setActionType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 primary_amount = 2;
 * @return {number}
 */
proto.NewPlayerToActEvent.ProtoPossibleAction.prototype.getPrimaryAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.NewPlayerToActEvent.ProtoPossibleAction} returns this
 */
proto.NewPlayerToActEvent.ProtoPossibleAction.prototype.setPrimaryAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 secondary_amount = 3;
 * @return {number}
 */
proto.NewPlayerToActEvent.ProtoPossibleAction.prototype.getSecondaryAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.NewPlayerToActEvent.ProtoPossibleAction} returns this
 */
proto.NewPlayerToActEvent.ProtoPossibleAction.prototype.setSecondaryAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string player_to_act = 1;
 * @return {string}
 */
proto.NewPlayerToActEvent.prototype.getPlayerToAct = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.NewPlayerToActEvent} returns this
 */
proto.NewPlayerToActEvent.prototype.setPlayerToAct = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated ProtoPossibleAction possible_actions = 2;
 * @return {!Array<!proto.NewPlayerToActEvent.ProtoPossibleAction>}
 */
proto.NewPlayerToActEvent.prototype.getPossibleActionsList = function() {
  return /** @type{!Array<!proto.NewPlayerToActEvent.ProtoPossibleAction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.NewPlayerToActEvent.ProtoPossibleAction, 2));
};


/**
 * @param {!Array<!proto.NewPlayerToActEvent.ProtoPossibleAction>} value
 * @return {!proto.NewPlayerToActEvent} returns this
*/
proto.NewPlayerToActEvent.prototype.setPossibleActionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.NewPlayerToActEvent.ProtoPossibleAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.NewPlayerToActEvent.ProtoPossibleAction}
 */
proto.NewPlayerToActEvent.prototype.addPossibleActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.NewPlayerToActEvent.ProtoPossibleAction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.NewPlayerToActEvent} returns this
 */
proto.NewPlayerToActEvent.prototype.clearPossibleActionsList = function() {
  return this.setPossibleActionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NewPlayerActionEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.NewPlayerActionEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NewPlayerActionEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NewPlayerActionEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
playerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
action: (f = msg.getAction()) && proto.NewPlayerActionEvent.ProtoAction.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NewPlayerActionEvent}
 */
proto.NewPlayerActionEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NewPlayerActionEvent;
  return proto.NewPlayerActionEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NewPlayerActionEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NewPlayerActionEvent}
 */
proto.NewPlayerActionEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = new proto.NewPlayerActionEvent.ProtoAction;
      reader.readMessage(value,proto.NewPlayerActionEvent.ProtoAction.deserializeBinaryFromReader);
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NewPlayerActionEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NewPlayerActionEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NewPlayerActionEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NewPlayerActionEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAction();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.NewPlayerActionEvent.ProtoAction.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NewPlayerActionEvent.ProtoAction.prototype.toObject = function(opt_includeInstance) {
  return proto.NewPlayerActionEvent.ProtoAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NewPlayerActionEvent.ProtoAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NewPlayerActionEvent.ProtoAction.toObject = function(includeInstance, msg) {
  var f, obj = {
actionType: jspb.Message.getFieldWithDefault(msg, 1, 0),
actionAmount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NewPlayerActionEvent.ProtoAction}
 */
proto.NewPlayerActionEvent.ProtoAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NewPlayerActionEvent.ProtoAction;
  return proto.NewPlayerActionEvent.ProtoAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NewPlayerActionEvent.ProtoAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NewPlayerActionEvent.ProtoAction}
 */
proto.NewPlayerActionEvent.ProtoAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ProtoActionType} */ (reader.readEnum());
      msg.setActionType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActionAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NewPlayerActionEvent.ProtoAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NewPlayerActionEvent.ProtoAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NewPlayerActionEvent.ProtoAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NewPlayerActionEvent.ProtoAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getActionAmount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional ProtoActionType action_type = 1;
 * @return {!proto.ProtoActionType}
 */
proto.NewPlayerActionEvent.ProtoAction.prototype.getActionType = function() {
  return /** @type {!proto.ProtoActionType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ProtoActionType} value
 * @return {!proto.NewPlayerActionEvent.ProtoAction} returns this
 */
proto.NewPlayerActionEvent.ProtoAction.prototype.setActionType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 action_amount = 2;
 * @return {number}
 */
proto.NewPlayerActionEvent.ProtoAction.prototype.getActionAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.NewPlayerActionEvent.ProtoAction} returns this
 */
proto.NewPlayerActionEvent.ProtoAction.prototype.setActionAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string player_id = 1;
 * @return {string}
 */
proto.NewPlayerActionEvent.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.NewPlayerActionEvent} returns this
 */
proto.NewPlayerActionEvent.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ProtoAction action = 2;
 * @return {?proto.NewPlayerActionEvent.ProtoAction}
 */
proto.NewPlayerActionEvent.prototype.getAction = function() {
  return /** @type{?proto.NewPlayerActionEvent.ProtoAction} */ (
    jspb.Message.getWrapperField(this, proto.NewPlayerActionEvent.ProtoAction, 2));
};


/**
 * @param {?proto.NewPlayerActionEvent.ProtoAction|undefined} value
 * @return {!proto.NewPlayerActionEvent} returns this
*/
proto.NewPlayerActionEvent.prototype.setAction = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NewPlayerActionEvent} returns this
 */
proto.NewPlayerActionEvent.prototype.clearAction = function() {
  return this.setAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NewPlayerActionEvent.prototype.hasAction = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PotUpdateEvent.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PotUpdateEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.PotUpdateEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PotUpdateEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PotUpdateEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
updatedPotsList: jspb.Message.toObjectList(msg.getUpdatedPotsList(),
    proto.PotUpdateEvent.ProtoPot.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PotUpdateEvent}
 */
proto.PotUpdateEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PotUpdateEvent;
  return proto.PotUpdateEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PotUpdateEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PotUpdateEvent}
 */
proto.PotUpdateEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PotUpdateEvent.ProtoPot;
      reader.readMessage(value,proto.PotUpdateEvent.ProtoPot.deserializeBinaryFromReader);
      msg.addUpdatedPots(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PotUpdateEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PotUpdateEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PotUpdateEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PotUpdateEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdatedPotsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PotUpdateEvent.ProtoPot.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PotUpdateEvent.ProtoPot.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PotUpdateEvent.ProtoPot.prototype.toObject = function(opt_includeInstance) {
  return proto.PotUpdateEvent.ProtoPot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PotUpdateEvent.ProtoPot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PotUpdateEvent.ProtoPot.toObject = function(includeInstance, msg) {
  var f, obj = {
potChips: jspb.Message.getFieldWithDefault(msg, 1, 0),
eligibleIdsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PotUpdateEvent.ProtoPot}
 */
proto.PotUpdateEvent.ProtoPot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PotUpdateEvent.ProtoPot;
  return proto.PotUpdateEvent.ProtoPot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PotUpdateEvent.ProtoPot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PotUpdateEvent.ProtoPot}
 */
proto.PotUpdateEvent.ProtoPot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPotChips(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addEligibleIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PotUpdateEvent.ProtoPot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PotUpdateEvent.ProtoPot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PotUpdateEvent.ProtoPot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PotUpdateEvent.ProtoPot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPotChips();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getEligibleIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional uint32 pot_chips = 1;
 * @return {number}
 */
proto.PotUpdateEvent.ProtoPot.prototype.getPotChips = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PotUpdateEvent.ProtoPot} returns this
 */
proto.PotUpdateEvent.ProtoPot.prototype.setPotChips = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string eligible_ids = 2;
 * @return {!Array<string>}
 */
proto.PotUpdateEvent.ProtoPot.prototype.getEligibleIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.PotUpdateEvent.ProtoPot} returns this
 */
proto.PotUpdateEvent.ProtoPot.prototype.setEligibleIdsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.PotUpdateEvent.ProtoPot} returns this
 */
proto.PotUpdateEvent.ProtoPot.prototype.addEligibleIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PotUpdateEvent.ProtoPot} returns this
 */
proto.PotUpdateEvent.ProtoPot.prototype.clearEligibleIdsList = function() {
  return this.setEligibleIdsList([]);
};


/**
 * repeated ProtoPot updated_pots = 1;
 * @return {!Array<!proto.PotUpdateEvent.ProtoPot>}
 */
proto.PotUpdateEvent.prototype.getUpdatedPotsList = function() {
  return /** @type{!Array<!proto.PotUpdateEvent.ProtoPot>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PotUpdateEvent.ProtoPot, 1));
};


/**
 * @param {!Array<!proto.PotUpdateEvent.ProtoPot>} value
 * @return {!proto.PotUpdateEvent} returns this
*/
proto.PotUpdateEvent.prototype.setUpdatedPotsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PotUpdateEvent.ProtoPot=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PotUpdateEvent.ProtoPot}
 */
proto.PotUpdateEvent.prototype.addUpdatedPots = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PotUpdateEvent.ProtoPot, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PotUpdateEvent} returns this
 */
proto.PotUpdateEvent.prototype.clearUpdatedPotsList = function() {
  return this.setUpdatedPotsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ShowdownEvent.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ShowdownEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.ShowdownEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ShowdownEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ShowdownEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
playersInHandList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ShowdownEvent}
 */
proto.ShowdownEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ShowdownEvent;
  return proto.ShowdownEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ShowdownEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ShowdownEvent}
 */
proto.ShowdownEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addPlayersInHand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ShowdownEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ShowdownEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ShowdownEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ShowdownEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayersInHandList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string players_in_hand = 1;
 * @return {!Array<string>}
 */
proto.ShowdownEvent.prototype.getPlayersInHandList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ShowdownEvent} returns this
 */
proto.ShowdownEvent.prototype.setPlayersInHandList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ShowdownEvent} returns this
 */
proto.ShowdownEvent.prototype.addPlayersInHand = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ShowdownEvent} returns this
 */
proto.ShowdownEvent.prototype.clearPlayersInHandList = function() {
  return this.setPlayersInHandList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PotWinnerEvent.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PotWinnerEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.PotWinnerEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PotWinnerEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PotWinnerEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
potWinnersList: jspb.Message.toObjectList(msg.getPotWinnersList(),
    proto.PotWinnerEvent.PotWinner.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PotWinnerEvent}
 */
proto.PotWinnerEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PotWinnerEvent;
  return proto.PotWinnerEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PotWinnerEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PotWinnerEvent}
 */
proto.PotWinnerEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PotWinnerEvent.PotWinner;
      reader.readMessage(value,proto.PotWinnerEvent.PotWinner.deserializeBinaryFromReader);
      msg.addPotWinners(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PotWinnerEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PotWinnerEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PotWinnerEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PotWinnerEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPotWinnersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PotWinnerEvent.PotWinner.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PotWinnerEvent.PotWinner.prototype.toObject = function(opt_includeInstance) {
  return proto.PotWinnerEvent.PotWinner.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PotWinnerEvent.PotWinner} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PotWinnerEvent.PotWinner.toObject = function(includeInstance, msg) {
  var f, obj = {
potChips: jspb.Message.getFieldWithDefault(msg, 1, 0),
winner: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PotWinnerEvent.PotWinner}
 */
proto.PotWinnerEvent.PotWinner.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PotWinnerEvent.PotWinner;
  return proto.PotWinnerEvent.PotWinner.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PotWinnerEvent.PotWinner} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PotWinnerEvent.PotWinner}
 */
proto.PotWinnerEvent.PotWinner.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPotChips(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWinner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PotWinnerEvent.PotWinner.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PotWinnerEvent.PotWinner.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PotWinnerEvent.PotWinner} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PotWinnerEvent.PotWinner.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPotChips();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getWinner();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 pot_chips = 1;
 * @return {number}
 */
proto.PotWinnerEvent.PotWinner.prototype.getPotChips = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PotWinnerEvent.PotWinner} returns this
 */
proto.PotWinnerEvent.PotWinner.prototype.setPotChips = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string winner = 2;
 * @return {string}
 */
proto.PotWinnerEvent.PotWinner.prototype.getWinner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PotWinnerEvent.PotWinner} returns this
 */
proto.PotWinnerEvent.PotWinner.prototype.setWinner = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated PotWinner pot_winners = 1;
 * @return {!Array<!proto.PotWinnerEvent.PotWinner>}
 */
proto.PotWinnerEvent.prototype.getPotWinnersList = function() {
  return /** @type{!Array<!proto.PotWinnerEvent.PotWinner>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PotWinnerEvent.PotWinner, 1));
};


/**
 * @param {!Array<!proto.PotWinnerEvent.PotWinner>} value
 * @return {!proto.PotWinnerEvent} returns this
*/
proto.PotWinnerEvent.prototype.setPotWinnersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PotWinnerEvent.PotWinner=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PotWinnerEvent.PotWinner}
 */
proto.PotWinnerEvent.prototype.addPotWinners = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PotWinnerEvent.PotWinner, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PotWinnerEvent} returns this
 */
proto.PotWinnerEvent.prototype.clearPotWinnersList = function() {
  return this.setPotWinnersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoCard.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoCard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoCard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoCard.toObject = function(includeInstance, msg) {
  var f, obj = {
suit: jspb.Message.getFieldWithDefault(msg, 1, 0),
value: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoCard}
 */
proto.ProtoCard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoCard;
  return proto.ProtoCard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoCard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoCard}
 */
proto.ProtoCard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ProtoCard.ProtoSuit} */ (reader.readEnum());
      msg.setSuit(value);
      break;
    case 2:
      var value = /** @type {!proto.ProtoCard.ProtoValue} */ (reader.readEnum());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoCard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoCard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoCard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoCard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuit();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ProtoCard.ProtoSuit = {
  SUIT_UNSPECIFIED: 0,
  HEARTS: 1,
  DIAMONDS: 2,
  CLUBS: 3,
  SPADES: 4
};

/**
 * @enum {number}
 */
proto.ProtoCard.ProtoValue = {
  VALUE_UNSPECIFIED: 0,
  TWO: 2,
  THREE: 3,
  FOUR: 4,
  FIVE: 5,
  SIX: 6,
  SEVEN: 7,
  EIGHT: 8,
  NINE: 9,
  TEN: 10,
  JACK: 11,
  QUEEN: 12,
  KING: 13,
  ACE: 14
};

/**
 * optional ProtoSuit suit = 1;
 * @return {!proto.ProtoCard.ProtoSuit}
 */
proto.ProtoCard.prototype.getSuit = function() {
  return /** @type {!proto.ProtoCard.ProtoSuit} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ProtoCard.ProtoSuit} value
 * @return {!proto.ProtoCard} returns this
 */
proto.ProtoCard.prototype.setSuit = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ProtoValue value = 2;
 * @return {!proto.ProtoCard.ProtoValue}
 */
proto.ProtoCard.prototype.getValue = function() {
  return /** @type {!proto.ProtoCard.ProtoValue} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ProtoCard.ProtoValue} value
 * @return {!proto.ProtoCard} returns this
 */
proto.ProtoCard.prototype.setValue = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ProtoPlayer.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoPlayer.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoPlayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoPlayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoPlayer.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
chips: jspb.Message.getFieldWithDefault(msg, 2, 0),
holeCardsList: jspb.Message.toObjectList(msg.getHoleCardsList(),
    proto.ProtoCard.toObject, includeInstance),
recentBets: jspb.Message.getFieldWithDefault(msg, 4, 0),
position: jspb.Message.getFieldWithDefault(msg, 5, 0),
status: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoPlayer}
 */
proto.ProtoPlayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoPlayer;
  return proto.ProtoPlayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoPlayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoPlayer}
 */
proto.ProtoPlayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChips(value);
      break;
    case 3:
      var value = new proto.ProtoCard;
      reader.readMessage(value,proto.ProtoCard.deserializeBinaryFromReader);
      msg.addHoleCards(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRecentBets(value);
      break;
    case 5:
      var value = /** @type {!proto.ProtoPlayer.ProtoPosition} */ (reader.readEnum());
      msg.setPosition(value);
      break;
    case 6:
      var value = /** @type {!proto.ProtoPlayer.ProtoPlayerStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoPlayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoPlayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoPlayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoPlayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChips();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getHoleCardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ProtoCard.serializeBinaryToWriter
    );
  }
  f = message.getRecentBets();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getPosition();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ProtoPlayer.ProtoPosition = {
  LOBBY: 0,
  SMALL_BLIND: 1,
  BIG_BLIND: 2,
  UTG: 3,
  UTG_1: 4,
  MIDDLE: 5,
  LOJACK: 6,
  HIJACK: 7,
  CUT_OFF: 8,
  DEALER: 9
};

/**
 * @enum {number}
 */
proto.ProtoPlayer.ProtoPlayerStatus = {
  WAITING: 0,
  IN_HAND: 1,
  FOLDED: 2,
  ALL_IN_BET: 3,
  ALL_IN_CALL: 4
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.ProtoPlayer.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProtoPlayer} returns this
 */
proto.ProtoPlayer.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 chips = 2;
 * @return {number}
 */
proto.ProtoPlayer.prototype.getChips = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoPlayer} returns this
 */
proto.ProtoPlayer.prototype.setChips = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated ProtoCard hole_cards = 3;
 * @return {!Array<!proto.ProtoCard>}
 */
proto.ProtoPlayer.prototype.getHoleCardsList = function() {
  return /** @type{!Array<!proto.ProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ProtoCard, 3));
};


/**
 * @param {!Array<!proto.ProtoCard>} value
 * @return {!proto.ProtoPlayer} returns this
*/
proto.ProtoPlayer.prototype.setHoleCardsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ProtoCard}
 */
proto.ProtoPlayer.prototype.addHoleCards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ProtoCard, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ProtoPlayer} returns this
 */
proto.ProtoPlayer.prototype.clearHoleCardsList = function() {
  return this.setHoleCardsList([]);
};


/**
 * optional uint32 recent_bets = 4;
 * @return {number}
 */
proto.ProtoPlayer.prototype.getRecentBets = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoPlayer} returns this
 */
proto.ProtoPlayer.prototype.setRecentBets = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional ProtoPosition position = 5;
 * @return {!proto.ProtoPlayer.ProtoPosition}
 */
proto.ProtoPlayer.prototype.getPosition = function() {
  return /** @type {!proto.ProtoPlayer.ProtoPosition} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.ProtoPlayer.ProtoPosition} value
 * @return {!proto.ProtoPlayer} returns this
 */
proto.ProtoPlayer.prototype.setPosition = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional ProtoPlayerStatus status = 6;
 * @return {!proto.ProtoPlayer.ProtoPlayerStatus}
 */
proto.ProtoPlayer.prototype.getStatus = function() {
  return /** @type {!proto.ProtoPlayer.ProtoPlayerStatus} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.ProtoPlayer.ProtoPlayerStatus} value
 * @return {!proto.ProtoPlayer} returns this
 */
proto.ProtoPlayer.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * @enum {number}
 */
proto.ProtoStreet = {
  STREET_UNSPECIFIED: 0,
  PRE_FLOP: 1,
  FLOP: 2,
  TURN: 3,
  RIVER: 4
};

/**
 * @enum {number}
 */
proto.ProtoActionType = {
  ACTION_UNSPECIFIED: 0,
  POST_SMALL: 1,
  POST_BIG: 2,
  CHECK: 3,
  BET: 4,
  CALL: 5,
  RAISE: 6,
  FOLD: 7,
  ALL_IN_BET: 8,
  ALL_IN_CALL: 9,
  ALL_IN_RAISE: 10
};

goog.object.extend(exports, proto);
