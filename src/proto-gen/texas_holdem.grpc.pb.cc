// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: texas_holdem.proto

#include "texas_holdem.pb.h"
#include "texas_holdem.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* PokerService_method_names[] = {
  "/PokerService/GameStream",
  "/PokerService/JoinGame",
  "/PokerService/LeaveGame",
  "/PokerService/PlayerAction",
};

std::unique_ptr< PokerService::Stub> PokerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PokerService::Stub> stub(new PokerService::Stub(channel, options));
  return stub;
}

PokerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GameStream_(PokerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_JoinGame_(PokerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LeaveGame_(PokerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PlayerAction_(PokerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::GameStreamRes>* PokerService::Stub::GameStreamRaw(::grpc::ClientContext* context, const ::GameStreamReq& request) {
  return ::grpc::internal::ClientReaderFactory< ::GameStreamRes>::Create(channel_.get(), rpcmethod_GameStream_, context, request);
}

void PokerService::Stub::async::GameStream(::grpc::ClientContext* context, const ::GameStreamReq* request, ::grpc::ClientReadReactor< ::GameStreamRes>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::GameStreamRes>::Create(stub_->channel_.get(), stub_->rpcmethod_GameStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::GameStreamRes>* PokerService::Stub::AsyncGameStreamRaw(::grpc::ClientContext* context, const ::GameStreamReq& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::GameStreamRes>::Create(channel_.get(), cq, rpcmethod_GameStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::GameStreamRes>* PokerService::Stub::PrepareAsyncGameStreamRaw(::grpc::ClientContext* context, const ::GameStreamReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::GameStreamRes>::Create(channel_.get(), cq, rpcmethod_GameStream_, context, request, false, nullptr);
}

::grpc::Status PokerService::Stub::JoinGame(::grpc::ClientContext* context, const ::JoinGameReq& request, ::PlayerReqRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::JoinGameReq, ::PlayerReqRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_JoinGame_, context, request, response);
}

void PokerService::Stub::async::JoinGame(::grpc::ClientContext* context, const ::JoinGameReq* request, ::PlayerReqRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::JoinGameReq, ::PlayerReqRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JoinGame_, context, request, response, std::move(f));
}

void PokerService::Stub::async::JoinGame(::grpc::ClientContext* context, const ::JoinGameReq* request, ::PlayerReqRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JoinGame_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::PlayerReqRes>* PokerService::Stub::PrepareAsyncJoinGameRaw(::grpc::ClientContext* context, const ::JoinGameReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::PlayerReqRes, ::JoinGameReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_JoinGame_, context, request);
}

::grpc::ClientAsyncResponseReader< ::PlayerReqRes>* PokerService::Stub::AsyncJoinGameRaw(::grpc::ClientContext* context, const ::JoinGameReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncJoinGameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PokerService::Stub::LeaveGame(::grpc::ClientContext* context, const ::LeaveGameReq& request, ::PlayerReqRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::LeaveGameReq, ::PlayerReqRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LeaveGame_, context, request, response);
}

void PokerService::Stub::async::LeaveGame(::grpc::ClientContext* context, const ::LeaveGameReq* request, ::PlayerReqRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::LeaveGameReq, ::PlayerReqRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LeaveGame_, context, request, response, std::move(f));
}

void PokerService::Stub::async::LeaveGame(::grpc::ClientContext* context, const ::LeaveGameReq* request, ::PlayerReqRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LeaveGame_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::PlayerReqRes>* PokerService::Stub::PrepareAsyncLeaveGameRaw(::grpc::ClientContext* context, const ::LeaveGameReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::PlayerReqRes, ::LeaveGameReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LeaveGame_, context, request);
}

::grpc::ClientAsyncResponseReader< ::PlayerReqRes>* PokerService::Stub::AsyncLeaveGameRaw(::grpc::ClientContext* context, const ::LeaveGameReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLeaveGameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PokerService::Stub::PlayerAction(::grpc::ClientContext* context, const ::PlayerActionReq& request, ::PlayerReqRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PlayerActionReq, ::PlayerReqRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PlayerAction_, context, request, response);
}

void PokerService::Stub::async::PlayerAction(::grpc::ClientContext* context, const ::PlayerActionReq* request, ::PlayerReqRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PlayerActionReq, ::PlayerReqRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlayerAction_, context, request, response, std::move(f));
}

void PokerService::Stub::async::PlayerAction(::grpc::ClientContext* context, const ::PlayerActionReq* request, ::PlayerReqRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlayerAction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::PlayerReqRes>* PokerService::Stub::PrepareAsyncPlayerActionRaw(::grpc::ClientContext* context, const ::PlayerActionReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::PlayerReqRes, ::PlayerActionReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PlayerAction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::PlayerReqRes>* PokerService::Stub::AsyncPlayerActionRaw(::grpc::ClientContext* context, const ::PlayerActionReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPlayerActionRaw(context, request, cq);
  result->StartCall();
  return result;
}

PokerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PokerService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< PokerService::Service, ::GameStreamReq, ::GameStreamRes>(
          [](PokerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GameStreamReq* req,
             ::grpc::ServerWriter<::GameStreamRes>* writer) {
               return service->GameStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PokerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PokerService::Service, ::JoinGameReq, ::PlayerReqRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PokerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::JoinGameReq* req,
             ::PlayerReqRes* resp) {
               return service->JoinGame(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PokerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PokerService::Service, ::LeaveGameReq, ::PlayerReqRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PokerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::LeaveGameReq* req,
             ::PlayerReqRes* resp) {
               return service->LeaveGame(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PokerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PokerService::Service, ::PlayerActionReq, ::PlayerReqRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PokerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PlayerActionReq* req,
             ::PlayerReqRes* resp) {
               return service->PlayerAction(ctx, req, resp);
             }, this)));
}

PokerService::Service::~Service() {
}

::grpc::Status PokerService::Service::GameStream(::grpc::ServerContext* context, const ::GameStreamReq* request, ::grpc::ServerWriter< ::GameStreamRes>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PokerService::Service::JoinGame(::grpc::ServerContext* context, const ::JoinGameReq* request, ::PlayerReqRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PokerService::Service::LeaveGame(::grpc::ServerContext* context, const ::LeaveGameReq* request, ::PlayerReqRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PokerService::Service::PlayerAction(::grpc::ServerContext* context, const ::PlayerActionReq* request, ::PlayerReqRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


