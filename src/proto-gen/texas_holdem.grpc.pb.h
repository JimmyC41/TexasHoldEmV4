// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: texas_holdem.proto
#ifndef GRPC_texas_5fholdem_2eproto__INCLUDED
#define GRPC_texas_5fholdem_2eproto__INCLUDED

#include "texas_holdem.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

class PokerService final {
 public:
  static constexpr char const* service_full_name() {
    return "PokerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Server-to-client game state updates
    std::unique_ptr< ::grpc::ClientReaderInterface< ::GameStreamRes>> GameStream(::grpc::ClientContext* context, const ::GameStreamReq& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::GameStreamRes>>(GameStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GameStreamRes>> AsyncGameStream(::grpc::ClientContext* context, const ::GameStreamReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GameStreamRes>>(AsyncGameStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GameStreamRes>> PrepareAsyncGameStream(::grpc::ClientContext* context, const ::GameStreamReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GameStreamRes>>(PrepareAsyncGameStreamRaw(context, request, cq));
    }
    // Client-to-server unary calls
    virtual ::grpc::Status JoinGame(::grpc::ClientContext* context, const ::JoinGameReq& request, ::PlayerReqRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PlayerReqRes>> AsyncJoinGame(::grpc::ClientContext* context, const ::JoinGameReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PlayerReqRes>>(AsyncJoinGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PlayerReqRes>> PrepareAsyncJoinGame(::grpc::ClientContext* context, const ::JoinGameReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PlayerReqRes>>(PrepareAsyncJoinGameRaw(context, request, cq));
    }
    virtual ::grpc::Status LeaveGame(::grpc::ClientContext* context, const ::LeaveGameReq& request, ::PlayerReqRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PlayerReqRes>> AsyncLeaveGame(::grpc::ClientContext* context, const ::LeaveGameReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PlayerReqRes>>(AsyncLeaveGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PlayerReqRes>> PrepareAsyncLeaveGame(::grpc::ClientContext* context, const ::LeaveGameReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PlayerReqRes>>(PrepareAsyncLeaveGameRaw(context, request, cq));
    }
    virtual ::grpc::Status PlayerAction(::grpc::ClientContext* context, const ::PlayerActionReq& request, ::PlayerReqRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PlayerReqRes>> AsyncPlayerAction(::grpc::ClientContext* context, const ::PlayerActionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PlayerReqRes>>(AsyncPlayerActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PlayerReqRes>> PrepareAsyncPlayerAction(::grpc::ClientContext* context, const ::PlayerActionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PlayerReqRes>>(PrepareAsyncPlayerActionRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Server-to-client game state updates
      virtual void GameStream(::grpc::ClientContext* context, const ::GameStreamReq* request, ::grpc::ClientReadReactor< ::GameStreamRes>* reactor) = 0;
      // Client-to-server unary calls
      virtual void JoinGame(::grpc::ClientContext* context, const ::JoinGameReq* request, ::PlayerReqRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void JoinGame(::grpc::ClientContext* context, const ::JoinGameReq* request, ::PlayerReqRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void LeaveGame(::grpc::ClientContext* context, const ::LeaveGameReq* request, ::PlayerReqRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LeaveGame(::grpc::ClientContext* context, const ::LeaveGameReq* request, ::PlayerReqRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PlayerAction(::grpc::ClientContext* context, const ::PlayerActionReq* request, ::PlayerReqRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PlayerAction(::grpc::ClientContext* context, const ::PlayerActionReq* request, ::PlayerReqRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::GameStreamRes>* GameStreamRaw(::grpc::ClientContext* context, const ::GameStreamReq& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::GameStreamRes>* AsyncGameStreamRaw(::grpc::ClientContext* context, const ::GameStreamReq& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::GameStreamRes>* PrepareAsyncGameStreamRaw(::grpc::ClientContext* context, const ::GameStreamReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::PlayerReqRes>* AsyncJoinGameRaw(::grpc::ClientContext* context, const ::JoinGameReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::PlayerReqRes>* PrepareAsyncJoinGameRaw(::grpc::ClientContext* context, const ::JoinGameReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::PlayerReqRes>* AsyncLeaveGameRaw(::grpc::ClientContext* context, const ::LeaveGameReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::PlayerReqRes>* PrepareAsyncLeaveGameRaw(::grpc::ClientContext* context, const ::LeaveGameReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::PlayerReqRes>* AsyncPlayerActionRaw(::grpc::ClientContext* context, const ::PlayerActionReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::PlayerReqRes>* PrepareAsyncPlayerActionRaw(::grpc::ClientContext* context, const ::PlayerActionReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::GameStreamRes>> GameStream(::grpc::ClientContext* context, const ::GameStreamReq& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::GameStreamRes>>(GameStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::GameStreamRes>> AsyncGameStream(::grpc::ClientContext* context, const ::GameStreamReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::GameStreamRes>>(AsyncGameStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::GameStreamRes>> PrepareAsyncGameStream(::grpc::ClientContext* context, const ::GameStreamReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::GameStreamRes>>(PrepareAsyncGameStreamRaw(context, request, cq));
    }
    ::grpc::Status JoinGame(::grpc::ClientContext* context, const ::JoinGameReq& request, ::PlayerReqRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PlayerReqRes>> AsyncJoinGame(::grpc::ClientContext* context, const ::JoinGameReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PlayerReqRes>>(AsyncJoinGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PlayerReqRes>> PrepareAsyncJoinGame(::grpc::ClientContext* context, const ::JoinGameReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PlayerReqRes>>(PrepareAsyncJoinGameRaw(context, request, cq));
    }
    ::grpc::Status LeaveGame(::grpc::ClientContext* context, const ::LeaveGameReq& request, ::PlayerReqRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PlayerReqRes>> AsyncLeaveGame(::grpc::ClientContext* context, const ::LeaveGameReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PlayerReqRes>>(AsyncLeaveGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PlayerReqRes>> PrepareAsyncLeaveGame(::grpc::ClientContext* context, const ::LeaveGameReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PlayerReqRes>>(PrepareAsyncLeaveGameRaw(context, request, cq));
    }
    ::grpc::Status PlayerAction(::grpc::ClientContext* context, const ::PlayerActionReq& request, ::PlayerReqRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PlayerReqRes>> AsyncPlayerAction(::grpc::ClientContext* context, const ::PlayerActionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PlayerReqRes>>(AsyncPlayerActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PlayerReqRes>> PrepareAsyncPlayerAction(::grpc::ClientContext* context, const ::PlayerActionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PlayerReqRes>>(PrepareAsyncPlayerActionRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GameStream(::grpc::ClientContext* context, const ::GameStreamReq* request, ::grpc::ClientReadReactor< ::GameStreamRes>* reactor) override;
      void JoinGame(::grpc::ClientContext* context, const ::JoinGameReq* request, ::PlayerReqRes* response, std::function<void(::grpc::Status)>) override;
      void JoinGame(::grpc::ClientContext* context, const ::JoinGameReq* request, ::PlayerReqRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LeaveGame(::grpc::ClientContext* context, const ::LeaveGameReq* request, ::PlayerReqRes* response, std::function<void(::grpc::Status)>) override;
      void LeaveGame(::grpc::ClientContext* context, const ::LeaveGameReq* request, ::PlayerReqRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PlayerAction(::grpc::ClientContext* context, const ::PlayerActionReq* request, ::PlayerReqRes* response, std::function<void(::grpc::Status)>) override;
      void PlayerAction(::grpc::ClientContext* context, const ::PlayerActionReq* request, ::PlayerReqRes* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::GameStreamRes>* GameStreamRaw(::grpc::ClientContext* context, const ::GameStreamReq& request) override;
    ::grpc::ClientAsyncReader< ::GameStreamRes>* AsyncGameStreamRaw(::grpc::ClientContext* context, const ::GameStreamReq& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::GameStreamRes>* PrepareAsyncGameStreamRaw(::grpc::ClientContext* context, const ::GameStreamReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::PlayerReqRes>* AsyncJoinGameRaw(::grpc::ClientContext* context, const ::JoinGameReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::PlayerReqRes>* PrepareAsyncJoinGameRaw(::grpc::ClientContext* context, const ::JoinGameReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::PlayerReqRes>* AsyncLeaveGameRaw(::grpc::ClientContext* context, const ::LeaveGameReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::PlayerReqRes>* PrepareAsyncLeaveGameRaw(::grpc::ClientContext* context, const ::LeaveGameReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::PlayerReqRes>* AsyncPlayerActionRaw(::grpc::ClientContext* context, const ::PlayerActionReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::PlayerReqRes>* PrepareAsyncPlayerActionRaw(::grpc::ClientContext* context, const ::PlayerActionReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GameStream_;
    const ::grpc::internal::RpcMethod rpcmethod_JoinGame_;
    const ::grpc::internal::RpcMethod rpcmethod_LeaveGame_;
    const ::grpc::internal::RpcMethod rpcmethod_PlayerAction_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Server-to-client game state updates
    virtual ::grpc::Status GameStream(::grpc::ServerContext* context, const ::GameStreamReq* request, ::grpc::ServerWriter< ::GameStreamRes>* writer);
    // Client-to-server unary calls
    virtual ::grpc::Status JoinGame(::grpc::ServerContext* context, const ::JoinGameReq* request, ::PlayerReqRes* response);
    virtual ::grpc::Status LeaveGame(::grpc::ServerContext* context, const ::LeaveGameReq* request, ::PlayerReqRes* response);
    virtual ::grpc::Status PlayerAction(::grpc::ServerContext* context, const ::PlayerActionReq* request, ::PlayerReqRes* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GameStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GameStream() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GameStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GameStream(::grpc::ServerContext* /*context*/, const ::GameStreamReq* /*request*/, ::grpc::ServerWriter< ::GameStreamRes>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGameStream(::grpc::ServerContext* context, ::GameStreamReq* request, ::grpc::ServerAsyncWriter< ::GameStreamRes>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_JoinGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_JoinGame() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_JoinGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinGame(::grpc::ServerContext* /*context*/, const ::JoinGameReq* /*request*/, ::PlayerReqRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestJoinGame(::grpc::ServerContext* context, ::JoinGameReq* request, ::grpc::ServerAsyncResponseWriter< ::PlayerReqRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LeaveGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LeaveGame() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_LeaveGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveGame(::grpc::ServerContext* /*context*/, const ::LeaveGameReq* /*request*/, ::PlayerReqRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLeaveGame(::grpc::ServerContext* context, ::LeaveGameReq* request, ::grpc::ServerAsyncResponseWriter< ::PlayerReqRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PlayerAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PlayerAction() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_PlayerAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayerAction(::grpc::ServerContext* /*context*/, const ::PlayerActionReq* /*request*/, ::PlayerReqRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPlayerAction(::grpc::ServerContext* context, ::PlayerActionReq* request, ::grpc::ServerAsyncResponseWriter< ::PlayerReqRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GameStream<WithAsyncMethod_JoinGame<WithAsyncMethod_LeaveGame<WithAsyncMethod_PlayerAction<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GameStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GameStream() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::GameStreamReq, ::GameStreamRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GameStreamReq* request) { return this->GameStream(context, request); }));
    }
    ~WithCallbackMethod_GameStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GameStream(::grpc::ServerContext* /*context*/, const ::GameStreamReq* /*request*/, ::grpc::ServerWriter< ::GameStreamRes>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::GameStreamRes>* GameStream(
      ::grpc::CallbackServerContext* /*context*/, const ::GameStreamReq* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_JoinGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_JoinGame() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::JoinGameReq, ::PlayerReqRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::JoinGameReq* request, ::PlayerReqRes* response) { return this->JoinGame(context, request, response); }));}
    void SetMessageAllocatorFor_JoinGame(
        ::grpc::MessageAllocator< ::JoinGameReq, ::PlayerReqRes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::JoinGameReq, ::PlayerReqRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_JoinGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinGame(::grpc::ServerContext* /*context*/, const ::JoinGameReq* /*request*/, ::PlayerReqRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* JoinGame(
      ::grpc::CallbackServerContext* /*context*/, const ::JoinGameReq* /*request*/, ::PlayerReqRes* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LeaveGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LeaveGame() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::LeaveGameReq, ::PlayerReqRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::LeaveGameReq* request, ::PlayerReqRes* response) { return this->LeaveGame(context, request, response); }));}
    void SetMessageAllocatorFor_LeaveGame(
        ::grpc::MessageAllocator< ::LeaveGameReq, ::PlayerReqRes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::LeaveGameReq, ::PlayerReqRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LeaveGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveGame(::grpc::ServerContext* /*context*/, const ::LeaveGameReq* /*request*/, ::PlayerReqRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LeaveGame(
      ::grpc::CallbackServerContext* /*context*/, const ::LeaveGameReq* /*request*/, ::PlayerReqRes* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PlayerAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PlayerAction() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::PlayerActionReq, ::PlayerReqRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::PlayerActionReq* request, ::PlayerReqRes* response) { return this->PlayerAction(context, request, response); }));}
    void SetMessageAllocatorFor_PlayerAction(
        ::grpc::MessageAllocator< ::PlayerActionReq, ::PlayerReqRes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::PlayerActionReq, ::PlayerReqRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PlayerAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayerAction(::grpc::ServerContext* /*context*/, const ::PlayerActionReq* /*request*/, ::PlayerReqRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PlayerAction(
      ::grpc::CallbackServerContext* /*context*/, const ::PlayerActionReq* /*request*/, ::PlayerReqRes* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GameStream<WithCallbackMethod_JoinGame<WithCallbackMethod_LeaveGame<WithCallbackMethod_PlayerAction<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GameStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GameStream() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GameStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GameStream(::grpc::ServerContext* /*context*/, const ::GameStreamReq* /*request*/, ::grpc::ServerWriter< ::GameStreamRes>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_JoinGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_JoinGame() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_JoinGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinGame(::grpc::ServerContext* /*context*/, const ::JoinGameReq* /*request*/, ::PlayerReqRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LeaveGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LeaveGame() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_LeaveGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveGame(::grpc::ServerContext* /*context*/, const ::LeaveGameReq* /*request*/, ::PlayerReqRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PlayerAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PlayerAction() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_PlayerAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayerAction(::grpc::ServerContext* /*context*/, const ::PlayerActionReq* /*request*/, ::PlayerReqRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GameStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GameStream() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GameStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GameStream(::grpc::ServerContext* /*context*/, const ::GameStreamReq* /*request*/, ::grpc::ServerWriter< ::GameStreamRes>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGameStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_JoinGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_JoinGame() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_JoinGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinGame(::grpc::ServerContext* /*context*/, const ::JoinGameReq* /*request*/, ::PlayerReqRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestJoinGame(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LeaveGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LeaveGame() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_LeaveGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveGame(::grpc::ServerContext* /*context*/, const ::LeaveGameReq* /*request*/, ::PlayerReqRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLeaveGame(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PlayerAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PlayerAction() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_PlayerAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayerAction(::grpc::ServerContext* /*context*/, const ::PlayerActionReq* /*request*/, ::PlayerReqRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPlayerAction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GameStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GameStream() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GameStream(context, request); }));
    }
    ~WithRawCallbackMethod_GameStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GameStream(::grpc::ServerContext* /*context*/, const ::GameStreamReq* /*request*/, ::grpc::ServerWriter< ::GameStreamRes>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GameStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_JoinGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_JoinGame() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->JoinGame(context, request, response); }));
    }
    ~WithRawCallbackMethod_JoinGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinGame(::grpc::ServerContext* /*context*/, const ::JoinGameReq* /*request*/, ::PlayerReqRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* JoinGame(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LeaveGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LeaveGame() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LeaveGame(context, request, response); }));
    }
    ~WithRawCallbackMethod_LeaveGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveGame(::grpc::ServerContext* /*context*/, const ::LeaveGameReq* /*request*/, ::PlayerReqRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LeaveGame(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PlayerAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PlayerAction() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PlayerAction(context, request, response); }));
    }
    ~WithRawCallbackMethod_PlayerAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayerAction(::grpc::ServerContext* /*context*/, const ::PlayerActionReq* /*request*/, ::PlayerReqRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PlayerAction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_JoinGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_JoinGame() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::JoinGameReq, ::PlayerReqRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::JoinGameReq, ::PlayerReqRes>* streamer) {
                       return this->StreamedJoinGame(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_JoinGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status JoinGame(::grpc::ServerContext* /*context*/, const ::JoinGameReq* /*request*/, ::PlayerReqRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedJoinGame(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::JoinGameReq,::PlayerReqRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LeaveGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LeaveGame() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::LeaveGameReq, ::PlayerReqRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::LeaveGameReq, ::PlayerReqRes>* streamer) {
                       return this->StreamedLeaveGame(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LeaveGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LeaveGame(::grpc::ServerContext* /*context*/, const ::LeaveGameReq* /*request*/, ::PlayerReqRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLeaveGame(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::LeaveGameReq,::PlayerReqRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PlayerAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PlayerAction() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::PlayerActionReq, ::PlayerReqRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::PlayerActionReq, ::PlayerReqRes>* streamer) {
                       return this->StreamedPlayerAction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PlayerAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PlayerAction(::grpc::ServerContext* /*context*/, const ::PlayerActionReq* /*request*/, ::PlayerReqRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPlayerAction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::PlayerActionReq,::PlayerReqRes>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_JoinGame<WithStreamedUnaryMethod_LeaveGame<WithStreamedUnaryMethod_PlayerAction<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GameStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GameStream() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::GameStreamReq, ::GameStreamRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::GameStreamReq, ::GameStreamRes>* streamer) {
                       return this->StreamedGameStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GameStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GameStream(::grpc::ServerContext* /*context*/, const ::GameStreamReq* /*request*/, ::grpc::ServerWriter< ::GameStreamRes>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGameStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::GameStreamReq,::GameStreamRes>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GameStream<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_GameStream<WithStreamedUnaryMethod_JoinGame<WithStreamedUnaryMethod_LeaveGame<WithStreamedUnaryMethod_PlayerAction<Service > > > > StreamedService;
};


#endif  // GRPC_texas_5fholdem_2eproto__INCLUDED
