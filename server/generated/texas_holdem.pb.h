// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: texas_holdem.proto
// Protobuf C++ Version: 5.27.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_texas_5fholdem_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_texas_5fholdem_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_texas_5fholdem_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_texas_5fholdem_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_texas_5fholdem_2eproto;
class DealBoardEvent;
struct DealBoardEventDefaultTypeInternal;
extern DealBoardEventDefaultTypeInternal _DealBoardEvent_default_instance_;
class DealPlayersEvent;
struct DealPlayersEventDefaultTypeInternal;
extern DealPlayersEventDefaultTypeInternal _DealPlayersEvent_default_instance_;
class GameStreamReq;
struct GameStreamReqDefaultTypeInternal;
extern GameStreamReqDefaultTypeInternal _GameStreamReq_default_instance_;
class GameStreamRes;
struct GameStreamResDefaultTypeInternal;
extern GameStreamResDefaultTypeInternal _GameStreamRes_default_instance_;
class JoinGameReq;
struct JoinGameReqDefaultTypeInternal;
extern JoinGameReqDefaultTypeInternal _JoinGameReq_default_instance_;
class LeaveGameReq;
struct LeaveGameReqDefaultTypeInternal;
extern LeaveGameReqDefaultTypeInternal _LeaveGameReq_default_instance_;
class NewPlayerActionEvent;
struct NewPlayerActionEventDefaultTypeInternal;
extern NewPlayerActionEventDefaultTypeInternal _NewPlayerActionEvent_default_instance_;
class NewPlayerToActEvent;
struct NewPlayerToActEventDefaultTypeInternal;
extern NewPlayerToActEventDefaultTypeInternal _NewPlayerToActEvent_default_instance_;
class NewStreetEvent;
struct NewStreetEventDefaultTypeInternal;
extern NewStreetEventDefaultTypeInternal _NewStreetEvent_default_instance_;
class PlayerActionInfo;
struct PlayerActionInfoDefaultTypeInternal;
extern PlayerActionInfoDefaultTypeInternal _PlayerActionInfo_default_instance_;
class PlayerActionInfo_ProtoAction;
struct PlayerActionInfo_ProtoActionDefaultTypeInternal;
extern PlayerActionInfo_ProtoActionDefaultTypeInternal _PlayerActionInfo_ProtoAction_default_instance_;
class PlayerActionReq;
struct PlayerActionReqDefaultTypeInternal;
extern PlayerActionReqDefaultTypeInternal _PlayerActionReq_default_instance_;
class PlayerCard;
struct PlayerCardDefaultTypeInternal;
extern PlayerCardDefaultTypeInternal _PlayerCard_default_instance_;
class PlayerReqRes;
struct PlayerReqResDefaultTypeInternal;
extern PlayerReqResDefaultTypeInternal _PlayerReqRes_default_instance_;
class PlayerToActInfo;
struct PlayerToActInfoDefaultTypeInternal;
extern PlayerToActInfoDefaultTypeInternal _PlayerToActInfo_default_instance_;
class PlayerToActInfo_ProtoPossibleAction;
struct PlayerToActInfo_ProtoPossibleActionDefaultTypeInternal;
extern PlayerToActInfo_ProtoPossibleActionDefaultTypeInternal _PlayerToActInfo_ProtoPossibleAction_default_instance_;
class PlayersUpdateEvent;
struct PlayersUpdateEventDefaultTypeInternal;
extern PlayersUpdateEventDefaultTypeInternal _PlayersUpdateEvent_default_instance_;
class PotUpdateEvent;
struct PotUpdateEventDefaultTypeInternal;
extern PotUpdateEventDefaultTypeInternal _PotUpdateEvent_default_instance_;
class PotWinner;
struct PotWinnerDefaultTypeInternal;
extern PotWinnerDefaultTypeInternal _PotWinner_default_instance_;
class PotWinnerEvent;
struct PotWinnerEventDefaultTypeInternal;
extern PotWinnerEventDefaultTypeInternal _PotWinnerEvent_default_instance_;
class ProtoCard;
struct ProtoCardDefaultTypeInternal;
extern ProtoCardDefaultTypeInternal _ProtoCard_default_instance_;
class ProtoPlayer;
struct ProtoPlayerDefaultTypeInternal;
extern ProtoPlayerDefaultTypeInternal _ProtoPlayer_default_instance_;
class ProtoPot;
struct ProtoPotDefaultTypeInternal;
extern ProtoPotDefaultTypeInternal _ProtoPot_default_instance_;
class ShowdownEvent;
struct ShowdownEventDefaultTypeInternal;
extern ShowdownEventDefaultTypeInternal _ShowdownEvent_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum ProtoCard_ProtoSuit : int {
  ProtoCard_ProtoSuit_SUIT_UNSPECIFIED = 0,
  ProtoCard_ProtoSuit_HEARTS = 1,
  ProtoCard_ProtoSuit_DIAMONDS = 2,
  ProtoCard_ProtoSuit_CLUBS = 3,
  ProtoCard_ProtoSuit_SPADES = 4,
  ProtoCard_ProtoSuit_ProtoCard_ProtoSuit_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ProtoCard_ProtoSuit_ProtoCard_ProtoSuit_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ProtoCard_ProtoSuit_IsValid(int value);
extern const uint32_t ProtoCard_ProtoSuit_internal_data_[];
constexpr ProtoCard_ProtoSuit ProtoCard_ProtoSuit_ProtoSuit_MIN = static_cast<ProtoCard_ProtoSuit>(0);
constexpr ProtoCard_ProtoSuit ProtoCard_ProtoSuit_ProtoSuit_MAX = static_cast<ProtoCard_ProtoSuit>(4);
constexpr int ProtoCard_ProtoSuit_ProtoSuit_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
ProtoCard_ProtoSuit_descriptor();
template <typename T>
const std::string& ProtoCard_ProtoSuit_Name(T value) {
  static_assert(std::is_same<T, ProtoCard_ProtoSuit>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ProtoSuit_Name().");
  return ProtoCard_ProtoSuit_Name(static_cast<ProtoCard_ProtoSuit>(value));
}
template <>
inline const std::string& ProtoCard_ProtoSuit_Name(ProtoCard_ProtoSuit value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ProtoCard_ProtoSuit_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool ProtoCard_ProtoSuit_Parse(absl::string_view name, ProtoCard_ProtoSuit* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtoCard_ProtoSuit>(
      ProtoCard_ProtoSuit_descriptor(), name, value);
}
enum ProtoCard_ProtoValue : int {
  ProtoCard_ProtoValue_VALUE_UNSPECIFIED = 0,
  ProtoCard_ProtoValue_TWO = 2,
  ProtoCard_ProtoValue_THREE = 3,
  ProtoCard_ProtoValue_FOUR = 4,
  ProtoCard_ProtoValue_FIVE = 5,
  ProtoCard_ProtoValue_SIX = 6,
  ProtoCard_ProtoValue_SEVEN = 7,
  ProtoCard_ProtoValue_EIGHT = 8,
  ProtoCard_ProtoValue_NINE = 9,
  ProtoCard_ProtoValue_TEN = 10,
  ProtoCard_ProtoValue_JACK = 11,
  ProtoCard_ProtoValue_QUEEN = 12,
  ProtoCard_ProtoValue_KING = 13,
  ProtoCard_ProtoValue_ACE = 14,
  ProtoCard_ProtoValue_ProtoCard_ProtoValue_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ProtoCard_ProtoValue_ProtoCard_ProtoValue_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ProtoCard_ProtoValue_IsValid(int value);
extern const uint32_t ProtoCard_ProtoValue_internal_data_[];
constexpr ProtoCard_ProtoValue ProtoCard_ProtoValue_ProtoValue_MIN = static_cast<ProtoCard_ProtoValue>(0);
constexpr ProtoCard_ProtoValue ProtoCard_ProtoValue_ProtoValue_MAX = static_cast<ProtoCard_ProtoValue>(14);
constexpr int ProtoCard_ProtoValue_ProtoValue_ARRAYSIZE = 14 + 1;
const ::google::protobuf::EnumDescriptor*
ProtoCard_ProtoValue_descriptor();
template <typename T>
const std::string& ProtoCard_ProtoValue_Name(T value) {
  static_assert(std::is_same<T, ProtoCard_ProtoValue>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ProtoValue_Name().");
  return ProtoCard_ProtoValue_Name(static_cast<ProtoCard_ProtoValue>(value));
}
template <>
inline const std::string& ProtoCard_ProtoValue_Name(ProtoCard_ProtoValue value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ProtoCard_ProtoValue_descriptor,
                                                 0, 14>(
      static_cast<int>(value));
}
inline bool ProtoCard_ProtoValue_Parse(absl::string_view name, ProtoCard_ProtoValue* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtoCard_ProtoValue>(
      ProtoCard_ProtoValue_descriptor(), name, value);
}
enum ProtoPlayer_ProtoPosition : int {
  ProtoPlayer_ProtoPosition_LOBBY = 0,
  ProtoPlayer_ProtoPosition_SMALL_BLIND = 1,
  ProtoPlayer_ProtoPosition_BIG_BLIND = 2,
  ProtoPlayer_ProtoPosition_UTG = 3,
  ProtoPlayer_ProtoPosition_UTG_1 = 4,
  ProtoPlayer_ProtoPosition_MIDDLE = 5,
  ProtoPlayer_ProtoPosition_LOJACK = 6,
  ProtoPlayer_ProtoPosition_HIJACK = 7,
  ProtoPlayer_ProtoPosition_CUT_OFF = 8,
  ProtoPlayer_ProtoPosition_DEALER = 9,
  ProtoPlayer_ProtoPosition_ProtoPlayer_ProtoPosition_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ProtoPlayer_ProtoPosition_ProtoPlayer_ProtoPosition_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ProtoPlayer_ProtoPosition_IsValid(int value);
extern const uint32_t ProtoPlayer_ProtoPosition_internal_data_[];
constexpr ProtoPlayer_ProtoPosition ProtoPlayer_ProtoPosition_ProtoPosition_MIN = static_cast<ProtoPlayer_ProtoPosition>(0);
constexpr ProtoPlayer_ProtoPosition ProtoPlayer_ProtoPosition_ProtoPosition_MAX = static_cast<ProtoPlayer_ProtoPosition>(9);
constexpr int ProtoPlayer_ProtoPosition_ProtoPosition_ARRAYSIZE = 9 + 1;
const ::google::protobuf::EnumDescriptor*
ProtoPlayer_ProtoPosition_descriptor();
template <typename T>
const std::string& ProtoPlayer_ProtoPosition_Name(T value) {
  static_assert(std::is_same<T, ProtoPlayer_ProtoPosition>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ProtoPosition_Name().");
  return ProtoPlayer_ProtoPosition_Name(static_cast<ProtoPlayer_ProtoPosition>(value));
}
template <>
inline const std::string& ProtoPlayer_ProtoPosition_Name(ProtoPlayer_ProtoPosition value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ProtoPlayer_ProtoPosition_descriptor,
                                                 0, 9>(
      static_cast<int>(value));
}
inline bool ProtoPlayer_ProtoPosition_Parse(absl::string_view name, ProtoPlayer_ProtoPosition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtoPlayer_ProtoPosition>(
      ProtoPlayer_ProtoPosition_descriptor(), name, value);
}
enum ProtoPlayer_ProtoPlayerStatus : int {
  ProtoPlayer_ProtoPlayerStatus_WAITING = 0,
  ProtoPlayer_ProtoPlayerStatus_IN_HAND = 1,
  ProtoPlayer_ProtoPlayerStatus_FOLDED = 2,
  ProtoPlayer_ProtoPlayerStatus_ALL_IN_BET = 3,
  ProtoPlayer_ProtoPlayerStatus_ALL_IN_CALL = 4,
  ProtoPlayer_ProtoPlayerStatus_ProtoPlayer_ProtoPlayerStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ProtoPlayer_ProtoPlayerStatus_ProtoPlayer_ProtoPlayerStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ProtoPlayer_ProtoPlayerStatus_IsValid(int value);
extern const uint32_t ProtoPlayer_ProtoPlayerStatus_internal_data_[];
constexpr ProtoPlayer_ProtoPlayerStatus ProtoPlayer_ProtoPlayerStatus_ProtoPlayerStatus_MIN = static_cast<ProtoPlayer_ProtoPlayerStatus>(0);
constexpr ProtoPlayer_ProtoPlayerStatus ProtoPlayer_ProtoPlayerStatus_ProtoPlayerStatus_MAX = static_cast<ProtoPlayer_ProtoPlayerStatus>(4);
constexpr int ProtoPlayer_ProtoPlayerStatus_ProtoPlayerStatus_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
ProtoPlayer_ProtoPlayerStatus_descriptor();
template <typename T>
const std::string& ProtoPlayer_ProtoPlayerStatus_Name(T value) {
  static_assert(std::is_same<T, ProtoPlayer_ProtoPlayerStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ProtoPlayerStatus_Name().");
  return ProtoPlayer_ProtoPlayerStatus_Name(static_cast<ProtoPlayer_ProtoPlayerStatus>(value));
}
template <>
inline const std::string& ProtoPlayer_ProtoPlayerStatus_Name(ProtoPlayer_ProtoPlayerStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ProtoPlayer_ProtoPlayerStatus_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool ProtoPlayer_ProtoPlayerStatus_Parse(absl::string_view name, ProtoPlayer_ProtoPlayerStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtoPlayer_ProtoPlayerStatus>(
      ProtoPlayer_ProtoPlayerStatus_descriptor(), name, value);
}
enum ProtoStreet : int {
  STREET_UNSPECIFIED = 0,
  PRE_FLOP = 1,
  FLOP = 2,
  TURN = 3,
  RIVER = 4,
  ProtoStreet_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ProtoStreet_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ProtoStreet_IsValid(int value);
extern const uint32_t ProtoStreet_internal_data_[];
constexpr ProtoStreet ProtoStreet_MIN = static_cast<ProtoStreet>(0);
constexpr ProtoStreet ProtoStreet_MAX = static_cast<ProtoStreet>(4);
constexpr int ProtoStreet_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
ProtoStreet_descriptor();
template <typename T>
const std::string& ProtoStreet_Name(T value) {
  static_assert(std::is_same<T, ProtoStreet>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ProtoStreet_Name().");
  return ProtoStreet_Name(static_cast<ProtoStreet>(value));
}
template <>
inline const std::string& ProtoStreet_Name(ProtoStreet value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ProtoStreet_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool ProtoStreet_Parse(absl::string_view name, ProtoStreet* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtoStreet>(
      ProtoStreet_descriptor(), name, value);
}
enum ProtoActionType : int {
  ACTION_UNSPECIFIED = 0,
  POST_SMALL = 1,
  POST_BIG = 2,
  CHECK = 3,
  BET = 4,
  CALL = 5,
  RAISE = 6,
  FOLD = 7,
  ALL_IN_BET = 8,
  ALL_IN_CALL = 9,
  ALL_IN_RAISE = 10,
  ProtoActionType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ProtoActionType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ProtoActionType_IsValid(int value);
extern const uint32_t ProtoActionType_internal_data_[];
constexpr ProtoActionType ProtoActionType_MIN = static_cast<ProtoActionType>(0);
constexpr ProtoActionType ProtoActionType_MAX = static_cast<ProtoActionType>(10);
constexpr int ProtoActionType_ARRAYSIZE = 10 + 1;
const ::google::protobuf::EnumDescriptor*
ProtoActionType_descriptor();
template <typename T>
const std::string& ProtoActionType_Name(T value) {
  static_assert(std::is_same<T, ProtoActionType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ProtoActionType_Name().");
  return ProtoActionType_Name(static_cast<ProtoActionType>(value));
}
template <>
inline const std::string& ProtoActionType_Name(ProtoActionType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ProtoActionType_descriptor,
                                                 0, 10>(
      static_cast<int>(value));
}
inline bool ProtoActionType_Parse(absl::string_view name, ProtoActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtoActionType>(
      ProtoActionType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ShowdownEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ShowdownEvent) */ {
 public:
  inline ShowdownEvent() : ShowdownEvent(nullptr) {}
  ~ShowdownEvent() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ShowdownEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline ShowdownEvent(const ShowdownEvent& from) : ShowdownEvent(nullptr, from) {}
  inline ShowdownEvent(ShowdownEvent&& from) noexcept
      : ShowdownEvent(nullptr, std::move(from)) {}
  inline ShowdownEvent& operator=(const ShowdownEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowdownEvent& operator=(ShowdownEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShowdownEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShowdownEvent* internal_default_instance() {
    return reinterpret_cast<const ShowdownEvent*>(
        &_ShowdownEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(ShowdownEvent& a, ShowdownEvent& b) { a.Swap(&b); }
  inline void Swap(ShowdownEvent* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowdownEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShowdownEvent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ShowdownEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ShowdownEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ShowdownEvent& from) { ShowdownEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ShowdownEvent* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "ShowdownEvent"; }

 protected:
  explicit ShowdownEvent(::google::protobuf::Arena* arena);
  ShowdownEvent(::google::protobuf::Arena* arena, const ShowdownEvent& from);
  ShowdownEvent(::google::protobuf::Arena* arena, ShowdownEvent&& from) noexcept
      : ShowdownEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPlayersInHandFieldNumber = 1,
  };
  // repeated string players_in_hand = 1;
  int players_in_hand_size() const;
  private:
  int _internal_players_in_hand_size() const;

  public:
  void clear_players_in_hand() ;
  const std::string& players_in_hand(int index) const;
  std::string* mutable_players_in_hand(int index);
  void set_players_in_hand(int index, const std::string& value);
  void set_players_in_hand(int index, std::string&& value);
  void set_players_in_hand(int index, const char* value);
  void set_players_in_hand(int index, const char* value, std::size_t size);
  void set_players_in_hand(int index, absl::string_view value);
  std::string* add_players_in_hand();
  void add_players_in_hand(const std::string& value);
  void add_players_in_hand(std::string&& value);
  void add_players_in_hand(const char* value);
  void add_players_in_hand(const char* value, std::size_t size);
  void add_players_in_hand(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& players_in_hand() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_players_in_hand();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_players_in_hand() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_players_in_hand();

  public:
  // @@protoc_insertion_point(class_scope:ShowdownEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      37, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ShowdownEvent_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ShowdownEvent& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> players_in_hand_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texas_5fholdem_2eproto;
};
// -------------------------------------------------------------------

class ProtoPot final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ProtoPot) */ {
 public:
  inline ProtoPot() : ProtoPot(nullptr) {}
  ~ProtoPot() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ProtoPot(
      ::google::protobuf::internal::ConstantInitialized);

  inline ProtoPot(const ProtoPot& from) : ProtoPot(nullptr, from) {}
  inline ProtoPot(ProtoPot&& from) noexcept
      : ProtoPot(nullptr, std::move(from)) {}
  inline ProtoPot& operator=(const ProtoPot& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoPot& operator=(ProtoPot&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtoPot& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoPot* internal_default_instance() {
    return reinterpret_cast<const ProtoPot*>(
        &_ProtoPot_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(ProtoPot& a, ProtoPot& b) { a.Swap(&b); }
  inline void Swap(ProtoPot* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoPot* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtoPot* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ProtoPot>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProtoPot& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ProtoPot& from) { ProtoPot::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ProtoPot* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "ProtoPot"; }

 protected:
  explicit ProtoPot(::google::protobuf::Arena* arena);
  ProtoPot(::google::protobuf::Arena* arena, const ProtoPot& from);
  ProtoPot(::google::protobuf::Arena* arena, ProtoPot&& from) noexcept
      : ProtoPot(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEligibleIdsFieldNumber = 2,
    kPotChipsFieldNumber = 1,
  };
  // repeated string eligible_ids = 2;
  int eligible_ids_size() const;
  private:
  int _internal_eligible_ids_size() const;

  public:
  void clear_eligible_ids() ;
  const std::string& eligible_ids(int index) const;
  std::string* mutable_eligible_ids(int index);
  void set_eligible_ids(int index, const std::string& value);
  void set_eligible_ids(int index, std::string&& value);
  void set_eligible_ids(int index, const char* value);
  void set_eligible_ids(int index, const char* value, std::size_t size);
  void set_eligible_ids(int index, absl::string_view value);
  std::string* add_eligible_ids();
  void add_eligible_ids(const std::string& value);
  void add_eligible_ids(std::string&& value);
  void add_eligible_ids(const char* value);
  void add_eligible_ids(const char* value, std::size_t size);
  void add_eligible_ids(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& eligible_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_eligible_ids();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_eligible_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_eligible_ids();

  public:
  // uint32 pot_chips = 1;
  void clear_pot_chips() ;
  ::uint32_t pot_chips() const;
  void set_pot_chips(::uint32_t value);

  private:
  ::uint32_t _internal_pot_chips() const;
  void _internal_set_pot_chips(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ProtoPot)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      29, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ProtoPot_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ProtoPot& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> eligible_ids_;
    ::uint32_t pot_chips_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texas_5fholdem_2eproto;
};
// -------------------------------------------------------------------

class ProtoPlayer final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ProtoPlayer) */ {
 public:
  inline ProtoPlayer() : ProtoPlayer(nullptr) {}
  ~ProtoPlayer() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ProtoPlayer(
      ::google::protobuf::internal::ConstantInitialized);

  inline ProtoPlayer(const ProtoPlayer& from) : ProtoPlayer(nullptr, from) {}
  inline ProtoPlayer(ProtoPlayer&& from) noexcept
      : ProtoPlayer(nullptr, std::move(from)) {}
  inline ProtoPlayer& operator=(const ProtoPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoPlayer& operator=(ProtoPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtoPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoPlayer* internal_default_instance() {
    return reinterpret_cast<const ProtoPlayer*>(
        &_ProtoPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(ProtoPlayer& a, ProtoPlayer& b) { a.Swap(&b); }
  inline void Swap(ProtoPlayer* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoPlayer* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtoPlayer* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ProtoPlayer>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProtoPlayer& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ProtoPlayer& from) { ProtoPlayer::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ProtoPlayer* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "ProtoPlayer"; }

 protected:
  explicit ProtoPlayer(::google::protobuf::Arena* arena);
  ProtoPlayer(::google::protobuf::Arena* arena, const ProtoPlayer& from);
  ProtoPlayer(::google::protobuf::Arena* arena, ProtoPlayer&& from) noexcept
      : ProtoPlayer(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using ProtoPosition = ProtoPlayer_ProtoPosition;
  static constexpr ProtoPosition LOBBY = ProtoPlayer_ProtoPosition_LOBBY;
  static constexpr ProtoPosition SMALL_BLIND = ProtoPlayer_ProtoPosition_SMALL_BLIND;
  static constexpr ProtoPosition BIG_BLIND = ProtoPlayer_ProtoPosition_BIG_BLIND;
  static constexpr ProtoPosition UTG = ProtoPlayer_ProtoPosition_UTG;
  static constexpr ProtoPosition UTG_1 = ProtoPlayer_ProtoPosition_UTG_1;
  static constexpr ProtoPosition MIDDLE = ProtoPlayer_ProtoPosition_MIDDLE;
  static constexpr ProtoPosition LOJACK = ProtoPlayer_ProtoPosition_LOJACK;
  static constexpr ProtoPosition HIJACK = ProtoPlayer_ProtoPosition_HIJACK;
  static constexpr ProtoPosition CUT_OFF = ProtoPlayer_ProtoPosition_CUT_OFF;
  static constexpr ProtoPosition DEALER = ProtoPlayer_ProtoPosition_DEALER;
  static inline bool ProtoPosition_IsValid(int value) {
    return ProtoPlayer_ProtoPosition_IsValid(value);
  }
  static constexpr ProtoPosition ProtoPosition_MIN = ProtoPlayer_ProtoPosition_ProtoPosition_MIN;
  static constexpr ProtoPosition ProtoPosition_MAX = ProtoPlayer_ProtoPosition_ProtoPosition_MAX;
  static constexpr int ProtoPosition_ARRAYSIZE = ProtoPlayer_ProtoPosition_ProtoPosition_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ProtoPosition_descriptor() {
    return ProtoPlayer_ProtoPosition_descriptor();
  }
  template <typename T>
  static inline const std::string& ProtoPosition_Name(T value) {
    return ProtoPlayer_ProtoPosition_Name(value);
  }
  static inline bool ProtoPosition_Parse(absl::string_view name, ProtoPosition* value) {
    return ProtoPlayer_ProtoPosition_Parse(name, value);
  }
  using ProtoPlayerStatus = ProtoPlayer_ProtoPlayerStatus;
  static constexpr ProtoPlayerStatus WAITING = ProtoPlayer_ProtoPlayerStatus_WAITING;
  static constexpr ProtoPlayerStatus IN_HAND = ProtoPlayer_ProtoPlayerStatus_IN_HAND;
  static constexpr ProtoPlayerStatus FOLDED = ProtoPlayer_ProtoPlayerStatus_FOLDED;
  static constexpr ProtoPlayerStatus ALL_IN_BET = ProtoPlayer_ProtoPlayerStatus_ALL_IN_BET;
  static constexpr ProtoPlayerStatus ALL_IN_CALL = ProtoPlayer_ProtoPlayerStatus_ALL_IN_CALL;
  static inline bool ProtoPlayerStatus_IsValid(int value) {
    return ProtoPlayer_ProtoPlayerStatus_IsValid(value);
  }
  static constexpr ProtoPlayerStatus ProtoPlayerStatus_MIN = ProtoPlayer_ProtoPlayerStatus_ProtoPlayerStatus_MIN;
  static constexpr ProtoPlayerStatus ProtoPlayerStatus_MAX = ProtoPlayer_ProtoPlayerStatus_ProtoPlayerStatus_MAX;
  static constexpr int ProtoPlayerStatus_ARRAYSIZE = ProtoPlayer_ProtoPlayerStatus_ProtoPlayerStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ProtoPlayerStatus_descriptor() {
    return ProtoPlayer_ProtoPlayerStatus_descriptor();
  }
  template <typename T>
  static inline const std::string& ProtoPlayerStatus_Name(T value) {
    return ProtoPlayer_ProtoPlayerStatus_Name(value);
  }
  static inline bool ProtoPlayerStatus_Parse(absl::string_view name, ProtoPlayerStatus* value) {
    return ProtoPlayer_ProtoPlayerStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
    kChipsFieldNumber = 3,
    kRecentBetsFieldNumber = 4,
    kPositionFieldNumber = 5,
    kStatusFieldNumber = 6,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string id = 2;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // uint32 chips = 3;
  void clear_chips() ;
  ::uint32_t chips() const;
  void set_chips(::uint32_t value);

  private:
  ::uint32_t _internal_chips() const;
  void _internal_set_chips(::uint32_t value);

  public:
  // uint32 recent_bets = 4;
  void clear_recent_bets() ;
  ::uint32_t recent_bets() const;
  void set_recent_bets(::uint32_t value);

  private:
  ::uint32_t _internal_recent_bets() const;
  void _internal_set_recent_bets(::uint32_t value);

  public:
  // .ProtoPlayer.ProtoPosition position = 5;
  void clear_position() ;
  ::ProtoPlayer_ProtoPosition position() const;
  void set_position(::ProtoPlayer_ProtoPosition value);

  private:
  ::ProtoPlayer_ProtoPosition _internal_position() const;
  void _internal_set_position(::ProtoPlayer_ProtoPosition value);

  public:
  // .ProtoPlayer.ProtoPlayerStatus status = 6;
  void clear_status() ;
  ::ProtoPlayer_ProtoPlayerStatus status() const;
  void set_status(::ProtoPlayer_ProtoPlayerStatus value);

  private:
  ::ProtoPlayer_ProtoPlayerStatus _internal_status() const;
  void _internal_set_status(::ProtoPlayer_ProtoPlayerStatus value);

  public:
  // @@protoc_insertion_point(class_scope:ProtoPlayer)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      26, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ProtoPlayer_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ProtoPlayer& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::uint32_t chips_;
    ::uint32_t recent_bets_;
    int position_;
    int status_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texas_5fholdem_2eproto;
};
// -------------------------------------------------------------------

class ProtoCard final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ProtoCard) */ {
 public:
  inline ProtoCard() : ProtoCard(nullptr) {}
  ~ProtoCard() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ProtoCard(
      ::google::protobuf::internal::ConstantInitialized);

  inline ProtoCard(const ProtoCard& from) : ProtoCard(nullptr, from) {}
  inline ProtoCard(ProtoCard&& from) noexcept
      : ProtoCard(nullptr, std::move(from)) {}
  inline ProtoCard& operator=(const ProtoCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoCard& operator=(ProtoCard&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtoCard& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoCard* internal_default_instance() {
    return reinterpret_cast<const ProtoCard*>(
        &_ProtoCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(ProtoCard& a, ProtoCard& b) { a.Swap(&b); }
  inline void Swap(ProtoCard* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoCard* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtoCard* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ProtoCard>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProtoCard& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ProtoCard& from) { ProtoCard::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ProtoCard* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "ProtoCard"; }

 protected:
  explicit ProtoCard(::google::protobuf::Arena* arena);
  ProtoCard(::google::protobuf::Arena* arena, const ProtoCard& from);
  ProtoCard(::google::protobuf::Arena* arena, ProtoCard&& from) noexcept
      : ProtoCard(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using ProtoSuit = ProtoCard_ProtoSuit;
  static constexpr ProtoSuit SUIT_UNSPECIFIED = ProtoCard_ProtoSuit_SUIT_UNSPECIFIED;
  static constexpr ProtoSuit HEARTS = ProtoCard_ProtoSuit_HEARTS;
  static constexpr ProtoSuit DIAMONDS = ProtoCard_ProtoSuit_DIAMONDS;
  static constexpr ProtoSuit CLUBS = ProtoCard_ProtoSuit_CLUBS;
  static constexpr ProtoSuit SPADES = ProtoCard_ProtoSuit_SPADES;
  static inline bool ProtoSuit_IsValid(int value) {
    return ProtoCard_ProtoSuit_IsValid(value);
  }
  static constexpr ProtoSuit ProtoSuit_MIN = ProtoCard_ProtoSuit_ProtoSuit_MIN;
  static constexpr ProtoSuit ProtoSuit_MAX = ProtoCard_ProtoSuit_ProtoSuit_MAX;
  static constexpr int ProtoSuit_ARRAYSIZE = ProtoCard_ProtoSuit_ProtoSuit_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ProtoSuit_descriptor() {
    return ProtoCard_ProtoSuit_descriptor();
  }
  template <typename T>
  static inline const std::string& ProtoSuit_Name(T value) {
    return ProtoCard_ProtoSuit_Name(value);
  }
  static inline bool ProtoSuit_Parse(absl::string_view name, ProtoSuit* value) {
    return ProtoCard_ProtoSuit_Parse(name, value);
  }
  using ProtoValue = ProtoCard_ProtoValue;
  static constexpr ProtoValue VALUE_UNSPECIFIED = ProtoCard_ProtoValue_VALUE_UNSPECIFIED;
  static constexpr ProtoValue TWO = ProtoCard_ProtoValue_TWO;
  static constexpr ProtoValue THREE = ProtoCard_ProtoValue_THREE;
  static constexpr ProtoValue FOUR = ProtoCard_ProtoValue_FOUR;
  static constexpr ProtoValue FIVE = ProtoCard_ProtoValue_FIVE;
  static constexpr ProtoValue SIX = ProtoCard_ProtoValue_SIX;
  static constexpr ProtoValue SEVEN = ProtoCard_ProtoValue_SEVEN;
  static constexpr ProtoValue EIGHT = ProtoCard_ProtoValue_EIGHT;
  static constexpr ProtoValue NINE = ProtoCard_ProtoValue_NINE;
  static constexpr ProtoValue TEN = ProtoCard_ProtoValue_TEN;
  static constexpr ProtoValue JACK = ProtoCard_ProtoValue_JACK;
  static constexpr ProtoValue QUEEN = ProtoCard_ProtoValue_QUEEN;
  static constexpr ProtoValue KING = ProtoCard_ProtoValue_KING;
  static constexpr ProtoValue ACE = ProtoCard_ProtoValue_ACE;
  static inline bool ProtoValue_IsValid(int value) {
    return ProtoCard_ProtoValue_IsValid(value);
  }
  static constexpr ProtoValue ProtoValue_MIN = ProtoCard_ProtoValue_ProtoValue_MIN;
  static constexpr ProtoValue ProtoValue_MAX = ProtoCard_ProtoValue_ProtoValue_MAX;
  static constexpr int ProtoValue_ARRAYSIZE = ProtoCard_ProtoValue_ProtoValue_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ProtoValue_descriptor() {
    return ProtoCard_ProtoValue_descriptor();
  }
  template <typename T>
  static inline const std::string& ProtoValue_Name(T value) {
    return ProtoCard_ProtoValue_Name(value);
  }
  static inline bool ProtoValue_Parse(absl::string_view name, ProtoValue* value) {
    return ProtoCard_ProtoValue_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kSuitFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .ProtoCard.ProtoSuit suit = 1;
  void clear_suit() ;
  ::ProtoCard_ProtoSuit suit() const;
  void set_suit(::ProtoCard_ProtoSuit value);

  private:
  ::ProtoCard_ProtoSuit _internal_suit() const;
  void _internal_set_suit(::ProtoCard_ProtoSuit value);

  public:
  // .ProtoCard.ProtoValue value = 2;
  void clear_value() ;
  ::ProtoCard_ProtoValue value() const;
  void set_value(::ProtoCard_ProtoValue value);

  private:
  ::ProtoCard_ProtoValue _internal_value() const;
  void _internal_set_value(::ProtoCard_ProtoValue value);

  public:
  // @@protoc_insertion_point(class_scope:ProtoCard)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ProtoCard_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ProtoCard& from_msg);
    int suit_;
    int value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texas_5fholdem_2eproto;
};
// -------------------------------------------------------------------

class PotWinner final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PotWinner) */ {
 public:
  inline PotWinner() : PotWinner(nullptr) {}
  ~PotWinner() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PotWinner(
      ::google::protobuf::internal::ConstantInitialized);

  inline PotWinner(const PotWinner& from) : PotWinner(nullptr, from) {}
  inline PotWinner(PotWinner&& from) noexcept
      : PotWinner(nullptr, std::move(from)) {}
  inline PotWinner& operator=(const PotWinner& from) {
    CopyFrom(from);
    return *this;
  }
  inline PotWinner& operator=(PotWinner&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PotWinner& default_instance() {
    return *internal_default_instance();
  }
  static inline const PotWinner* internal_default_instance() {
    return reinterpret_cast<const PotWinner*>(
        &_PotWinner_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(PotWinner& a, PotWinner& b) { a.Swap(&b); }
  inline void Swap(PotWinner* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PotWinner* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PotWinner* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PotWinner>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PotWinner& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PotWinner& from) { PotWinner::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PotWinner* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PotWinner"; }

 protected:
  explicit PotWinner(::google::protobuf::Arena* arena);
  PotWinner(::google::protobuf::Arena* arena, const PotWinner& from);
  PotWinner(::google::protobuf::Arena* arena, PotWinner&& from) noexcept
      : PotWinner(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWinnerFieldNumber = 2,
    kPotChipsFieldNumber = 1,
  };
  // string winner = 2;
  void clear_winner() ;
  const std::string& winner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_winner(Arg_&& arg, Args_... args);
  std::string* mutable_winner();
  PROTOBUF_NODISCARD std::string* release_winner();
  void set_allocated_winner(std::string* value);

  private:
  const std::string& _internal_winner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_winner(
      const std::string& value);
  std::string* _internal_mutable_winner();

  public:
  // uint32 pot_chips = 1;
  void clear_pot_chips() ;
  ::uint32_t pot_chips() const;
  void set_pot_chips(::uint32_t value);

  private:
  ::uint32_t _internal_pot_chips() const;
  void _internal_set_pot_chips(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:PotWinner)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      24, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PotWinner_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PotWinner& from_msg);
    ::google::protobuf::internal::ArenaStringPtr winner_;
    ::uint32_t pot_chips_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texas_5fholdem_2eproto;
};
// -------------------------------------------------------------------

class PlayerToActInfo_ProtoPossibleAction final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PlayerToActInfo.ProtoPossibleAction) */ {
 public:
  inline PlayerToActInfo_ProtoPossibleAction() : PlayerToActInfo_ProtoPossibleAction(nullptr) {}
  ~PlayerToActInfo_ProtoPossibleAction() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlayerToActInfo_ProtoPossibleAction(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlayerToActInfo_ProtoPossibleAction(const PlayerToActInfo_ProtoPossibleAction& from) : PlayerToActInfo_ProtoPossibleAction(nullptr, from) {}
  inline PlayerToActInfo_ProtoPossibleAction(PlayerToActInfo_ProtoPossibleAction&& from) noexcept
      : PlayerToActInfo_ProtoPossibleAction(nullptr, std::move(from)) {}
  inline PlayerToActInfo_ProtoPossibleAction& operator=(const PlayerToActInfo_ProtoPossibleAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerToActInfo_ProtoPossibleAction& operator=(PlayerToActInfo_ProtoPossibleAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerToActInfo_ProtoPossibleAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerToActInfo_ProtoPossibleAction* internal_default_instance() {
    return reinterpret_cast<const PlayerToActInfo_ProtoPossibleAction*>(
        &_PlayerToActInfo_ProtoPossibleAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(PlayerToActInfo_ProtoPossibleAction& a, PlayerToActInfo_ProtoPossibleAction& b) { a.Swap(&b); }
  inline void Swap(PlayerToActInfo_ProtoPossibleAction* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerToActInfo_ProtoPossibleAction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerToActInfo_ProtoPossibleAction* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PlayerToActInfo_ProtoPossibleAction>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlayerToActInfo_ProtoPossibleAction& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PlayerToActInfo_ProtoPossibleAction& from) { PlayerToActInfo_ProtoPossibleAction::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PlayerToActInfo_ProtoPossibleAction* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PlayerToActInfo.ProtoPossibleAction"; }

 protected:
  explicit PlayerToActInfo_ProtoPossibleAction(::google::protobuf::Arena* arena);
  PlayerToActInfo_ProtoPossibleAction(::google::protobuf::Arena* arena, const PlayerToActInfo_ProtoPossibleAction& from);
  PlayerToActInfo_ProtoPossibleAction(::google::protobuf::Arena* arena, PlayerToActInfo_ProtoPossibleAction&& from) noexcept
      : PlayerToActInfo_ProtoPossibleAction(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kActionTypeFieldNumber = 1,
    kPrimaryAmountFieldNumber = 2,
    kSecondaryAmountFieldNumber = 3,
  };
  // .ProtoActionType action_type = 1;
  void clear_action_type() ;
  ::ProtoActionType action_type() const;
  void set_action_type(::ProtoActionType value);

  private:
  ::ProtoActionType _internal_action_type() const;
  void _internal_set_action_type(::ProtoActionType value);

  public:
  // uint32 primary_amount = 2;
  void clear_primary_amount() ;
  ::uint32_t primary_amount() const;
  void set_primary_amount(::uint32_t value);

  private:
  ::uint32_t _internal_primary_amount() const;
  void _internal_set_primary_amount(::uint32_t value);

  public:
  // uint32 secondary_amount = 3;
  void clear_secondary_amount() ;
  ::uint32_t secondary_amount() const;
  void set_secondary_amount(::uint32_t value);

  private:
  ::uint32_t _internal_secondary_amount() const;
  void _internal_set_secondary_amount(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:PlayerToActInfo.ProtoPossibleAction)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PlayerToActInfo_ProtoPossibleAction_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PlayerToActInfo_ProtoPossibleAction& from_msg);
    int action_type_;
    ::uint32_t primary_amount_;
    ::uint32_t secondary_amount_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texas_5fholdem_2eproto;
};
// -------------------------------------------------------------------

class PlayerReqRes final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PlayerReqRes) */ {
 public:
  inline PlayerReqRes() : PlayerReqRes(nullptr) {}
  ~PlayerReqRes() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlayerReqRes(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlayerReqRes(const PlayerReqRes& from) : PlayerReqRes(nullptr, from) {}
  inline PlayerReqRes(PlayerReqRes&& from) noexcept
      : PlayerReqRes(nullptr, std::move(from)) {}
  inline PlayerReqRes& operator=(const PlayerReqRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerReqRes& operator=(PlayerReqRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerReqRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerReqRes* internal_default_instance() {
    return reinterpret_cast<const PlayerReqRes*>(
        &_PlayerReqRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(PlayerReqRes& a, PlayerReqRes& b) { a.Swap(&b); }
  inline void Swap(PlayerReqRes* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerReqRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerReqRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PlayerReqRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlayerReqRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PlayerReqRes& from) { PlayerReqRes::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PlayerReqRes* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PlayerReqRes"; }

 protected:
  explicit PlayerReqRes(::google::protobuf::Arena* arena);
  PlayerReqRes(::google::protobuf::Arena* arena, const PlayerReqRes& from);
  PlayerReqRes(::google::protobuf::Arena* arena, PlayerReqRes&& from) noexcept
      : PlayerReqRes(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPlayerIdFieldNumber = 2,
    kServerMessageFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string player_id = 2;
  void clear_player_id() ;
  const std::string& player_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_player_id(Arg_&& arg, Args_... args);
  std::string* mutable_player_id();
  PROTOBUF_NODISCARD std::string* release_player_id();
  void set_allocated_player_id(std::string* value);

  private:
  const std::string& _internal_player_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_id(
      const std::string& value);
  std::string* _internal_mutable_player_id();

  public:
  // string server_message = 3;
  void clear_server_message() ;
  const std::string& server_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_server_message(Arg_&& arg, Args_... args);
  std::string* mutable_server_message();
  PROTOBUF_NODISCARD std::string* release_server_message();
  void set_allocated_server_message(std::string* value);

  private:
  const std::string& _internal_server_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_message(
      const std::string& value);
  std::string* _internal_mutable_server_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:PlayerReqRes)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      44, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PlayerReqRes_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PlayerReqRes& from_msg);
    ::google::protobuf::internal::ArenaStringPtr player_id_;
    ::google::protobuf::internal::ArenaStringPtr server_message_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texas_5fholdem_2eproto;
};
// -------------------------------------------------------------------

class PlayerActionReq final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PlayerActionReq) */ {
 public:
  inline PlayerActionReq() : PlayerActionReq(nullptr) {}
  ~PlayerActionReq() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlayerActionReq(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlayerActionReq(const PlayerActionReq& from) : PlayerActionReq(nullptr, from) {}
  inline PlayerActionReq(PlayerActionReq&& from) noexcept
      : PlayerActionReq(nullptr, std::move(from)) {}
  inline PlayerActionReq& operator=(const PlayerActionReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerActionReq& operator=(PlayerActionReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerActionReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerActionReq* internal_default_instance() {
    return reinterpret_cast<const PlayerActionReq*>(
        &_PlayerActionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(PlayerActionReq& a, PlayerActionReq& b) { a.Swap(&b); }
  inline void Swap(PlayerActionReq* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerActionReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerActionReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PlayerActionReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlayerActionReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PlayerActionReq& from) { PlayerActionReq::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PlayerActionReq* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PlayerActionReq"; }

 protected:
  explicit PlayerActionReq(::google::protobuf::Arena* arena);
  PlayerActionReq(::google::protobuf::Arena* arena, const PlayerActionReq& from);
  PlayerActionReq(::google::protobuf::Arena* arena, PlayerActionReq&& from) noexcept
      : PlayerActionReq(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPlayerIdFieldNumber = 1,
    kActionTypeFieldNumber = 2,
    kActionAmountFieldNumber = 3,
  };
  // string player_id = 1;
  void clear_player_id() ;
  const std::string& player_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_player_id(Arg_&& arg, Args_... args);
  std::string* mutable_player_id();
  PROTOBUF_NODISCARD std::string* release_player_id();
  void set_allocated_player_id(std::string* value);

  private:
  const std::string& _internal_player_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_id(
      const std::string& value);
  std::string* _internal_mutable_player_id();

  public:
  // .ProtoActionType action_type = 2;
  void clear_action_type() ;
  ::ProtoActionType action_type() const;
  void set_action_type(::ProtoActionType value);

  private:
  ::ProtoActionType _internal_action_type() const;
  void _internal_set_action_type(::ProtoActionType value);

  public:
  // uint32 action_amount = 3;
  void clear_action_amount() ;
  ::uint32_t action_amount() const;
  void set_action_amount(::uint32_t value);

  private:
  ::uint32_t _internal_action_amount() const;
  void _internal_set_action_amount(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:PlayerActionReq)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      33, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PlayerActionReq_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PlayerActionReq& from_msg);
    ::google::protobuf::internal::ArenaStringPtr player_id_;
    int action_type_;
    ::uint32_t action_amount_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texas_5fholdem_2eproto;
};
// -------------------------------------------------------------------

class PlayerActionInfo_ProtoAction final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PlayerActionInfo.ProtoAction) */ {
 public:
  inline PlayerActionInfo_ProtoAction() : PlayerActionInfo_ProtoAction(nullptr) {}
  ~PlayerActionInfo_ProtoAction() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlayerActionInfo_ProtoAction(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlayerActionInfo_ProtoAction(const PlayerActionInfo_ProtoAction& from) : PlayerActionInfo_ProtoAction(nullptr, from) {}
  inline PlayerActionInfo_ProtoAction(PlayerActionInfo_ProtoAction&& from) noexcept
      : PlayerActionInfo_ProtoAction(nullptr, std::move(from)) {}
  inline PlayerActionInfo_ProtoAction& operator=(const PlayerActionInfo_ProtoAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerActionInfo_ProtoAction& operator=(PlayerActionInfo_ProtoAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerActionInfo_ProtoAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerActionInfo_ProtoAction* internal_default_instance() {
    return reinterpret_cast<const PlayerActionInfo_ProtoAction*>(
        &_PlayerActionInfo_ProtoAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(PlayerActionInfo_ProtoAction& a, PlayerActionInfo_ProtoAction& b) { a.Swap(&b); }
  inline void Swap(PlayerActionInfo_ProtoAction* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerActionInfo_ProtoAction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerActionInfo_ProtoAction* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PlayerActionInfo_ProtoAction>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlayerActionInfo_ProtoAction& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PlayerActionInfo_ProtoAction& from) { PlayerActionInfo_ProtoAction::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PlayerActionInfo_ProtoAction* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PlayerActionInfo.ProtoAction"; }

 protected:
  explicit PlayerActionInfo_ProtoAction(::google::protobuf::Arena* arena);
  PlayerActionInfo_ProtoAction(::google::protobuf::Arena* arena, const PlayerActionInfo_ProtoAction& from);
  PlayerActionInfo_ProtoAction(::google::protobuf::Arena* arena, PlayerActionInfo_ProtoAction&& from) noexcept
      : PlayerActionInfo_ProtoAction(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kActionTypeFieldNumber = 1,
    kActionAmountFieldNumber = 2,
  };
  // .ProtoActionType action_type = 1;
  void clear_action_type() ;
  ::ProtoActionType action_type() const;
  void set_action_type(::ProtoActionType value);

  private:
  ::ProtoActionType _internal_action_type() const;
  void _internal_set_action_type(::ProtoActionType value);

  public:
  // uint32 action_amount = 2;
  void clear_action_amount() ;
  ::uint32_t action_amount() const;
  void set_action_amount(::uint32_t value);

  private:
  ::uint32_t _internal_action_amount() const;
  void _internal_set_action_amount(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:PlayerActionInfo.ProtoAction)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PlayerActionInfo_ProtoAction_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PlayerActionInfo_ProtoAction& from_msg);
    int action_type_;
    ::uint32_t action_amount_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texas_5fholdem_2eproto;
};
// -------------------------------------------------------------------

class NewStreetEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NewStreetEvent) */ {
 public:
  inline NewStreetEvent() : NewStreetEvent(nullptr) {}
  ~NewStreetEvent() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NewStreetEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline NewStreetEvent(const NewStreetEvent& from) : NewStreetEvent(nullptr, from) {}
  inline NewStreetEvent(NewStreetEvent&& from) noexcept
      : NewStreetEvent(nullptr, std::move(from)) {}
  inline NewStreetEvent& operator=(const NewStreetEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewStreetEvent& operator=(NewStreetEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewStreetEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewStreetEvent* internal_default_instance() {
    return reinterpret_cast<const NewStreetEvent*>(
        &_NewStreetEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(NewStreetEvent& a, NewStreetEvent& b) { a.Swap(&b); }
  inline void Swap(NewStreetEvent* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewStreetEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewStreetEvent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NewStreetEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NewStreetEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NewStreetEvent& from) { NewStreetEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NewStreetEvent* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NewStreetEvent"; }

 protected:
  explicit NewStreetEvent(::google::protobuf::Arena* arena);
  NewStreetEvent(::google::protobuf::Arena* arena, const NewStreetEvent& from);
  NewStreetEvent(::google::protobuf::Arena* arena, NewStreetEvent&& from) noexcept
      : NewStreetEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNewStreetFieldNumber = 1,
  };
  // .ProtoStreet new_street = 1;
  void clear_new_street() ;
  ::ProtoStreet new_street() const;
  void set_new_street(::ProtoStreet value);

  private:
  ::ProtoStreet _internal_new_street() const;
  void _internal_set_new_street(::ProtoStreet value);

  public:
  // @@protoc_insertion_point(class_scope:NewStreetEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NewStreetEvent_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NewStreetEvent& from_msg);
    int new_street_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texas_5fholdem_2eproto;
};
// -------------------------------------------------------------------

class LeaveGameReq final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:LeaveGameReq) */ {
 public:
  inline LeaveGameReq() : LeaveGameReq(nullptr) {}
  ~LeaveGameReq() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LeaveGameReq(
      ::google::protobuf::internal::ConstantInitialized);

  inline LeaveGameReq(const LeaveGameReq& from) : LeaveGameReq(nullptr, from) {}
  inline LeaveGameReq(LeaveGameReq&& from) noexcept
      : LeaveGameReq(nullptr, std::move(from)) {}
  inline LeaveGameReq& operator=(const LeaveGameReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveGameReq& operator=(LeaveGameReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LeaveGameReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaveGameReq* internal_default_instance() {
    return reinterpret_cast<const LeaveGameReq*>(
        &_LeaveGameReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(LeaveGameReq& a, LeaveGameReq& b) { a.Swap(&b); }
  inline void Swap(LeaveGameReq* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaveGameReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LeaveGameReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<LeaveGameReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LeaveGameReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LeaveGameReq& from) { LeaveGameReq::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LeaveGameReq* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "LeaveGameReq"; }

 protected:
  explicit LeaveGameReq(::google::protobuf::Arena* arena);
  LeaveGameReq(::google::protobuf::Arena* arena, const LeaveGameReq& from);
  LeaveGameReq(::google::protobuf::Arena* arena, LeaveGameReq&& from) noexcept
      : LeaveGameReq(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // string player_id = 1;
  void clear_player_id() ;
  const std::string& player_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_player_id(Arg_&& arg, Args_... args);
  std::string* mutable_player_id();
  PROTOBUF_NODISCARD std::string* release_player_id();
  void set_allocated_player_id(std::string* value);

  private:
  const std::string& _internal_player_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_id(
      const std::string& value);
  std::string* _internal_mutable_player_id();

  public:
  // @@protoc_insertion_point(class_scope:LeaveGameReq)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      30, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_LeaveGameReq_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LeaveGameReq& from_msg);
    ::google::protobuf::internal::ArenaStringPtr player_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texas_5fholdem_2eproto;
};
// -------------------------------------------------------------------

class JoinGameReq final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:JoinGameReq) */ {
 public:
  inline JoinGameReq() : JoinGameReq(nullptr) {}
  ~JoinGameReq() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR JoinGameReq(
      ::google::protobuf::internal::ConstantInitialized);

  inline JoinGameReq(const JoinGameReq& from) : JoinGameReq(nullptr, from) {}
  inline JoinGameReq(JoinGameReq&& from) noexcept
      : JoinGameReq(nullptr, std::move(from)) {}
  inline JoinGameReq& operator=(const JoinGameReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinGameReq& operator=(JoinGameReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinGameReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinGameReq* internal_default_instance() {
    return reinterpret_cast<const JoinGameReq*>(
        &_JoinGameReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(JoinGameReq& a, JoinGameReq& b) { a.Swap(&b); }
  inline void Swap(JoinGameReq* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinGameReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinGameReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<JoinGameReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const JoinGameReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const JoinGameReq& from) { JoinGameReq::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(JoinGameReq* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "JoinGameReq"; }

 protected:
  explicit JoinGameReq(::google::protobuf::Arena* arena);
  JoinGameReq(::google::protobuf::Arena* arena, const JoinGameReq& from);
  JoinGameReq(::google::protobuf::Arena* arena, JoinGameReq&& from) noexcept
      : JoinGameReq(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPlayerNameFieldNumber = 1,
    kChipsFieldNumber = 2,
  };
  // string player_name = 1;
  void clear_player_name() ;
  const std::string& player_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_player_name(Arg_&& arg, Args_... args);
  std::string* mutable_player_name();
  PROTOBUF_NODISCARD std::string* release_player_name();
  void set_allocated_player_name(std::string* value);

  private:
  const std::string& _internal_player_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_name(
      const std::string& value);
  std::string* _internal_mutable_player_name();

  public:
  // uint32 chips = 2;
  void clear_chips() ;
  ::uint32_t chips() const;
  void set_chips(::uint32_t value);

  private:
  ::uint32_t _internal_chips() const;
  void _internal_set_chips(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:JoinGameReq)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      31, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_JoinGameReq_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const JoinGameReq& from_msg);
    ::google::protobuf::internal::ArenaStringPtr player_name_;
    ::uint32_t chips_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texas_5fholdem_2eproto;
};
// -------------------------------------------------------------------

class GameStreamReq final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameStreamReq) */ {
 public:
  inline GameStreamReq() : GameStreamReq(nullptr) {}
  ~GameStreamReq() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameStreamReq(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameStreamReq(const GameStreamReq& from) : GameStreamReq(nullptr, from) {}
  inline GameStreamReq(GameStreamReq&& from) noexcept
      : GameStreamReq(nullptr, std::move(from)) {}
  inline GameStreamReq& operator=(const GameStreamReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameStreamReq& operator=(GameStreamReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameStreamReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameStreamReq* internal_default_instance() {
    return reinterpret_cast<const GameStreamReq*>(
        &_GameStreamReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(GameStreamReq& a, GameStreamReq& b) { a.Swap(&b); }
  inline void Swap(GameStreamReq* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameStreamReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameStreamReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GameStreamReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameStreamReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameStreamReq& from) { GameStreamReq::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameStreamReq* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameStreamReq"; }

 protected:
  explicit GameStreamReq(::google::protobuf::Arena* arena);
  GameStreamReq(::google::protobuf::Arena* arena, const GameStreamReq& from);
  GameStreamReq(::google::protobuf::Arena* arena, GameStreamReq&& from) noexcept
      : GameStreamReq(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // string player_id = 1;
  void clear_player_id() ;
  const std::string& player_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_player_id(Arg_&& arg, Args_... args);
  std::string* mutable_player_id();
  PROTOBUF_NODISCARD std::string* release_player_id();
  void set_allocated_player_id(std::string* value);

  private:
  const std::string& _internal_player_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_id(
      const std::string& value);
  std::string* _internal_mutable_player_id();

  public:
  // @@protoc_insertion_point(class_scope:GameStreamReq)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      31, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameStreamReq_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameStreamReq& from_msg);
    ::google::protobuf::internal::ArenaStringPtr player_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texas_5fholdem_2eproto;
};
// -------------------------------------------------------------------

class PotWinnerEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PotWinnerEvent) */ {
 public:
  inline PotWinnerEvent() : PotWinnerEvent(nullptr) {}
  ~PotWinnerEvent() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PotWinnerEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline PotWinnerEvent(const PotWinnerEvent& from) : PotWinnerEvent(nullptr, from) {}
  inline PotWinnerEvent(PotWinnerEvent&& from) noexcept
      : PotWinnerEvent(nullptr, std::move(from)) {}
  inline PotWinnerEvent& operator=(const PotWinnerEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PotWinnerEvent& operator=(PotWinnerEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PotWinnerEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const PotWinnerEvent* internal_default_instance() {
    return reinterpret_cast<const PotWinnerEvent*>(
        &_PotWinnerEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(PotWinnerEvent& a, PotWinnerEvent& b) { a.Swap(&b); }
  inline void Swap(PotWinnerEvent* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PotWinnerEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PotWinnerEvent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PotWinnerEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PotWinnerEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PotWinnerEvent& from) { PotWinnerEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PotWinnerEvent* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PotWinnerEvent"; }

 protected:
  explicit PotWinnerEvent(::google::protobuf::Arena* arena);
  PotWinnerEvent(::google::protobuf::Arena* arena, const PotWinnerEvent& from);
  PotWinnerEvent(::google::protobuf::Arena* arena, PotWinnerEvent&& from) noexcept
      : PotWinnerEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPotWinnersFieldNumber = 1,
  };
  // repeated .PotWinner pot_winners = 1;
  int pot_winners_size() const;
  private:
  int _internal_pot_winners_size() const;

  public:
  void clear_pot_winners() ;
  ::PotWinner* mutable_pot_winners(int index);
  ::google::protobuf::RepeatedPtrField<::PotWinner>* mutable_pot_winners();

  private:
  const ::google::protobuf::RepeatedPtrField<::PotWinner>& _internal_pot_winners() const;
  ::google::protobuf::RepeatedPtrField<::PotWinner>* _internal_mutable_pot_winners();
  public:
  const ::PotWinner& pot_winners(int index) const;
  ::PotWinner* add_pot_winners();
  const ::google::protobuf::RepeatedPtrField<::PotWinner>& pot_winners() const;
  // @@protoc_insertion_point(class_scope:PotWinnerEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PotWinnerEvent_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PotWinnerEvent& from_msg);
    ::google::protobuf::RepeatedPtrField< ::PotWinner > pot_winners_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texas_5fholdem_2eproto;
};
// -------------------------------------------------------------------

class PotUpdateEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PotUpdateEvent) */ {
 public:
  inline PotUpdateEvent() : PotUpdateEvent(nullptr) {}
  ~PotUpdateEvent() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PotUpdateEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline PotUpdateEvent(const PotUpdateEvent& from) : PotUpdateEvent(nullptr, from) {}
  inline PotUpdateEvent(PotUpdateEvent&& from) noexcept
      : PotUpdateEvent(nullptr, std::move(from)) {}
  inline PotUpdateEvent& operator=(const PotUpdateEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PotUpdateEvent& operator=(PotUpdateEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PotUpdateEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const PotUpdateEvent* internal_default_instance() {
    return reinterpret_cast<const PotUpdateEvent*>(
        &_PotUpdateEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(PotUpdateEvent& a, PotUpdateEvent& b) { a.Swap(&b); }
  inline void Swap(PotUpdateEvent* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PotUpdateEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PotUpdateEvent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PotUpdateEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PotUpdateEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PotUpdateEvent& from) { PotUpdateEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PotUpdateEvent* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PotUpdateEvent"; }

 protected:
  explicit PotUpdateEvent(::google::protobuf::Arena* arena);
  PotUpdateEvent(::google::protobuf::Arena* arena, const PotUpdateEvent& from);
  PotUpdateEvent(::google::protobuf::Arena* arena, PotUpdateEvent&& from) noexcept
      : PotUpdateEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUpdatedPotsFieldNumber = 1,
  };
  // repeated .ProtoPot updated_pots = 1;
  int updated_pots_size() const;
  private:
  int _internal_updated_pots_size() const;

  public:
  void clear_updated_pots() ;
  ::ProtoPot* mutable_updated_pots(int index);
  ::google::protobuf::RepeatedPtrField<::ProtoPot>* mutable_updated_pots();

  private:
  const ::google::protobuf::RepeatedPtrField<::ProtoPot>& _internal_updated_pots() const;
  ::google::protobuf::RepeatedPtrField<::ProtoPot>* _internal_mutable_updated_pots();
  public:
  const ::ProtoPot& updated_pots(int index) const;
  ::ProtoPot* add_updated_pots();
  const ::google::protobuf::RepeatedPtrField<::ProtoPot>& updated_pots() const;
  // @@protoc_insertion_point(class_scope:PotUpdateEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PotUpdateEvent_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PotUpdateEvent& from_msg);
    ::google::protobuf::RepeatedPtrField< ::ProtoPot > updated_pots_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texas_5fholdem_2eproto;
};
// -------------------------------------------------------------------

class PlayersUpdateEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PlayersUpdateEvent) */ {
 public:
  inline PlayersUpdateEvent() : PlayersUpdateEvent(nullptr) {}
  ~PlayersUpdateEvent() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlayersUpdateEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlayersUpdateEvent(const PlayersUpdateEvent& from) : PlayersUpdateEvent(nullptr, from) {}
  inline PlayersUpdateEvent(PlayersUpdateEvent&& from) noexcept
      : PlayersUpdateEvent(nullptr, std::move(from)) {}
  inline PlayersUpdateEvent& operator=(const PlayersUpdateEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayersUpdateEvent& operator=(PlayersUpdateEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayersUpdateEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayersUpdateEvent* internal_default_instance() {
    return reinterpret_cast<const PlayersUpdateEvent*>(
        &_PlayersUpdateEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(PlayersUpdateEvent& a, PlayersUpdateEvent& b) { a.Swap(&b); }
  inline void Swap(PlayersUpdateEvent* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayersUpdateEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayersUpdateEvent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PlayersUpdateEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlayersUpdateEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PlayersUpdateEvent& from) { PlayersUpdateEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PlayersUpdateEvent* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PlayersUpdateEvent"; }

 protected:
  explicit PlayersUpdateEvent(::google::protobuf::Arena* arena);
  PlayersUpdateEvent(::google::protobuf::Arena* arena, const PlayersUpdateEvent& from);
  PlayersUpdateEvent(::google::protobuf::Arena* arena, PlayersUpdateEvent&& from) noexcept
      : PlayersUpdateEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNewPlayersFieldNumber = 1,
  };
  // repeated .ProtoPlayer new_players = 1;
  int new_players_size() const;
  private:
  int _internal_new_players_size() const;

  public:
  void clear_new_players() ;
  ::ProtoPlayer* mutable_new_players(int index);
  ::google::protobuf::RepeatedPtrField<::ProtoPlayer>* mutable_new_players();

  private:
  const ::google::protobuf::RepeatedPtrField<::ProtoPlayer>& _internal_new_players() const;
  ::google::protobuf::RepeatedPtrField<::ProtoPlayer>* _internal_mutable_new_players();
  public:
  const ::ProtoPlayer& new_players(int index) const;
  ::ProtoPlayer* add_new_players();
  const ::google::protobuf::RepeatedPtrField<::ProtoPlayer>& new_players() const;
  // @@protoc_insertion_point(class_scope:PlayersUpdateEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PlayersUpdateEvent_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PlayersUpdateEvent& from_msg);
    ::google::protobuf::RepeatedPtrField< ::ProtoPlayer > new_players_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texas_5fholdem_2eproto;
};
// -------------------------------------------------------------------

class PlayerToActInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PlayerToActInfo) */ {
 public:
  inline PlayerToActInfo() : PlayerToActInfo(nullptr) {}
  ~PlayerToActInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlayerToActInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlayerToActInfo(const PlayerToActInfo& from) : PlayerToActInfo(nullptr, from) {}
  inline PlayerToActInfo(PlayerToActInfo&& from) noexcept
      : PlayerToActInfo(nullptr, std::move(from)) {}
  inline PlayerToActInfo& operator=(const PlayerToActInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerToActInfo& operator=(PlayerToActInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerToActInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerToActInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerToActInfo*>(
        &_PlayerToActInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(PlayerToActInfo& a, PlayerToActInfo& b) { a.Swap(&b); }
  inline void Swap(PlayerToActInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerToActInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerToActInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PlayerToActInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlayerToActInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PlayerToActInfo& from) { PlayerToActInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PlayerToActInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PlayerToActInfo"; }

 protected:
  explicit PlayerToActInfo(::google::protobuf::Arena* arena);
  PlayerToActInfo(::google::protobuf::Arena* arena, const PlayerToActInfo& from);
  PlayerToActInfo(::google::protobuf::Arena* arena, PlayerToActInfo&& from) noexcept
      : PlayerToActInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using ProtoPossibleAction = PlayerToActInfo_ProtoPossibleAction;

  // accessors -------------------------------------------------------
  enum : int {
    kPossibleActionsFieldNumber = 2,
    kPlayerToActFieldNumber = 1,
  };
  // repeated .PlayerToActInfo.ProtoPossibleAction possible_actions = 2;
  int possible_actions_size() const;
  private:
  int _internal_possible_actions_size() const;

  public:
  void clear_possible_actions() ;
  ::PlayerToActInfo_ProtoPossibleAction* mutable_possible_actions(int index);
  ::google::protobuf::RepeatedPtrField<::PlayerToActInfo_ProtoPossibleAction>* mutable_possible_actions();

  private:
  const ::google::protobuf::RepeatedPtrField<::PlayerToActInfo_ProtoPossibleAction>& _internal_possible_actions() const;
  ::google::protobuf::RepeatedPtrField<::PlayerToActInfo_ProtoPossibleAction>* _internal_mutable_possible_actions();
  public:
  const ::PlayerToActInfo_ProtoPossibleAction& possible_actions(int index) const;
  ::PlayerToActInfo_ProtoPossibleAction* add_possible_actions();
  const ::google::protobuf::RepeatedPtrField<::PlayerToActInfo_ProtoPossibleAction>& possible_actions() const;
  // string player_to_act = 1;
  void clear_player_to_act() ;
  const std::string& player_to_act() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_player_to_act(Arg_&& arg, Args_... args);
  std::string* mutable_player_to_act();
  PROTOBUF_NODISCARD std::string* release_player_to_act();
  void set_allocated_player_to_act(std::string* value);

  private:
  const std::string& _internal_player_to_act() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_to_act(
      const std::string& value);
  std::string* _internal_mutable_player_to_act();

  public:
  // @@protoc_insertion_point(class_scope:PlayerToActInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      37, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PlayerToActInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PlayerToActInfo& from_msg);
    ::google::protobuf::RepeatedPtrField< ::PlayerToActInfo_ProtoPossibleAction > possible_actions_;
    ::google::protobuf::internal::ArenaStringPtr player_to_act_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texas_5fholdem_2eproto;
};
// -------------------------------------------------------------------

class PlayerCard final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PlayerCard) */ {
 public:
  inline PlayerCard() : PlayerCard(nullptr) {}
  ~PlayerCard() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlayerCard(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlayerCard(const PlayerCard& from) : PlayerCard(nullptr, from) {}
  inline PlayerCard(PlayerCard&& from) noexcept
      : PlayerCard(nullptr, std::move(from)) {}
  inline PlayerCard& operator=(const PlayerCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerCard& operator=(PlayerCard&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerCard& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerCard* internal_default_instance() {
    return reinterpret_cast<const PlayerCard*>(
        &_PlayerCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(PlayerCard& a, PlayerCard& b) { a.Swap(&b); }
  inline void Swap(PlayerCard* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerCard* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerCard* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PlayerCard>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlayerCard& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PlayerCard& from) { PlayerCard::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PlayerCard* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PlayerCard"; }

 protected:
  explicit PlayerCard(::google::protobuf::Arena* arena);
  PlayerCard(::google::protobuf::Arena* arena, const PlayerCard& from);
  PlayerCard(::google::protobuf::Arena* arena, PlayerCard&& from) noexcept
      : PlayerCard(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHoleCardsFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .ProtoCard hole_cards = 2;
  int hole_cards_size() const;
  private:
  int _internal_hole_cards_size() const;

  public:
  void clear_hole_cards() ;
  ::ProtoCard* mutable_hole_cards(int index);
  ::google::protobuf::RepeatedPtrField<::ProtoCard>* mutable_hole_cards();

  private:
  const ::google::protobuf::RepeatedPtrField<::ProtoCard>& _internal_hole_cards() const;
  ::google::protobuf::RepeatedPtrField<::ProtoCard>* _internal_mutable_hole_cards();
  public:
  const ::ProtoCard& hole_cards(int index) const;
  ::ProtoCard* add_hole_cards();
  const ::google::protobuf::RepeatedPtrField<::ProtoCard>& hole_cards() const;
  // string player_id = 1;
  void clear_player_id() ;
  const std::string& player_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_player_id(Arg_&& arg, Args_... args);
  std::string* mutable_player_id();
  PROTOBUF_NODISCARD std::string* release_player_id();
  void set_allocated_player_id(std::string* value);

  private:
  const std::string& _internal_player_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_id(
      const std::string& value);
  std::string* _internal_mutable_player_id();

  public:
  // @@protoc_insertion_point(class_scope:PlayerCard)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      28, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PlayerCard_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PlayerCard& from_msg);
    ::google::protobuf::RepeatedPtrField< ::ProtoCard > hole_cards_;
    ::google::protobuf::internal::ArenaStringPtr player_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texas_5fholdem_2eproto;
};
// -------------------------------------------------------------------

class PlayerActionInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PlayerActionInfo) */ {
 public:
  inline PlayerActionInfo() : PlayerActionInfo(nullptr) {}
  ~PlayerActionInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlayerActionInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlayerActionInfo(const PlayerActionInfo& from) : PlayerActionInfo(nullptr, from) {}
  inline PlayerActionInfo(PlayerActionInfo&& from) noexcept
      : PlayerActionInfo(nullptr, std::move(from)) {}
  inline PlayerActionInfo& operator=(const PlayerActionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerActionInfo& operator=(PlayerActionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerActionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerActionInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerActionInfo*>(
        &_PlayerActionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(PlayerActionInfo& a, PlayerActionInfo& b) { a.Swap(&b); }
  inline void Swap(PlayerActionInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerActionInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerActionInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PlayerActionInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlayerActionInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PlayerActionInfo& from) { PlayerActionInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PlayerActionInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PlayerActionInfo"; }

 protected:
  explicit PlayerActionInfo(::google::protobuf::Arena* arena);
  PlayerActionInfo(::google::protobuf::Arena* arena, const PlayerActionInfo& from);
  PlayerActionInfo(::google::protobuf::Arena* arena, PlayerActionInfo&& from) noexcept
      : PlayerActionInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using ProtoAction = PlayerActionInfo_ProtoAction;

  // accessors -------------------------------------------------------
  enum : int {
    kPlayerIdFieldNumber = 1,
    kActionFieldNumber = 2,
  };
  // string player_id = 1;
  void clear_player_id() ;
  const std::string& player_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_player_id(Arg_&& arg, Args_... args);
  std::string* mutable_player_id();
  PROTOBUF_NODISCARD std::string* release_player_id();
  void set_allocated_player_id(std::string* value);

  private:
  const std::string& _internal_player_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_id(
      const std::string& value);
  std::string* _internal_mutable_player_id();

  public:
  // .PlayerActionInfo.ProtoAction action = 2;
  bool has_action() const;
  void clear_action() ;
  const ::PlayerActionInfo_ProtoAction& action() const;
  PROTOBUF_NODISCARD ::PlayerActionInfo_ProtoAction* release_action();
  ::PlayerActionInfo_ProtoAction* mutable_action();
  void set_allocated_action(::PlayerActionInfo_ProtoAction* value);
  void unsafe_arena_set_allocated_action(::PlayerActionInfo_ProtoAction* value);
  ::PlayerActionInfo_ProtoAction* unsafe_arena_release_action();

  private:
  const ::PlayerActionInfo_ProtoAction& _internal_action() const;
  ::PlayerActionInfo_ProtoAction* _internal_mutable_action();

  public:
  // @@protoc_insertion_point(class_scope:PlayerActionInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      34, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PlayerActionInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PlayerActionInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr player_id_;
    ::PlayerActionInfo_ProtoAction* action_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texas_5fholdem_2eproto;
};
// -------------------------------------------------------------------

class DealBoardEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:DealBoardEvent) */ {
 public:
  inline DealBoardEvent() : DealBoardEvent(nullptr) {}
  ~DealBoardEvent() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DealBoardEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline DealBoardEvent(const DealBoardEvent& from) : DealBoardEvent(nullptr, from) {}
  inline DealBoardEvent(DealBoardEvent&& from) noexcept
      : DealBoardEvent(nullptr, std::move(from)) {}
  inline DealBoardEvent& operator=(const DealBoardEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline DealBoardEvent& operator=(DealBoardEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DealBoardEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const DealBoardEvent* internal_default_instance() {
    return reinterpret_cast<const DealBoardEvent*>(
        &_DealBoardEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(DealBoardEvent& a, DealBoardEvent& b) { a.Swap(&b); }
  inline void Swap(DealBoardEvent* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DealBoardEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DealBoardEvent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<DealBoardEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DealBoardEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DealBoardEvent& from) { DealBoardEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DealBoardEvent* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "DealBoardEvent"; }

 protected:
  explicit DealBoardEvent(::google::protobuf::Arena* arena);
  DealBoardEvent(::google::protobuf::Arena* arena, const DealBoardEvent& from);
  DealBoardEvent(::google::protobuf::Arena* arena, DealBoardEvent&& from) noexcept
      : DealBoardEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCommunityCardsFieldNumber = 1,
  };
  // repeated .ProtoCard community_cards = 1;
  int community_cards_size() const;
  private:
  int _internal_community_cards_size() const;

  public:
  void clear_community_cards() ;
  ::ProtoCard* mutable_community_cards(int index);
  ::google::protobuf::RepeatedPtrField<::ProtoCard>* mutable_community_cards();

  private:
  const ::google::protobuf::RepeatedPtrField<::ProtoCard>& _internal_community_cards() const;
  ::google::protobuf::RepeatedPtrField<::ProtoCard>* _internal_mutable_community_cards();
  public:
  const ::ProtoCard& community_cards(int index) const;
  ::ProtoCard* add_community_cards();
  const ::google::protobuf::RepeatedPtrField<::ProtoCard>& community_cards() const;
  // @@protoc_insertion_point(class_scope:DealBoardEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DealBoardEvent_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DealBoardEvent& from_msg);
    ::google::protobuf::RepeatedPtrField< ::ProtoCard > community_cards_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texas_5fholdem_2eproto;
};
// -------------------------------------------------------------------

class NewPlayerToActEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NewPlayerToActEvent) */ {
 public:
  inline NewPlayerToActEvent() : NewPlayerToActEvent(nullptr) {}
  ~NewPlayerToActEvent() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NewPlayerToActEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline NewPlayerToActEvent(const NewPlayerToActEvent& from) : NewPlayerToActEvent(nullptr, from) {}
  inline NewPlayerToActEvent(NewPlayerToActEvent&& from) noexcept
      : NewPlayerToActEvent(nullptr, std::move(from)) {}
  inline NewPlayerToActEvent& operator=(const NewPlayerToActEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewPlayerToActEvent& operator=(NewPlayerToActEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewPlayerToActEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewPlayerToActEvent* internal_default_instance() {
    return reinterpret_cast<const NewPlayerToActEvent*>(
        &_NewPlayerToActEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(NewPlayerToActEvent& a, NewPlayerToActEvent& b) { a.Swap(&b); }
  inline void Swap(NewPlayerToActEvent* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewPlayerToActEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewPlayerToActEvent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NewPlayerToActEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NewPlayerToActEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NewPlayerToActEvent& from) { NewPlayerToActEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NewPlayerToActEvent* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NewPlayerToActEvent"; }

 protected:
  explicit NewPlayerToActEvent(::google::protobuf::Arena* arena);
  NewPlayerToActEvent(::google::protobuf::Arena* arena, const NewPlayerToActEvent& from);
  NewPlayerToActEvent(::google::protobuf::Arena* arena, NewPlayerToActEvent&& from) noexcept
      : NewPlayerToActEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPlayerToActInfoFieldNumber = 1,
  };
  // .PlayerToActInfo player_to_act_info = 1;
  bool has_player_to_act_info() const;
  void clear_player_to_act_info() ;
  const ::PlayerToActInfo& player_to_act_info() const;
  PROTOBUF_NODISCARD ::PlayerToActInfo* release_player_to_act_info();
  ::PlayerToActInfo* mutable_player_to_act_info();
  void set_allocated_player_to_act_info(::PlayerToActInfo* value);
  void unsafe_arena_set_allocated_player_to_act_info(::PlayerToActInfo* value);
  ::PlayerToActInfo* unsafe_arena_release_player_to_act_info();

  private:
  const ::PlayerToActInfo& _internal_player_to_act_info() const;
  ::PlayerToActInfo* _internal_mutable_player_to_act_info();

  public:
  // @@protoc_insertion_point(class_scope:NewPlayerToActEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NewPlayerToActEvent_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NewPlayerToActEvent& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::PlayerToActInfo* player_to_act_info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texas_5fholdem_2eproto;
};
// -------------------------------------------------------------------

class NewPlayerActionEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NewPlayerActionEvent) */ {
 public:
  inline NewPlayerActionEvent() : NewPlayerActionEvent(nullptr) {}
  ~NewPlayerActionEvent() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NewPlayerActionEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline NewPlayerActionEvent(const NewPlayerActionEvent& from) : NewPlayerActionEvent(nullptr, from) {}
  inline NewPlayerActionEvent(NewPlayerActionEvent&& from) noexcept
      : NewPlayerActionEvent(nullptr, std::move(from)) {}
  inline NewPlayerActionEvent& operator=(const NewPlayerActionEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewPlayerActionEvent& operator=(NewPlayerActionEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewPlayerActionEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewPlayerActionEvent* internal_default_instance() {
    return reinterpret_cast<const NewPlayerActionEvent*>(
        &_NewPlayerActionEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(NewPlayerActionEvent& a, NewPlayerActionEvent& b) { a.Swap(&b); }
  inline void Swap(NewPlayerActionEvent* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewPlayerActionEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewPlayerActionEvent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NewPlayerActionEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NewPlayerActionEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NewPlayerActionEvent& from) { NewPlayerActionEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NewPlayerActionEvent* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NewPlayerActionEvent"; }

 protected:
  explicit NewPlayerActionEvent(::google::protobuf::Arena* arena);
  NewPlayerActionEvent(::google::protobuf::Arena* arena, const NewPlayerActionEvent& from);
  NewPlayerActionEvent(::google::protobuf::Arena* arena, NewPlayerActionEvent&& from) noexcept
      : NewPlayerActionEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPlayerActionInfoFieldNumber = 1,
  };
  // .PlayerActionInfo player_action_info = 1;
  bool has_player_action_info() const;
  void clear_player_action_info() ;
  const ::PlayerActionInfo& player_action_info() const;
  PROTOBUF_NODISCARD ::PlayerActionInfo* release_player_action_info();
  ::PlayerActionInfo* mutable_player_action_info();
  void set_allocated_player_action_info(::PlayerActionInfo* value);
  void unsafe_arena_set_allocated_player_action_info(::PlayerActionInfo* value);
  ::PlayerActionInfo* unsafe_arena_release_player_action_info();

  private:
  const ::PlayerActionInfo& _internal_player_action_info() const;
  ::PlayerActionInfo* _internal_mutable_player_action_info();

  public:
  // @@protoc_insertion_point(class_scope:NewPlayerActionEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NewPlayerActionEvent_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NewPlayerActionEvent& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::PlayerActionInfo* player_action_info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texas_5fholdem_2eproto;
};
// -------------------------------------------------------------------

class DealPlayersEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:DealPlayersEvent) */ {
 public:
  inline DealPlayersEvent() : DealPlayersEvent(nullptr) {}
  ~DealPlayersEvent() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DealPlayersEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline DealPlayersEvent(const DealPlayersEvent& from) : DealPlayersEvent(nullptr, from) {}
  inline DealPlayersEvent(DealPlayersEvent&& from) noexcept
      : DealPlayersEvent(nullptr, std::move(from)) {}
  inline DealPlayersEvent& operator=(const DealPlayersEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline DealPlayersEvent& operator=(DealPlayersEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DealPlayersEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const DealPlayersEvent* internal_default_instance() {
    return reinterpret_cast<const DealPlayersEvent*>(
        &_DealPlayersEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(DealPlayersEvent& a, DealPlayersEvent& b) { a.Swap(&b); }
  inline void Swap(DealPlayersEvent* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DealPlayersEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DealPlayersEvent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<DealPlayersEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DealPlayersEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DealPlayersEvent& from) { DealPlayersEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DealPlayersEvent* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "DealPlayersEvent"; }

 protected:
  explicit DealPlayersEvent(::google::protobuf::Arena* arena);
  DealPlayersEvent(::google::protobuf::Arena* arena, const DealPlayersEvent& from);
  DealPlayersEvent(::google::protobuf::Arena* arena, DealPlayersEvent&& from) noexcept
      : DealPlayersEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPlayerCardsFieldNumber = 1,
  };
  // repeated .PlayerCard player_cards = 1;
  int player_cards_size() const;
  private:
  int _internal_player_cards_size() const;

  public:
  void clear_player_cards() ;
  ::PlayerCard* mutable_player_cards(int index);
  ::google::protobuf::RepeatedPtrField<::PlayerCard>* mutable_player_cards();

  private:
  const ::google::protobuf::RepeatedPtrField<::PlayerCard>& _internal_player_cards() const;
  ::google::protobuf::RepeatedPtrField<::PlayerCard>* _internal_mutable_player_cards();
  public:
  const ::PlayerCard& player_cards(int index) const;
  ::PlayerCard* add_player_cards();
  const ::google::protobuf::RepeatedPtrField<::PlayerCard>& player_cards() const;
  // @@protoc_insertion_point(class_scope:DealPlayersEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DealPlayersEvent_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DealPlayersEvent& from_msg);
    ::google::protobuf::RepeatedPtrField< ::PlayerCard > player_cards_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texas_5fholdem_2eproto;
};
// -------------------------------------------------------------------

class GameStreamRes final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameStreamRes) */ {
 public:
  inline GameStreamRes() : GameStreamRes(nullptr) {}
  ~GameStreamRes() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameStreamRes(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameStreamRes(const GameStreamRes& from) : GameStreamRes(nullptr, from) {}
  inline GameStreamRes(GameStreamRes&& from) noexcept
      : GameStreamRes(nullptr, std::move(from)) {}
  inline GameStreamRes& operator=(const GameStreamRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameStreamRes& operator=(GameStreamRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameStreamRes& default_instance() {
    return *internal_default_instance();
  }
  enum EventCase {
    kPlayersUpdate = 1,
    kNewStreet = 2,
    kDealPlayers = 3,
    kDealBoard = 4,
    kNextPlayerToAct = 5,
    kNewPlayerAction = 6,
    kPotUpdate = 7,
    kShowdown = 8,
    kPotWinner = 9,
    EVENT_NOT_SET = 0,
  };
  static inline const GameStreamRes* internal_default_instance() {
    return reinterpret_cast<const GameStreamRes*>(
        &_GameStreamRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(GameStreamRes& a, GameStreamRes& b) { a.Swap(&b); }
  inline void Swap(GameStreamRes* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameStreamRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameStreamRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GameStreamRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameStreamRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameStreamRes& from) { GameStreamRes::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameStreamRes* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameStreamRes"; }

 protected:
  explicit GameStreamRes(::google::protobuf::Arena* arena);
  GameStreamRes(::google::protobuf::Arena* arena, const GameStreamRes& from);
  GameStreamRes(::google::protobuf::Arena* arena, GameStreamRes&& from) noexcept
      : GameStreamRes(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPlayersUpdateFieldNumber = 1,
    kNewStreetFieldNumber = 2,
    kDealPlayersFieldNumber = 3,
    kDealBoardFieldNumber = 4,
    kNextPlayerToActFieldNumber = 5,
    kNewPlayerActionFieldNumber = 6,
    kPotUpdateFieldNumber = 7,
    kShowdownFieldNumber = 8,
    kPotWinnerFieldNumber = 9,
  };
  // .PlayersUpdateEvent players_update = 1;
  bool has_players_update() const;
  private:
  bool _internal_has_players_update() const;

  public:
  void clear_players_update() ;
  const ::PlayersUpdateEvent& players_update() const;
  PROTOBUF_NODISCARD ::PlayersUpdateEvent* release_players_update();
  ::PlayersUpdateEvent* mutable_players_update();
  void set_allocated_players_update(::PlayersUpdateEvent* value);
  void unsafe_arena_set_allocated_players_update(::PlayersUpdateEvent* value);
  ::PlayersUpdateEvent* unsafe_arena_release_players_update();

  private:
  const ::PlayersUpdateEvent& _internal_players_update() const;
  ::PlayersUpdateEvent* _internal_mutable_players_update();

  public:
  // .NewStreetEvent new_street = 2;
  bool has_new_street() const;
  private:
  bool _internal_has_new_street() const;

  public:
  void clear_new_street() ;
  const ::NewStreetEvent& new_street() const;
  PROTOBUF_NODISCARD ::NewStreetEvent* release_new_street();
  ::NewStreetEvent* mutable_new_street();
  void set_allocated_new_street(::NewStreetEvent* value);
  void unsafe_arena_set_allocated_new_street(::NewStreetEvent* value);
  ::NewStreetEvent* unsafe_arena_release_new_street();

  private:
  const ::NewStreetEvent& _internal_new_street() const;
  ::NewStreetEvent* _internal_mutable_new_street();

  public:
  // .DealPlayersEvent deal_players = 3;
  bool has_deal_players() const;
  private:
  bool _internal_has_deal_players() const;

  public:
  void clear_deal_players() ;
  const ::DealPlayersEvent& deal_players() const;
  PROTOBUF_NODISCARD ::DealPlayersEvent* release_deal_players();
  ::DealPlayersEvent* mutable_deal_players();
  void set_allocated_deal_players(::DealPlayersEvent* value);
  void unsafe_arena_set_allocated_deal_players(::DealPlayersEvent* value);
  ::DealPlayersEvent* unsafe_arena_release_deal_players();

  private:
  const ::DealPlayersEvent& _internal_deal_players() const;
  ::DealPlayersEvent* _internal_mutable_deal_players();

  public:
  // .DealBoardEvent deal_board = 4;
  bool has_deal_board() const;
  private:
  bool _internal_has_deal_board() const;

  public:
  void clear_deal_board() ;
  const ::DealBoardEvent& deal_board() const;
  PROTOBUF_NODISCARD ::DealBoardEvent* release_deal_board();
  ::DealBoardEvent* mutable_deal_board();
  void set_allocated_deal_board(::DealBoardEvent* value);
  void unsafe_arena_set_allocated_deal_board(::DealBoardEvent* value);
  ::DealBoardEvent* unsafe_arena_release_deal_board();

  private:
  const ::DealBoardEvent& _internal_deal_board() const;
  ::DealBoardEvent* _internal_mutable_deal_board();

  public:
  // .NewPlayerToActEvent next_player_to_act = 5;
  bool has_next_player_to_act() const;
  private:
  bool _internal_has_next_player_to_act() const;

  public:
  void clear_next_player_to_act() ;
  const ::NewPlayerToActEvent& next_player_to_act() const;
  PROTOBUF_NODISCARD ::NewPlayerToActEvent* release_next_player_to_act();
  ::NewPlayerToActEvent* mutable_next_player_to_act();
  void set_allocated_next_player_to_act(::NewPlayerToActEvent* value);
  void unsafe_arena_set_allocated_next_player_to_act(::NewPlayerToActEvent* value);
  ::NewPlayerToActEvent* unsafe_arena_release_next_player_to_act();

  private:
  const ::NewPlayerToActEvent& _internal_next_player_to_act() const;
  ::NewPlayerToActEvent* _internal_mutable_next_player_to_act();

  public:
  // .NewPlayerActionEvent new_player_action = 6;
  bool has_new_player_action() const;
  private:
  bool _internal_has_new_player_action() const;

  public:
  void clear_new_player_action() ;
  const ::NewPlayerActionEvent& new_player_action() const;
  PROTOBUF_NODISCARD ::NewPlayerActionEvent* release_new_player_action();
  ::NewPlayerActionEvent* mutable_new_player_action();
  void set_allocated_new_player_action(::NewPlayerActionEvent* value);
  void unsafe_arena_set_allocated_new_player_action(::NewPlayerActionEvent* value);
  ::NewPlayerActionEvent* unsafe_arena_release_new_player_action();

  private:
  const ::NewPlayerActionEvent& _internal_new_player_action() const;
  ::NewPlayerActionEvent* _internal_mutable_new_player_action();

  public:
  // .PotUpdateEvent pot_update = 7;
  bool has_pot_update() const;
  private:
  bool _internal_has_pot_update() const;

  public:
  void clear_pot_update() ;
  const ::PotUpdateEvent& pot_update() const;
  PROTOBUF_NODISCARD ::PotUpdateEvent* release_pot_update();
  ::PotUpdateEvent* mutable_pot_update();
  void set_allocated_pot_update(::PotUpdateEvent* value);
  void unsafe_arena_set_allocated_pot_update(::PotUpdateEvent* value);
  ::PotUpdateEvent* unsafe_arena_release_pot_update();

  private:
  const ::PotUpdateEvent& _internal_pot_update() const;
  ::PotUpdateEvent* _internal_mutable_pot_update();

  public:
  // .ShowdownEvent showdown = 8;
  bool has_showdown() const;
  private:
  bool _internal_has_showdown() const;

  public:
  void clear_showdown() ;
  const ::ShowdownEvent& showdown() const;
  PROTOBUF_NODISCARD ::ShowdownEvent* release_showdown();
  ::ShowdownEvent* mutable_showdown();
  void set_allocated_showdown(::ShowdownEvent* value);
  void unsafe_arena_set_allocated_showdown(::ShowdownEvent* value);
  ::ShowdownEvent* unsafe_arena_release_showdown();

  private:
  const ::ShowdownEvent& _internal_showdown() const;
  ::ShowdownEvent* _internal_mutable_showdown();

  public:
  // .PotWinnerEvent pot_winner = 9;
  bool has_pot_winner() const;
  private:
  bool _internal_has_pot_winner() const;

  public:
  void clear_pot_winner() ;
  const ::PotWinnerEvent& pot_winner() const;
  PROTOBUF_NODISCARD ::PotWinnerEvent* release_pot_winner();
  ::PotWinnerEvent* mutable_pot_winner();
  void set_allocated_pot_winner(::PotWinnerEvent* value);
  void unsafe_arena_set_allocated_pot_winner(::PotWinnerEvent* value);
  ::PotWinnerEvent* unsafe_arena_release_pot_winner();

  private:
  const ::PotWinnerEvent& _internal_pot_winner() const;
  ::PotWinnerEvent* _internal_mutable_pot_winner();

  public:
  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:GameStreamRes)
 private:
  class _Internal;
  void set_has_players_update();
  void set_has_new_street();
  void set_has_deal_players();
  void set_has_deal_board();
  void set_has_next_player_to_act();
  void set_has_new_player_action();
  void set_has_pot_update();
  void set_has_showdown();
  void set_has_pot_winner();
  inline bool has_event() const;
  inline void clear_has_event();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 9, 9,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameStreamRes_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameStreamRes& from_msg);
    union EventUnion {
      constexpr EventUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::PlayersUpdateEvent* players_update_;
      ::NewStreetEvent* new_street_;
      ::DealPlayersEvent* deal_players_;
      ::DealBoardEvent* deal_board_;
      ::NewPlayerToActEvent* next_player_to_act_;
      ::NewPlayerActionEvent* new_player_action_;
      ::PotUpdateEvent* pot_update_;
      ::ShowdownEvent* showdown_;
      ::PotWinnerEvent* pot_winner_;
    } event_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texas_5fholdem_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// JoinGameReq

// string player_name = 1;
inline void JoinGameReq::clear_player_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_name_.ClearToEmpty();
}
inline const std::string& JoinGameReq::player_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:JoinGameReq.player_name)
  return _internal_player_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JoinGameReq::set_player_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:JoinGameReq.player_name)
}
inline std::string* JoinGameReq::mutable_player_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_player_name();
  // @@protoc_insertion_point(field_mutable:JoinGameReq.player_name)
  return _s;
}
inline const std::string& JoinGameReq::_internal_player_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.player_name_.Get();
}
inline void JoinGameReq::_internal_set_player_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_name_.Set(value, GetArena());
}
inline std::string* JoinGameReq::_internal_mutable_player_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.player_name_.Mutable( GetArena());
}
inline std::string* JoinGameReq::release_player_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:JoinGameReq.player_name)
  return _impl_.player_name_.Release();
}
inline void JoinGameReq::set_allocated_player_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.player_name_.IsDefault()) {
          _impl_.player_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:JoinGameReq.player_name)
}

// uint32 chips = 2;
inline void JoinGameReq::clear_chips() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chips_ = 0u;
}
inline ::uint32_t JoinGameReq::chips() const {
  // @@protoc_insertion_point(field_get:JoinGameReq.chips)
  return _internal_chips();
}
inline void JoinGameReq::set_chips(::uint32_t value) {
  _internal_set_chips(value);
  // @@protoc_insertion_point(field_set:JoinGameReq.chips)
}
inline ::uint32_t JoinGameReq::_internal_chips() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chips_;
}
inline void JoinGameReq::_internal_set_chips(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chips_ = value;
}

// -------------------------------------------------------------------

// LeaveGameReq

// string player_id = 1;
inline void LeaveGameReq::clear_player_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_id_.ClearToEmpty();
}
inline const std::string& LeaveGameReq::player_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:LeaveGameReq.player_id)
  return _internal_player_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LeaveGameReq::set_player_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:LeaveGameReq.player_id)
}
inline std::string* LeaveGameReq::mutable_player_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:LeaveGameReq.player_id)
  return _s;
}
inline const std::string& LeaveGameReq::_internal_player_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.player_id_.Get();
}
inline void LeaveGameReq::_internal_set_player_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_id_.Set(value, GetArena());
}
inline std::string* LeaveGameReq::_internal_mutable_player_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.player_id_.Mutable( GetArena());
}
inline std::string* LeaveGameReq::release_player_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:LeaveGameReq.player_id)
  return _impl_.player_id_.Release();
}
inline void LeaveGameReq::set_allocated_player_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.player_id_.IsDefault()) {
          _impl_.player_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LeaveGameReq.player_id)
}

// -------------------------------------------------------------------

// PlayerActionReq

// string player_id = 1;
inline void PlayerActionReq::clear_player_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_id_.ClearToEmpty();
}
inline const std::string& PlayerActionReq::player_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PlayerActionReq.player_id)
  return _internal_player_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlayerActionReq::set_player_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PlayerActionReq.player_id)
}
inline std::string* PlayerActionReq::mutable_player_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:PlayerActionReq.player_id)
  return _s;
}
inline const std::string& PlayerActionReq::_internal_player_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.player_id_.Get();
}
inline void PlayerActionReq::_internal_set_player_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_id_.Set(value, GetArena());
}
inline std::string* PlayerActionReq::_internal_mutable_player_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.player_id_.Mutable( GetArena());
}
inline std::string* PlayerActionReq::release_player_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PlayerActionReq.player_id)
  return _impl_.player_id_.Release();
}
inline void PlayerActionReq::set_allocated_player_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.player_id_.IsDefault()) {
          _impl_.player_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PlayerActionReq.player_id)
}

// .ProtoActionType action_type = 2;
inline void PlayerActionReq::clear_action_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_type_ = 0;
}
inline ::ProtoActionType PlayerActionReq::action_type() const {
  // @@protoc_insertion_point(field_get:PlayerActionReq.action_type)
  return _internal_action_type();
}
inline void PlayerActionReq::set_action_type(::ProtoActionType value) {
  _internal_set_action_type(value);
  // @@protoc_insertion_point(field_set:PlayerActionReq.action_type)
}
inline ::ProtoActionType PlayerActionReq::_internal_action_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ProtoActionType>(_impl_.action_type_);
}
inline void PlayerActionReq::_internal_set_action_type(::ProtoActionType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_type_ = value;
}

// uint32 action_amount = 3;
inline void PlayerActionReq::clear_action_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_amount_ = 0u;
}
inline ::uint32_t PlayerActionReq::action_amount() const {
  // @@protoc_insertion_point(field_get:PlayerActionReq.action_amount)
  return _internal_action_amount();
}
inline void PlayerActionReq::set_action_amount(::uint32_t value) {
  _internal_set_action_amount(value);
  // @@protoc_insertion_point(field_set:PlayerActionReq.action_amount)
}
inline ::uint32_t PlayerActionReq::_internal_action_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_amount_;
}
inline void PlayerActionReq::_internal_set_action_amount(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_amount_ = value;
}

// -------------------------------------------------------------------

// PlayerReqRes

// bool success = 1;
inline void PlayerReqRes::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool PlayerReqRes::success() const {
  // @@protoc_insertion_point(field_get:PlayerReqRes.success)
  return _internal_success();
}
inline void PlayerReqRes::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:PlayerReqRes.success)
}
inline bool PlayerReqRes::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void PlayerReqRes::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string player_id = 2;
inline void PlayerReqRes::clear_player_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_id_.ClearToEmpty();
}
inline const std::string& PlayerReqRes::player_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PlayerReqRes.player_id)
  return _internal_player_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlayerReqRes::set_player_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PlayerReqRes.player_id)
}
inline std::string* PlayerReqRes::mutable_player_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:PlayerReqRes.player_id)
  return _s;
}
inline const std::string& PlayerReqRes::_internal_player_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.player_id_.Get();
}
inline void PlayerReqRes::_internal_set_player_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_id_.Set(value, GetArena());
}
inline std::string* PlayerReqRes::_internal_mutable_player_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.player_id_.Mutable( GetArena());
}
inline std::string* PlayerReqRes::release_player_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PlayerReqRes.player_id)
  return _impl_.player_id_.Release();
}
inline void PlayerReqRes::set_allocated_player_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.player_id_.IsDefault()) {
          _impl_.player_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PlayerReqRes.player_id)
}

// string server_message = 3;
inline void PlayerReqRes::clear_server_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_message_.ClearToEmpty();
}
inline const std::string& PlayerReqRes::server_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PlayerReqRes.server_message)
  return _internal_server_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlayerReqRes::set_server_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PlayerReqRes.server_message)
}
inline std::string* PlayerReqRes::mutable_server_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_server_message();
  // @@protoc_insertion_point(field_mutable:PlayerReqRes.server_message)
  return _s;
}
inline const std::string& PlayerReqRes::_internal_server_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.server_message_.Get();
}
inline void PlayerReqRes::_internal_set_server_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_message_.Set(value, GetArena());
}
inline std::string* PlayerReqRes::_internal_mutable_server_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.server_message_.Mutable( GetArena());
}
inline std::string* PlayerReqRes::release_server_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PlayerReqRes.server_message)
  return _impl_.server_message_.Release();
}
inline void PlayerReqRes::set_allocated_server_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.server_message_.IsDefault()) {
          _impl_.server_message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PlayerReqRes.server_message)
}

// -------------------------------------------------------------------

// GameStreamReq

// string player_id = 1;
inline void GameStreamReq::clear_player_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_id_.ClearToEmpty();
}
inline const std::string& GameStreamReq::player_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameStreamReq.player_id)
  return _internal_player_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GameStreamReq::set_player_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GameStreamReq.player_id)
}
inline std::string* GameStreamReq::mutable_player_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:GameStreamReq.player_id)
  return _s;
}
inline const std::string& GameStreamReq::_internal_player_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.player_id_.Get();
}
inline void GameStreamReq::_internal_set_player_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_id_.Set(value, GetArena());
}
inline std::string* GameStreamReq::_internal_mutable_player_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.player_id_.Mutable( GetArena());
}
inline std::string* GameStreamReq::release_player_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameStreamReq.player_id)
  return _impl_.player_id_.Release();
}
inline void GameStreamReq::set_allocated_player_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.player_id_.IsDefault()) {
          _impl_.player_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GameStreamReq.player_id)
}

// -------------------------------------------------------------------

// GameStreamRes

// .PlayersUpdateEvent players_update = 1;
inline bool GameStreamRes::has_players_update() const {
  return event_case() == kPlayersUpdate;
}
inline bool GameStreamRes::_internal_has_players_update() const {
  return event_case() == kPlayersUpdate;
}
inline void GameStreamRes::set_has_players_update() {
  _impl_._oneof_case_[0] = kPlayersUpdate;
}
inline void GameStreamRes::clear_players_update() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kPlayersUpdate) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.players_update_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.players_update_);
    }
    clear_has_event();
  }
}
inline ::PlayersUpdateEvent* GameStreamRes::release_players_update() {
  // @@protoc_insertion_point(field_release:GameStreamRes.players_update)
  if (event_case() == kPlayersUpdate) {
    clear_has_event();
    auto* temp = _impl_.event_.players_update_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.players_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PlayersUpdateEvent& GameStreamRes::_internal_players_update() const {
  return event_case() == kPlayersUpdate ? *_impl_.event_.players_update_ : reinterpret_cast<::PlayersUpdateEvent&>(::_PlayersUpdateEvent_default_instance_);
}
inline const ::PlayersUpdateEvent& GameStreamRes::players_update() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameStreamRes.players_update)
  return _internal_players_update();
}
inline ::PlayersUpdateEvent* GameStreamRes::unsafe_arena_release_players_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameStreamRes.players_update)
  if (event_case() == kPlayersUpdate) {
    clear_has_event();
    auto* temp = _impl_.event_.players_update_;
    _impl_.event_.players_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameStreamRes::unsafe_arena_set_allocated_players_update(::PlayersUpdateEvent* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_players_update();
    _impl_.event_.players_update_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameStreamRes.players_update)
}
inline ::PlayersUpdateEvent* GameStreamRes::_internal_mutable_players_update() {
  if (event_case() != kPlayersUpdate) {
    clear_event();
    set_has_players_update();
    _impl_.event_.players_update_ =
        ::google::protobuf::Message::DefaultConstruct<::PlayersUpdateEvent>(GetArena());
  }
  return _impl_.event_.players_update_;
}
inline ::PlayersUpdateEvent* GameStreamRes::mutable_players_update() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::PlayersUpdateEvent* _msg = _internal_mutable_players_update();
  // @@protoc_insertion_point(field_mutable:GameStreamRes.players_update)
  return _msg;
}

// .NewStreetEvent new_street = 2;
inline bool GameStreamRes::has_new_street() const {
  return event_case() == kNewStreet;
}
inline bool GameStreamRes::_internal_has_new_street() const {
  return event_case() == kNewStreet;
}
inline void GameStreamRes::set_has_new_street() {
  _impl_._oneof_case_[0] = kNewStreet;
}
inline void GameStreamRes::clear_new_street() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kNewStreet) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.new_street_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.new_street_);
    }
    clear_has_event();
  }
}
inline ::NewStreetEvent* GameStreamRes::release_new_street() {
  // @@protoc_insertion_point(field_release:GameStreamRes.new_street)
  if (event_case() == kNewStreet) {
    clear_has_event();
    auto* temp = _impl_.event_.new_street_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.new_street_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NewStreetEvent& GameStreamRes::_internal_new_street() const {
  return event_case() == kNewStreet ? *_impl_.event_.new_street_ : reinterpret_cast<::NewStreetEvent&>(::_NewStreetEvent_default_instance_);
}
inline const ::NewStreetEvent& GameStreamRes::new_street() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameStreamRes.new_street)
  return _internal_new_street();
}
inline ::NewStreetEvent* GameStreamRes::unsafe_arena_release_new_street() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameStreamRes.new_street)
  if (event_case() == kNewStreet) {
    clear_has_event();
    auto* temp = _impl_.event_.new_street_;
    _impl_.event_.new_street_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameStreamRes::unsafe_arena_set_allocated_new_street(::NewStreetEvent* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_new_street();
    _impl_.event_.new_street_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameStreamRes.new_street)
}
inline ::NewStreetEvent* GameStreamRes::_internal_mutable_new_street() {
  if (event_case() != kNewStreet) {
    clear_event();
    set_has_new_street();
    _impl_.event_.new_street_ =
        ::google::protobuf::Message::DefaultConstruct<::NewStreetEvent>(GetArena());
  }
  return _impl_.event_.new_street_;
}
inline ::NewStreetEvent* GameStreamRes::mutable_new_street() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::NewStreetEvent* _msg = _internal_mutable_new_street();
  // @@protoc_insertion_point(field_mutable:GameStreamRes.new_street)
  return _msg;
}

// .DealPlayersEvent deal_players = 3;
inline bool GameStreamRes::has_deal_players() const {
  return event_case() == kDealPlayers;
}
inline bool GameStreamRes::_internal_has_deal_players() const {
  return event_case() == kDealPlayers;
}
inline void GameStreamRes::set_has_deal_players() {
  _impl_._oneof_case_[0] = kDealPlayers;
}
inline void GameStreamRes::clear_deal_players() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kDealPlayers) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.deal_players_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.deal_players_);
    }
    clear_has_event();
  }
}
inline ::DealPlayersEvent* GameStreamRes::release_deal_players() {
  // @@protoc_insertion_point(field_release:GameStreamRes.deal_players)
  if (event_case() == kDealPlayers) {
    clear_has_event();
    auto* temp = _impl_.event_.deal_players_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.deal_players_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DealPlayersEvent& GameStreamRes::_internal_deal_players() const {
  return event_case() == kDealPlayers ? *_impl_.event_.deal_players_ : reinterpret_cast<::DealPlayersEvent&>(::_DealPlayersEvent_default_instance_);
}
inline const ::DealPlayersEvent& GameStreamRes::deal_players() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameStreamRes.deal_players)
  return _internal_deal_players();
}
inline ::DealPlayersEvent* GameStreamRes::unsafe_arena_release_deal_players() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameStreamRes.deal_players)
  if (event_case() == kDealPlayers) {
    clear_has_event();
    auto* temp = _impl_.event_.deal_players_;
    _impl_.event_.deal_players_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameStreamRes::unsafe_arena_set_allocated_deal_players(::DealPlayersEvent* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_deal_players();
    _impl_.event_.deal_players_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameStreamRes.deal_players)
}
inline ::DealPlayersEvent* GameStreamRes::_internal_mutable_deal_players() {
  if (event_case() != kDealPlayers) {
    clear_event();
    set_has_deal_players();
    _impl_.event_.deal_players_ =
        ::google::protobuf::Message::DefaultConstruct<::DealPlayersEvent>(GetArena());
  }
  return _impl_.event_.deal_players_;
}
inline ::DealPlayersEvent* GameStreamRes::mutable_deal_players() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::DealPlayersEvent* _msg = _internal_mutable_deal_players();
  // @@protoc_insertion_point(field_mutable:GameStreamRes.deal_players)
  return _msg;
}

// .DealBoardEvent deal_board = 4;
inline bool GameStreamRes::has_deal_board() const {
  return event_case() == kDealBoard;
}
inline bool GameStreamRes::_internal_has_deal_board() const {
  return event_case() == kDealBoard;
}
inline void GameStreamRes::set_has_deal_board() {
  _impl_._oneof_case_[0] = kDealBoard;
}
inline void GameStreamRes::clear_deal_board() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kDealBoard) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.deal_board_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.deal_board_);
    }
    clear_has_event();
  }
}
inline ::DealBoardEvent* GameStreamRes::release_deal_board() {
  // @@protoc_insertion_point(field_release:GameStreamRes.deal_board)
  if (event_case() == kDealBoard) {
    clear_has_event();
    auto* temp = _impl_.event_.deal_board_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.deal_board_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DealBoardEvent& GameStreamRes::_internal_deal_board() const {
  return event_case() == kDealBoard ? *_impl_.event_.deal_board_ : reinterpret_cast<::DealBoardEvent&>(::_DealBoardEvent_default_instance_);
}
inline const ::DealBoardEvent& GameStreamRes::deal_board() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameStreamRes.deal_board)
  return _internal_deal_board();
}
inline ::DealBoardEvent* GameStreamRes::unsafe_arena_release_deal_board() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameStreamRes.deal_board)
  if (event_case() == kDealBoard) {
    clear_has_event();
    auto* temp = _impl_.event_.deal_board_;
    _impl_.event_.deal_board_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameStreamRes::unsafe_arena_set_allocated_deal_board(::DealBoardEvent* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_deal_board();
    _impl_.event_.deal_board_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameStreamRes.deal_board)
}
inline ::DealBoardEvent* GameStreamRes::_internal_mutable_deal_board() {
  if (event_case() != kDealBoard) {
    clear_event();
    set_has_deal_board();
    _impl_.event_.deal_board_ =
        ::google::protobuf::Message::DefaultConstruct<::DealBoardEvent>(GetArena());
  }
  return _impl_.event_.deal_board_;
}
inline ::DealBoardEvent* GameStreamRes::mutable_deal_board() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::DealBoardEvent* _msg = _internal_mutable_deal_board();
  // @@protoc_insertion_point(field_mutable:GameStreamRes.deal_board)
  return _msg;
}

// .NewPlayerToActEvent next_player_to_act = 5;
inline bool GameStreamRes::has_next_player_to_act() const {
  return event_case() == kNextPlayerToAct;
}
inline bool GameStreamRes::_internal_has_next_player_to_act() const {
  return event_case() == kNextPlayerToAct;
}
inline void GameStreamRes::set_has_next_player_to_act() {
  _impl_._oneof_case_[0] = kNextPlayerToAct;
}
inline void GameStreamRes::clear_next_player_to_act() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kNextPlayerToAct) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.next_player_to_act_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.next_player_to_act_);
    }
    clear_has_event();
  }
}
inline ::NewPlayerToActEvent* GameStreamRes::release_next_player_to_act() {
  // @@protoc_insertion_point(field_release:GameStreamRes.next_player_to_act)
  if (event_case() == kNextPlayerToAct) {
    clear_has_event();
    auto* temp = _impl_.event_.next_player_to_act_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.next_player_to_act_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NewPlayerToActEvent& GameStreamRes::_internal_next_player_to_act() const {
  return event_case() == kNextPlayerToAct ? *_impl_.event_.next_player_to_act_ : reinterpret_cast<::NewPlayerToActEvent&>(::_NewPlayerToActEvent_default_instance_);
}
inline const ::NewPlayerToActEvent& GameStreamRes::next_player_to_act() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameStreamRes.next_player_to_act)
  return _internal_next_player_to_act();
}
inline ::NewPlayerToActEvent* GameStreamRes::unsafe_arena_release_next_player_to_act() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameStreamRes.next_player_to_act)
  if (event_case() == kNextPlayerToAct) {
    clear_has_event();
    auto* temp = _impl_.event_.next_player_to_act_;
    _impl_.event_.next_player_to_act_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameStreamRes::unsafe_arena_set_allocated_next_player_to_act(::NewPlayerToActEvent* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_next_player_to_act();
    _impl_.event_.next_player_to_act_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameStreamRes.next_player_to_act)
}
inline ::NewPlayerToActEvent* GameStreamRes::_internal_mutable_next_player_to_act() {
  if (event_case() != kNextPlayerToAct) {
    clear_event();
    set_has_next_player_to_act();
    _impl_.event_.next_player_to_act_ =
        ::google::protobuf::Message::DefaultConstruct<::NewPlayerToActEvent>(GetArena());
  }
  return _impl_.event_.next_player_to_act_;
}
inline ::NewPlayerToActEvent* GameStreamRes::mutable_next_player_to_act() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::NewPlayerToActEvent* _msg = _internal_mutable_next_player_to_act();
  // @@protoc_insertion_point(field_mutable:GameStreamRes.next_player_to_act)
  return _msg;
}

// .NewPlayerActionEvent new_player_action = 6;
inline bool GameStreamRes::has_new_player_action() const {
  return event_case() == kNewPlayerAction;
}
inline bool GameStreamRes::_internal_has_new_player_action() const {
  return event_case() == kNewPlayerAction;
}
inline void GameStreamRes::set_has_new_player_action() {
  _impl_._oneof_case_[0] = kNewPlayerAction;
}
inline void GameStreamRes::clear_new_player_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kNewPlayerAction) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.new_player_action_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.new_player_action_);
    }
    clear_has_event();
  }
}
inline ::NewPlayerActionEvent* GameStreamRes::release_new_player_action() {
  // @@protoc_insertion_point(field_release:GameStreamRes.new_player_action)
  if (event_case() == kNewPlayerAction) {
    clear_has_event();
    auto* temp = _impl_.event_.new_player_action_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.new_player_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NewPlayerActionEvent& GameStreamRes::_internal_new_player_action() const {
  return event_case() == kNewPlayerAction ? *_impl_.event_.new_player_action_ : reinterpret_cast<::NewPlayerActionEvent&>(::_NewPlayerActionEvent_default_instance_);
}
inline const ::NewPlayerActionEvent& GameStreamRes::new_player_action() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameStreamRes.new_player_action)
  return _internal_new_player_action();
}
inline ::NewPlayerActionEvent* GameStreamRes::unsafe_arena_release_new_player_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameStreamRes.new_player_action)
  if (event_case() == kNewPlayerAction) {
    clear_has_event();
    auto* temp = _impl_.event_.new_player_action_;
    _impl_.event_.new_player_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameStreamRes::unsafe_arena_set_allocated_new_player_action(::NewPlayerActionEvent* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_new_player_action();
    _impl_.event_.new_player_action_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameStreamRes.new_player_action)
}
inline ::NewPlayerActionEvent* GameStreamRes::_internal_mutable_new_player_action() {
  if (event_case() != kNewPlayerAction) {
    clear_event();
    set_has_new_player_action();
    _impl_.event_.new_player_action_ =
        ::google::protobuf::Message::DefaultConstruct<::NewPlayerActionEvent>(GetArena());
  }
  return _impl_.event_.new_player_action_;
}
inline ::NewPlayerActionEvent* GameStreamRes::mutable_new_player_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::NewPlayerActionEvent* _msg = _internal_mutable_new_player_action();
  // @@protoc_insertion_point(field_mutable:GameStreamRes.new_player_action)
  return _msg;
}

// .PotUpdateEvent pot_update = 7;
inline bool GameStreamRes::has_pot_update() const {
  return event_case() == kPotUpdate;
}
inline bool GameStreamRes::_internal_has_pot_update() const {
  return event_case() == kPotUpdate;
}
inline void GameStreamRes::set_has_pot_update() {
  _impl_._oneof_case_[0] = kPotUpdate;
}
inline void GameStreamRes::clear_pot_update() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kPotUpdate) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.pot_update_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.pot_update_);
    }
    clear_has_event();
  }
}
inline ::PotUpdateEvent* GameStreamRes::release_pot_update() {
  // @@protoc_insertion_point(field_release:GameStreamRes.pot_update)
  if (event_case() == kPotUpdate) {
    clear_has_event();
    auto* temp = _impl_.event_.pot_update_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.pot_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PotUpdateEvent& GameStreamRes::_internal_pot_update() const {
  return event_case() == kPotUpdate ? *_impl_.event_.pot_update_ : reinterpret_cast<::PotUpdateEvent&>(::_PotUpdateEvent_default_instance_);
}
inline const ::PotUpdateEvent& GameStreamRes::pot_update() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameStreamRes.pot_update)
  return _internal_pot_update();
}
inline ::PotUpdateEvent* GameStreamRes::unsafe_arena_release_pot_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameStreamRes.pot_update)
  if (event_case() == kPotUpdate) {
    clear_has_event();
    auto* temp = _impl_.event_.pot_update_;
    _impl_.event_.pot_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameStreamRes::unsafe_arena_set_allocated_pot_update(::PotUpdateEvent* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_pot_update();
    _impl_.event_.pot_update_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameStreamRes.pot_update)
}
inline ::PotUpdateEvent* GameStreamRes::_internal_mutable_pot_update() {
  if (event_case() != kPotUpdate) {
    clear_event();
    set_has_pot_update();
    _impl_.event_.pot_update_ =
        ::google::protobuf::Message::DefaultConstruct<::PotUpdateEvent>(GetArena());
  }
  return _impl_.event_.pot_update_;
}
inline ::PotUpdateEvent* GameStreamRes::mutable_pot_update() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::PotUpdateEvent* _msg = _internal_mutable_pot_update();
  // @@protoc_insertion_point(field_mutable:GameStreamRes.pot_update)
  return _msg;
}

// .ShowdownEvent showdown = 8;
inline bool GameStreamRes::has_showdown() const {
  return event_case() == kShowdown;
}
inline bool GameStreamRes::_internal_has_showdown() const {
  return event_case() == kShowdown;
}
inline void GameStreamRes::set_has_showdown() {
  _impl_._oneof_case_[0] = kShowdown;
}
inline void GameStreamRes::clear_showdown() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kShowdown) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.showdown_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.showdown_);
    }
    clear_has_event();
  }
}
inline ::ShowdownEvent* GameStreamRes::release_showdown() {
  // @@protoc_insertion_point(field_release:GameStreamRes.showdown)
  if (event_case() == kShowdown) {
    clear_has_event();
    auto* temp = _impl_.event_.showdown_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.showdown_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ShowdownEvent& GameStreamRes::_internal_showdown() const {
  return event_case() == kShowdown ? *_impl_.event_.showdown_ : reinterpret_cast<::ShowdownEvent&>(::_ShowdownEvent_default_instance_);
}
inline const ::ShowdownEvent& GameStreamRes::showdown() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameStreamRes.showdown)
  return _internal_showdown();
}
inline ::ShowdownEvent* GameStreamRes::unsafe_arena_release_showdown() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameStreamRes.showdown)
  if (event_case() == kShowdown) {
    clear_has_event();
    auto* temp = _impl_.event_.showdown_;
    _impl_.event_.showdown_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameStreamRes::unsafe_arena_set_allocated_showdown(::ShowdownEvent* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_showdown();
    _impl_.event_.showdown_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameStreamRes.showdown)
}
inline ::ShowdownEvent* GameStreamRes::_internal_mutable_showdown() {
  if (event_case() != kShowdown) {
    clear_event();
    set_has_showdown();
    _impl_.event_.showdown_ =
        ::google::protobuf::Message::DefaultConstruct<::ShowdownEvent>(GetArena());
  }
  return _impl_.event_.showdown_;
}
inline ::ShowdownEvent* GameStreamRes::mutable_showdown() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ShowdownEvent* _msg = _internal_mutable_showdown();
  // @@protoc_insertion_point(field_mutable:GameStreamRes.showdown)
  return _msg;
}

// .PotWinnerEvent pot_winner = 9;
inline bool GameStreamRes::has_pot_winner() const {
  return event_case() == kPotWinner;
}
inline bool GameStreamRes::_internal_has_pot_winner() const {
  return event_case() == kPotWinner;
}
inline void GameStreamRes::set_has_pot_winner() {
  _impl_._oneof_case_[0] = kPotWinner;
}
inline void GameStreamRes::clear_pot_winner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kPotWinner) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.pot_winner_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.pot_winner_);
    }
    clear_has_event();
  }
}
inline ::PotWinnerEvent* GameStreamRes::release_pot_winner() {
  // @@protoc_insertion_point(field_release:GameStreamRes.pot_winner)
  if (event_case() == kPotWinner) {
    clear_has_event();
    auto* temp = _impl_.event_.pot_winner_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.pot_winner_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PotWinnerEvent& GameStreamRes::_internal_pot_winner() const {
  return event_case() == kPotWinner ? *_impl_.event_.pot_winner_ : reinterpret_cast<::PotWinnerEvent&>(::_PotWinnerEvent_default_instance_);
}
inline const ::PotWinnerEvent& GameStreamRes::pot_winner() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameStreamRes.pot_winner)
  return _internal_pot_winner();
}
inline ::PotWinnerEvent* GameStreamRes::unsafe_arena_release_pot_winner() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameStreamRes.pot_winner)
  if (event_case() == kPotWinner) {
    clear_has_event();
    auto* temp = _impl_.event_.pot_winner_;
    _impl_.event_.pot_winner_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameStreamRes::unsafe_arena_set_allocated_pot_winner(::PotWinnerEvent* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_pot_winner();
    _impl_.event_.pot_winner_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameStreamRes.pot_winner)
}
inline ::PotWinnerEvent* GameStreamRes::_internal_mutable_pot_winner() {
  if (event_case() != kPotWinner) {
    clear_event();
    set_has_pot_winner();
    _impl_.event_.pot_winner_ =
        ::google::protobuf::Message::DefaultConstruct<::PotWinnerEvent>(GetArena());
  }
  return _impl_.event_.pot_winner_;
}
inline ::PotWinnerEvent* GameStreamRes::mutable_pot_winner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::PotWinnerEvent* _msg = _internal_mutable_pot_winner();
  // @@protoc_insertion_point(field_mutable:GameStreamRes.pot_winner)
  return _msg;
}

inline bool GameStreamRes::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void GameStreamRes::clear_has_event() {
  _impl_._oneof_case_[0] = EVENT_NOT_SET;
}
inline GameStreamRes::EventCase GameStreamRes::event_case() const {
  return GameStreamRes::EventCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// PlayersUpdateEvent

// repeated .ProtoPlayer new_players = 1;
inline int PlayersUpdateEvent::_internal_new_players_size() const {
  return _internal_new_players().size();
}
inline int PlayersUpdateEvent::new_players_size() const {
  return _internal_new_players_size();
}
inline void PlayersUpdateEvent::clear_new_players() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_players_.Clear();
}
inline ::ProtoPlayer* PlayersUpdateEvent::mutable_new_players(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:PlayersUpdateEvent.new_players)
  return _internal_mutable_new_players()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ProtoPlayer>* PlayersUpdateEvent::mutable_new_players()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:PlayersUpdateEvent.new_players)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_new_players();
}
inline const ::ProtoPlayer& PlayersUpdateEvent::new_players(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PlayersUpdateEvent.new_players)
  return _internal_new_players().Get(index);
}
inline ::ProtoPlayer* PlayersUpdateEvent::add_new_players() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::ProtoPlayer* _add = _internal_mutable_new_players()->Add();
  // @@protoc_insertion_point(field_add:PlayersUpdateEvent.new_players)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ProtoPlayer>& PlayersUpdateEvent::new_players() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:PlayersUpdateEvent.new_players)
  return _internal_new_players();
}
inline const ::google::protobuf::RepeatedPtrField<::ProtoPlayer>&
PlayersUpdateEvent::_internal_new_players() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_players_;
}
inline ::google::protobuf::RepeatedPtrField<::ProtoPlayer>*
PlayersUpdateEvent::_internal_mutable_new_players() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.new_players_;
}

// -------------------------------------------------------------------

// NewStreetEvent

// .ProtoStreet new_street = 1;
inline void NewStreetEvent::clear_new_street() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_street_ = 0;
}
inline ::ProtoStreet NewStreetEvent::new_street() const {
  // @@protoc_insertion_point(field_get:NewStreetEvent.new_street)
  return _internal_new_street();
}
inline void NewStreetEvent::set_new_street(::ProtoStreet value) {
  _internal_set_new_street(value);
  // @@protoc_insertion_point(field_set:NewStreetEvent.new_street)
}
inline ::ProtoStreet NewStreetEvent::_internal_new_street() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ProtoStreet>(_impl_.new_street_);
}
inline void NewStreetEvent::_internal_set_new_street(::ProtoStreet value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_street_ = value;
}

// -------------------------------------------------------------------

// DealPlayersEvent

// repeated .PlayerCard player_cards = 1;
inline int DealPlayersEvent::_internal_player_cards_size() const {
  return _internal_player_cards().size();
}
inline int DealPlayersEvent::player_cards_size() const {
  return _internal_player_cards_size();
}
inline void DealPlayersEvent::clear_player_cards() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_cards_.Clear();
}
inline ::PlayerCard* DealPlayersEvent::mutable_player_cards(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:DealPlayersEvent.player_cards)
  return _internal_mutable_player_cards()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::PlayerCard>* DealPlayersEvent::mutable_player_cards()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:DealPlayersEvent.player_cards)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_player_cards();
}
inline const ::PlayerCard& DealPlayersEvent::player_cards(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DealPlayersEvent.player_cards)
  return _internal_player_cards().Get(index);
}
inline ::PlayerCard* DealPlayersEvent::add_player_cards() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::PlayerCard* _add = _internal_mutable_player_cards()->Add();
  // @@protoc_insertion_point(field_add:DealPlayersEvent.player_cards)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::PlayerCard>& DealPlayersEvent::player_cards() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:DealPlayersEvent.player_cards)
  return _internal_player_cards();
}
inline const ::google::protobuf::RepeatedPtrField<::PlayerCard>&
DealPlayersEvent::_internal_player_cards() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.player_cards_;
}
inline ::google::protobuf::RepeatedPtrField<::PlayerCard>*
DealPlayersEvent::_internal_mutable_player_cards() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.player_cards_;
}

// -------------------------------------------------------------------

// DealBoardEvent

// repeated .ProtoCard community_cards = 1;
inline int DealBoardEvent::_internal_community_cards_size() const {
  return _internal_community_cards().size();
}
inline int DealBoardEvent::community_cards_size() const {
  return _internal_community_cards_size();
}
inline void DealBoardEvent::clear_community_cards() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.community_cards_.Clear();
}
inline ::ProtoCard* DealBoardEvent::mutable_community_cards(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:DealBoardEvent.community_cards)
  return _internal_mutable_community_cards()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ProtoCard>* DealBoardEvent::mutable_community_cards()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:DealBoardEvent.community_cards)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_community_cards();
}
inline const ::ProtoCard& DealBoardEvent::community_cards(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DealBoardEvent.community_cards)
  return _internal_community_cards().Get(index);
}
inline ::ProtoCard* DealBoardEvent::add_community_cards() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::ProtoCard* _add = _internal_mutable_community_cards()->Add();
  // @@protoc_insertion_point(field_add:DealBoardEvent.community_cards)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ProtoCard>& DealBoardEvent::community_cards() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:DealBoardEvent.community_cards)
  return _internal_community_cards();
}
inline const ::google::protobuf::RepeatedPtrField<::ProtoCard>&
DealBoardEvent::_internal_community_cards() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.community_cards_;
}
inline ::google::protobuf::RepeatedPtrField<::ProtoCard>*
DealBoardEvent::_internal_mutable_community_cards() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.community_cards_;
}

// -------------------------------------------------------------------

// NewPlayerToActEvent

// .PlayerToActInfo player_to_act_info = 1;
inline bool NewPlayerToActEvent::has_player_to_act_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.player_to_act_info_ != nullptr);
  return value;
}
inline void NewPlayerToActEvent::clear_player_to_act_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.player_to_act_info_ != nullptr) _impl_.player_to_act_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::PlayerToActInfo& NewPlayerToActEvent::_internal_player_to_act_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::PlayerToActInfo* p = _impl_.player_to_act_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlayerToActInfo&>(::_PlayerToActInfo_default_instance_);
}
inline const ::PlayerToActInfo& NewPlayerToActEvent::player_to_act_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NewPlayerToActEvent.player_to_act_info)
  return _internal_player_to_act_info();
}
inline void NewPlayerToActEvent::unsafe_arena_set_allocated_player_to_act_info(::PlayerToActInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.player_to_act_info_);
  }
  _impl_.player_to_act_info_ = reinterpret_cast<::PlayerToActInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NewPlayerToActEvent.player_to_act_info)
}
inline ::PlayerToActInfo* NewPlayerToActEvent::release_player_to_act_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PlayerToActInfo* released = _impl_.player_to_act_info_;
  _impl_.player_to_act_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::PlayerToActInfo* NewPlayerToActEvent::unsafe_arena_release_player_to_act_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NewPlayerToActEvent.player_to_act_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PlayerToActInfo* temp = _impl_.player_to_act_info_;
  _impl_.player_to_act_info_ = nullptr;
  return temp;
}
inline ::PlayerToActInfo* NewPlayerToActEvent::_internal_mutable_player_to_act_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.player_to_act_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::PlayerToActInfo>(GetArena());
    _impl_.player_to_act_info_ = reinterpret_cast<::PlayerToActInfo*>(p);
  }
  return _impl_.player_to_act_info_;
}
inline ::PlayerToActInfo* NewPlayerToActEvent::mutable_player_to_act_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::PlayerToActInfo* _msg = _internal_mutable_player_to_act_info();
  // @@protoc_insertion_point(field_mutable:NewPlayerToActEvent.player_to_act_info)
  return _msg;
}
inline void NewPlayerToActEvent::set_allocated_player_to_act_info(::PlayerToActInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.player_to_act_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.player_to_act_info_ = reinterpret_cast<::PlayerToActInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:NewPlayerToActEvent.player_to_act_info)
}

// -------------------------------------------------------------------

// NewPlayerActionEvent

// .PlayerActionInfo player_action_info = 1;
inline bool NewPlayerActionEvent::has_player_action_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.player_action_info_ != nullptr);
  return value;
}
inline void NewPlayerActionEvent::clear_player_action_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.player_action_info_ != nullptr) _impl_.player_action_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::PlayerActionInfo& NewPlayerActionEvent::_internal_player_action_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::PlayerActionInfo* p = _impl_.player_action_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlayerActionInfo&>(::_PlayerActionInfo_default_instance_);
}
inline const ::PlayerActionInfo& NewPlayerActionEvent::player_action_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NewPlayerActionEvent.player_action_info)
  return _internal_player_action_info();
}
inline void NewPlayerActionEvent::unsafe_arena_set_allocated_player_action_info(::PlayerActionInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.player_action_info_);
  }
  _impl_.player_action_info_ = reinterpret_cast<::PlayerActionInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NewPlayerActionEvent.player_action_info)
}
inline ::PlayerActionInfo* NewPlayerActionEvent::release_player_action_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PlayerActionInfo* released = _impl_.player_action_info_;
  _impl_.player_action_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::PlayerActionInfo* NewPlayerActionEvent::unsafe_arena_release_player_action_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NewPlayerActionEvent.player_action_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PlayerActionInfo* temp = _impl_.player_action_info_;
  _impl_.player_action_info_ = nullptr;
  return temp;
}
inline ::PlayerActionInfo* NewPlayerActionEvent::_internal_mutable_player_action_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.player_action_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::PlayerActionInfo>(GetArena());
    _impl_.player_action_info_ = reinterpret_cast<::PlayerActionInfo*>(p);
  }
  return _impl_.player_action_info_;
}
inline ::PlayerActionInfo* NewPlayerActionEvent::mutable_player_action_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::PlayerActionInfo* _msg = _internal_mutable_player_action_info();
  // @@protoc_insertion_point(field_mutable:NewPlayerActionEvent.player_action_info)
  return _msg;
}
inline void NewPlayerActionEvent::set_allocated_player_action_info(::PlayerActionInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.player_action_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.player_action_info_ = reinterpret_cast<::PlayerActionInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:NewPlayerActionEvent.player_action_info)
}

// -------------------------------------------------------------------

// PotUpdateEvent

// repeated .ProtoPot updated_pots = 1;
inline int PotUpdateEvent::_internal_updated_pots_size() const {
  return _internal_updated_pots().size();
}
inline int PotUpdateEvent::updated_pots_size() const {
  return _internal_updated_pots_size();
}
inline void PotUpdateEvent::clear_updated_pots() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.updated_pots_.Clear();
}
inline ::ProtoPot* PotUpdateEvent::mutable_updated_pots(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:PotUpdateEvent.updated_pots)
  return _internal_mutable_updated_pots()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ProtoPot>* PotUpdateEvent::mutable_updated_pots()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:PotUpdateEvent.updated_pots)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_updated_pots();
}
inline const ::ProtoPot& PotUpdateEvent::updated_pots(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PotUpdateEvent.updated_pots)
  return _internal_updated_pots().Get(index);
}
inline ::ProtoPot* PotUpdateEvent::add_updated_pots() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::ProtoPot* _add = _internal_mutable_updated_pots()->Add();
  // @@protoc_insertion_point(field_add:PotUpdateEvent.updated_pots)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ProtoPot>& PotUpdateEvent::updated_pots() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:PotUpdateEvent.updated_pots)
  return _internal_updated_pots();
}
inline const ::google::protobuf::RepeatedPtrField<::ProtoPot>&
PotUpdateEvent::_internal_updated_pots() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.updated_pots_;
}
inline ::google::protobuf::RepeatedPtrField<::ProtoPot>*
PotUpdateEvent::_internal_mutable_updated_pots() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.updated_pots_;
}

// -------------------------------------------------------------------

// ShowdownEvent

// repeated string players_in_hand = 1;
inline int ShowdownEvent::_internal_players_in_hand_size() const {
  return _internal_players_in_hand().size();
}
inline int ShowdownEvent::players_in_hand_size() const {
  return _internal_players_in_hand_size();
}
inline void ShowdownEvent::clear_players_in_hand() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.players_in_hand_.Clear();
}
inline std::string* ShowdownEvent::add_players_in_hand()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_players_in_hand()->Add();
  // @@protoc_insertion_point(field_add_mutable:ShowdownEvent.players_in_hand)
  return _s;
}
inline const std::string& ShowdownEvent::players_in_hand(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ShowdownEvent.players_in_hand)
  return _internal_players_in_hand().Get(index);
}
inline std::string* ShowdownEvent::mutable_players_in_hand(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ShowdownEvent.players_in_hand)
  return _internal_mutable_players_in_hand()->Mutable(index);
}
inline void ShowdownEvent::set_players_in_hand(int index, const std::string& value) {
  _internal_mutable_players_in_hand()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ShowdownEvent.players_in_hand)
}
inline void ShowdownEvent::set_players_in_hand(int index, std::string&& value) {
  _internal_mutable_players_in_hand()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ShowdownEvent.players_in_hand)
}
inline void ShowdownEvent::set_players_in_hand(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_players_in_hand()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ShowdownEvent.players_in_hand)
}
inline void ShowdownEvent::set_players_in_hand(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_players_in_hand()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ShowdownEvent.players_in_hand)
}
inline void ShowdownEvent::set_players_in_hand(int index, absl::string_view value) {
  _internal_mutable_players_in_hand()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:ShowdownEvent.players_in_hand)
}
inline void ShowdownEvent::add_players_in_hand(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_players_in_hand()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:ShowdownEvent.players_in_hand)
}
inline void ShowdownEvent::add_players_in_hand(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_players_in_hand()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:ShowdownEvent.players_in_hand)
}
inline void ShowdownEvent::add_players_in_hand(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_players_in_hand()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ShowdownEvent.players_in_hand)
}
inline void ShowdownEvent::add_players_in_hand(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_players_in_hand()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ShowdownEvent.players_in_hand)
}
inline void ShowdownEvent::add_players_in_hand(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_players_in_hand()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:ShowdownEvent.players_in_hand)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ShowdownEvent::players_in_hand() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ShowdownEvent.players_in_hand)
  return _internal_players_in_hand();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ShowdownEvent::mutable_players_in_hand() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ShowdownEvent.players_in_hand)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_players_in_hand();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ShowdownEvent::_internal_players_in_hand() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.players_in_hand_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ShowdownEvent::_internal_mutable_players_in_hand() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.players_in_hand_;
}

// -------------------------------------------------------------------

// PotWinnerEvent

// repeated .PotWinner pot_winners = 1;
inline int PotWinnerEvent::_internal_pot_winners_size() const {
  return _internal_pot_winners().size();
}
inline int PotWinnerEvent::pot_winners_size() const {
  return _internal_pot_winners_size();
}
inline void PotWinnerEvent::clear_pot_winners() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pot_winners_.Clear();
}
inline ::PotWinner* PotWinnerEvent::mutable_pot_winners(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:PotWinnerEvent.pot_winners)
  return _internal_mutable_pot_winners()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::PotWinner>* PotWinnerEvent::mutable_pot_winners()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:PotWinnerEvent.pot_winners)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_pot_winners();
}
inline const ::PotWinner& PotWinnerEvent::pot_winners(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PotWinnerEvent.pot_winners)
  return _internal_pot_winners().Get(index);
}
inline ::PotWinner* PotWinnerEvent::add_pot_winners() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::PotWinner* _add = _internal_mutable_pot_winners()->Add();
  // @@protoc_insertion_point(field_add:PotWinnerEvent.pot_winners)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::PotWinner>& PotWinnerEvent::pot_winners() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:PotWinnerEvent.pot_winners)
  return _internal_pot_winners();
}
inline const ::google::protobuf::RepeatedPtrField<::PotWinner>&
PotWinnerEvent::_internal_pot_winners() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pot_winners_;
}
inline ::google::protobuf::RepeatedPtrField<::PotWinner>*
PotWinnerEvent::_internal_mutable_pot_winners() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.pot_winners_;
}

// -------------------------------------------------------------------

// ProtoCard

// .ProtoCard.ProtoSuit suit = 1;
inline void ProtoCard::clear_suit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.suit_ = 0;
}
inline ::ProtoCard_ProtoSuit ProtoCard::suit() const {
  // @@protoc_insertion_point(field_get:ProtoCard.suit)
  return _internal_suit();
}
inline void ProtoCard::set_suit(::ProtoCard_ProtoSuit value) {
  _internal_set_suit(value);
  // @@protoc_insertion_point(field_set:ProtoCard.suit)
}
inline ::ProtoCard_ProtoSuit ProtoCard::_internal_suit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ProtoCard_ProtoSuit>(_impl_.suit_);
}
inline void ProtoCard::_internal_set_suit(::ProtoCard_ProtoSuit value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.suit_ = value;
}

// .ProtoCard.ProtoValue value = 2;
inline void ProtoCard::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
}
inline ::ProtoCard_ProtoValue ProtoCard::value() const {
  // @@protoc_insertion_point(field_get:ProtoCard.value)
  return _internal_value();
}
inline void ProtoCard::set_value(::ProtoCard_ProtoValue value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:ProtoCard.value)
}
inline ::ProtoCard_ProtoValue ProtoCard::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ProtoCard_ProtoValue>(_impl_.value_);
}
inline void ProtoCard::_internal_set_value(::ProtoCard_ProtoValue value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// ProtoPlayer

// string name = 1;
inline void ProtoPlayer::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ProtoPlayer::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ProtoPlayer.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProtoPlayer::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ProtoPlayer.name)
}
inline std::string* ProtoPlayer::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ProtoPlayer.name)
  return _s;
}
inline const std::string& ProtoPlayer::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void ProtoPlayer::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ProtoPlayer::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ProtoPlayer::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ProtoPlayer.name)
  return _impl_.name_.Release();
}
inline void ProtoPlayer::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoPlayer.name)
}

// string id = 2;
inline void ProtoPlayer::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& ProtoPlayer::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ProtoPlayer.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProtoPlayer::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ProtoPlayer.id)
}
inline std::string* ProtoPlayer::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:ProtoPlayer.id)
  return _s;
}
inline const std::string& ProtoPlayer::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void ProtoPlayer::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* ProtoPlayer::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* ProtoPlayer::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ProtoPlayer.id)
  return _impl_.id_.Release();
}
inline void ProtoPlayer::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoPlayer.id)
}

// uint32 chips = 3;
inline void ProtoPlayer::clear_chips() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chips_ = 0u;
}
inline ::uint32_t ProtoPlayer::chips() const {
  // @@protoc_insertion_point(field_get:ProtoPlayer.chips)
  return _internal_chips();
}
inline void ProtoPlayer::set_chips(::uint32_t value) {
  _internal_set_chips(value);
  // @@protoc_insertion_point(field_set:ProtoPlayer.chips)
}
inline ::uint32_t ProtoPlayer::_internal_chips() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chips_;
}
inline void ProtoPlayer::_internal_set_chips(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chips_ = value;
}

// uint32 recent_bets = 4;
inline void ProtoPlayer::clear_recent_bets() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recent_bets_ = 0u;
}
inline ::uint32_t ProtoPlayer::recent_bets() const {
  // @@protoc_insertion_point(field_get:ProtoPlayer.recent_bets)
  return _internal_recent_bets();
}
inline void ProtoPlayer::set_recent_bets(::uint32_t value) {
  _internal_set_recent_bets(value);
  // @@protoc_insertion_point(field_set:ProtoPlayer.recent_bets)
}
inline ::uint32_t ProtoPlayer::_internal_recent_bets() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recent_bets_;
}
inline void ProtoPlayer::_internal_set_recent_bets(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recent_bets_ = value;
}

// .ProtoPlayer.ProtoPosition position = 5;
inline void ProtoPlayer::clear_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.position_ = 0;
}
inline ::ProtoPlayer_ProtoPosition ProtoPlayer::position() const {
  // @@protoc_insertion_point(field_get:ProtoPlayer.position)
  return _internal_position();
}
inline void ProtoPlayer::set_position(::ProtoPlayer_ProtoPosition value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:ProtoPlayer.position)
}
inline ::ProtoPlayer_ProtoPosition ProtoPlayer::_internal_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ProtoPlayer_ProtoPosition>(_impl_.position_);
}
inline void ProtoPlayer::_internal_set_position(::ProtoPlayer_ProtoPosition value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.position_ = value;
}

// .ProtoPlayer.ProtoPlayerStatus status = 6;
inline void ProtoPlayer::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::ProtoPlayer_ProtoPlayerStatus ProtoPlayer::status() const {
  // @@protoc_insertion_point(field_get:ProtoPlayer.status)
  return _internal_status();
}
inline void ProtoPlayer::set_status(::ProtoPlayer_ProtoPlayerStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ProtoPlayer.status)
}
inline ::ProtoPlayer_ProtoPlayerStatus ProtoPlayer::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ProtoPlayer_ProtoPlayerStatus>(_impl_.status_);
}
inline void ProtoPlayer::_internal_set_status(::ProtoPlayer_ProtoPlayerStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// -------------------------------------------------------------------

// PlayerCard

// string player_id = 1;
inline void PlayerCard::clear_player_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_id_.ClearToEmpty();
}
inline const std::string& PlayerCard::player_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PlayerCard.player_id)
  return _internal_player_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlayerCard::set_player_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PlayerCard.player_id)
}
inline std::string* PlayerCard::mutable_player_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:PlayerCard.player_id)
  return _s;
}
inline const std::string& PlayerCard::_internal_player_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.player_id_.Get();
}
inline void PlayerCard::_internal_set_player_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_id_.Set(value, GetArena());
}
inline std::string* PlayerCard::_internal_mutable_player_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.player_id_.Mutable( GetArena());
}
inline std::string* PlayerCard::release_player_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PlayerCard.player_id)
  return _impl_.player_id_.Release();
}
inline void PlayerCard::set_allocated_player_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.player_id_.IsDefault()) {
          _impl_.player_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PlayerCard.player_id)
}

// repeated .ProtoCard hole_cards = 2;
inline int PlayerCard::_internal_hole_cards_size() const {
  return _internal_hole_cards().size();
}
inline int PlayerCard::hole_cards_size() const {
  return _internal_hole_cards_size();
}
inline void PlayerCard::clear_hole_cards() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hole_cards_.Clear();
}
inline ::ProtoCard* PlayerCard::mutable_hole_cards(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:PlayerCard.hole_cards)
  return _internal_mutable_hole_cards()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ProtoCard>* PlayerCard::mutable_hole_cards()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:PlayerCard.hole_cards)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_hole_cards();
}
inline const ::ProtoCard& PlayerCard::hole_cards(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PlayerCard.hole_cards)
  return _internal_hole_cards().Get(index);
}
inline ::ProtoCard* PlayerCard::add_hole_cards() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::ProtoCard* _add = _internal_mutable_hole_cards()->Add();
  // @@protoc_insertion_point(field_add:PlayerCard.hole_cards)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ProtoCard>& PlayerCard::hole_cards() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:PlayerCard.hole_cards)
  return _internal_hole_cards();
}
inline const ::google::protobuf::RepeatedPtrField<::ProtoCard>&
PlayerCard::_internal_hole_cards() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hole_cards_;
}
inline ::google::protobuf::RepeatedPtrField<::ProtoCard>*
PlayerCard::_internal_mutable_hole_cards() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.hole_cards_;
}

// -------------------------------------------------------------------

// PlayerToActInfo_ProtoPossibleAction

// .ProtoActionType action_type = 1;
inline void PlayerToActInfo_ProtoPossibleAction::clear_action_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_type_ = 0;
}
inline ::ProtoActionType PlayerToActInfo_ProtoPossibleAction::action_type() const {
  // @@protoc_insertion_point(field_get:PlayerToActInfo.ProtoPossibleAction.action_type)
  return _internal_action_type();
}
inline void PlayerToActInfo_ProtoPossibleAction::set_action_type(::ProtoActionType value) {
  _internal_set_action_type(value);
  // @@protoc_insertion_point(field_set:PlayerToActInfo.ProtoPossibleAction.action_type)
}
inline ::ProtoActionType PlayerToActInfo_ProtoPossibleAction::_internal_action_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ProtoActionType>(_impl_.action_type_);
}
inline void PlayerToActInfo_ProtoPossibleAction::_internal_set_action_type(::ProtoActionType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_type_ = value;
}

// uint32 primary_amount = 2;
inline void PlayerToActInfo_ProtoPossibleAction::clear_primary_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_amount_ = 0u;
}
inline ::uint32_t PlayerToActInfo_ProtoPossibleAction::primary_amount() const {
  // @@protoc_insertion_point(field_get:PlayerToActInfo.ProtoPossibleAction.primary_amount)
  return _internal_primary_amount();
}
inline void PlayerToActInfo_ProtoPossibleAction::set_primary_amount(::uint32_t value) {
  _internal_set_primary_amount(value);
  // @@protoc_insertion_point(field_set:PlayerToActInfo.ProtoPossibleAction.primary_amount)
}
inline ::uint32_t PlayerToActInfo_ProtoPossibleAction::_internal_primary_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.primary_amount_;
}
inline void PlayerToActInfo_ProtoPossibleAction::_internal_set_primary_amount(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_amount_ = value;
}

// uint32 secondary_amount = 3;
inline void PlayerToActInfo_ProtoPossibleAction::clear_secondary_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secondary_amount_ = 0u;
}
inline ::uint32_t PlayerToActInfo_ProtoPossibleAction::secondary_amount() const {
  // @@protoc_insertion_point(field_get:PlayerToActInfo.ProtoPossibleAction.secondary_amount)
  return _internal_secondary_amount();
}
inline void PlayerToActInfo_ProtoPossibleAction::set_secondary_amount(::uint32_t value) {
  _internal_set_secondary_amount(value);
  // @@protoc_insertion_point(field_set:PlayerToActInfo.ProtoPossibleAction.secondary_amount)
}
inline ::uint32_t PlayerToActInfo_ProtoPossibleAction::_internal_secondary_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.secondary_amount_;
}
inline void PlayerToActInfo_ProtoPossibleAction::_internal_set_secondary_amount(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secondary_amount_ = value;
}

// -------------------------------------------------------------------

// PlayerToActInfo

// string player_to_act = 1;
inline void PlayerToActInfo::clear_player_to_act() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_to_act_.ClearToEmpty();
}
inline const std::string& PlayerToActInfo::player_to_act() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PlayerToActInfo.player_to_act)
  return _internal_player_to_act();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlayerToActInfo::set_player_to_act(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_to_act_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PlayerToActInfo.player_to_act)
}
inline std::string* PlayerToActInfo::mutable_player_to_act() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_player_to_act();
  // @@protoc_insertion_point(field_mutable:PlayerToActInfo.player_to_act)
  return _s;
}
inline const std::string& PlayerToActInfo::_internal_player_to_act() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.player_to_act_.Get();
}
inline void PlayerToActInfo::_internal_set_player_to_act(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_to_act_.Set(value, GetArena());
}
inline std::string* PlayerToActInfo::_internal_mutable_player_to_act() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.player_to_act_.Mutable( GetArena());
}
inline std::string* PlayerToActInfo::release_player_to_act() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PlayerToActInfo.player_to_act)
  return _impl_.player_to_act_.Release();
}
inline void PlayerToActInfo::set_allocated_player_to_act(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_to_act_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.player_to_act_.IsDefault()) {
          _impl_.player_to_act_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PlayerToActInfo.player_to_act)
}

// repeated .PlayerToActInfo.ProtoPossibleAction possible_actions = 2;
inline int PlayerToActInfo::_internal_possible_actions_size() const {
  return _internal_possible_actions().size();
}
inline int PlayerToActInfo::possible_actions_size() const {
  return _internal_possible_actions_size();
}
inline void PlayerToActInfo::clear_possible_actions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.possible_actions_.Clear();
}
inline ::PlayerToActInfo_ProtoPossibleAction* PlayerToActInfo::mutable_possible_actions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:PlayerToActInfo.possible_actions)
  return _internal_mutable_possible_actions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::PlayerToActInfo_ProtoPossibleAction>* PlayerToActInfo::mutable_possible_actions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:PlayerToActInfo.possible_actions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_possible_actions();
}
inline const ::PlayerToActInfo_ProtoPossibleAction& PlayerToActInfo::possible_actions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PlayerToActInfo.possible_actions)
  return _internal_possible_actions().Get(index);
}
inline ::PlayerToActInfo_ProtoPossibleAction* PlayerToActInfo::add_possible_actions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::PlayerToActInfo_ProtoPossibleAction* _add = _internal_mutable_possible_actions()->Add();
  // @@protoc_insertion_point(field_add:PlayerToActInfo.possible_actions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::PlayerToActInfo_ProtoPossibleAction>& PlayerToActInfo::possible_actions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:PlayerToActInfo.possible_actions)
  return _internal_possible_actions();
}
inline const ::google::protobuf::RepeatedPtrField<::PlayerToActInfo_ProtoPossibleAction>&
PlayerToActInfo::_internal_possible_actions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.possible_actions_;
}
inline ::google::protobuf::RepeatedPtrField<::PlayerToActInfo_ProtoPossibleAction>*
PlayerToActInfo::_internal_mutable_possible_actions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.possible_actions_;
}

// -------------------------------------------------------------------

// PlayerActionInfo_ProtoAction

// .ProtoActionType action_type = 1;
inline void PlayerActionInfo_ProtoAction::clear_action_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_type_ = 0;
}
inline ::ProtoActionType PlayerActionInfo_ProtoAction::action_type() const {
  // @@protoc_insertion_point(field_get:PlayerActionInfo.ProtoAction.action_type)
  return _internal_action_type();
}
inline void PlayerActionInfo_ProtoAction::set_action_type(::ProtoActionType value) {
  _internal_set_action_type(value);
  // @@protoc_insertion_point(field_set:PlayerActionInfo.ProtoAction.action_type)
}
inline ::ProtoActionType PlayerActionInfo_ProtoAction::_internal_action_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ProtoActionType>(_impl_.action_type_);
}
inline void PlayerActionInfo_ProtoAction::_internal_set_action_type(::ProtoActionType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_type_ = value;
}

// uint32 action_amount = 2;
inline void PlayerActionInfo_ProtoAction::clear_action_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_amount_ = 0u;
}
inline ::uint32_t PlayerActionInfo_ProtoAction::action_amount() const {
  // @@protoc_insertion_point(field_get:PlayerActionInfo.ProtoAction.action_amount)
  return _internal_action_amount();
}
inline void PlayerActionInfo_ProtoAction::set_action_amount(::uint32_t value) {
  _internal_set_action_amount(value);
  // @@protoc_insertion_point(field_set:PlayerActionInfo.ProtoAction.action_amount)
}
inline ::uint32_t PlayerActionInfo_ProtoAction::_internal_action_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_amount_;
}
inline void PlayerActionInfo_ProtoAction::_internal_set_action_amount(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_amount_ = value;
}

// -------------------------------------------------------------------

// PlayerActionInfo

// string player_id = 1;
inline void PlayerActionInfo::clear_player_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_id_.ClearToEmpty();
}
inline const std::string& PlayerActionInfo::player_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PlayerActionInfo.player_id)
  return _internal_player_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlayerActionInfo::set_player_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PlayerActionInfo.player_id)
}
inline std::string* PlayerActionInfo::mutable_player_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:PlayerActionInfo.player_id)
  return _s;
}
inline const std::string& PlayerActionInfo::_internal_player_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.player_id_.Get();
}
inline void PlayerActionInfo::_internal_set_player_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_id_.Set(value, GetArena());
}
inline std::string* PlayerActionInfo::_internal_mutable_player_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.player_id_.Mutable( GetArena());
}
inline std::string* PlayerActionInfo::release_player_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PlayerActionInfo.player_id)
  return _impl_.player_id_.Release();
}
inline void PlayerActionInfo::set_allocated_player_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.player_id_.IsDefault()) {
          _impl_.player_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PlayerActionInfo.player_id)
}

// .PlayerActionInfo.ProtoAction action = 2;
inline bool PlayerActionInfo::has_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.action_ != nullptr);
  return value;
}
inline void PlayerActionInfo::clear_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.action_ != nullptr) _impl_.action_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::PlayerActionInfo_ProtoAction& PlayerActionInfo::_internal_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::PlayerActionInfo_ProtoAction* p = _impl_.action_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlayerActionInfo_ProtoAction&>(::_PlayerActionInfo_ProtoAction_default_instance_);
}
inline const ::PlayerActionInfo_ProtoAction& PlayerActionInfo::action() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PlayerActionInfo.action)
  return _internal_action();
}
inline void PlayerActionInfo::unsafe_arena_set_allocated_action(::PlayerActionInfo_ProtoAction* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.action_);
  }
  _impl_.action_ = reinterpret_cast<::PlayerActionInfo_ProtoAction*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlayerActionInfo.action)
}
inline ::PlayerActionInfo_ProtoAction* PlayerActionInfo::release_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PlayerActionInfo_ProtoAction* released = _impl_.action_;
  _impl_.action_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::PlayerActionInfo_ProtoAction* PlayerActionInfo::unsafe_arena_release_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PlayerActionInfo.action)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PlayerActionInfo_ProtoAction* temp = _impl_.action_;
  _impl_.action_ = nullptr;
  return temp;
}
inline ::PlayerActionInfo_ProtoAction* PlayerActionInfo::_internal_mutable_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.action_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::PlayerActionInfo_ProtoAction>(GetArena());
    _impl_.action_ = reinterpret_cast<::PlayerActionInfo_ProtoAction*>(p);
  }
  return _impl_.action_;
}
inline ::PlayerActionInfo_ProtoAction* PlayerActionInfo::mutable_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::PlayerActionInfo_ProtoAction* _msg = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:PlayerActionInfo.action)
  return _msg;
}
inline void PlayerActionInfo::set_allocated_action(::PlayerActionInfo_ProtoAction* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.action_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.action_ = reinterpret_cast<::PlayerActionInfo_ProtoAction*>(value);
  // @@protoc_insertion_point(field_set_allocated:PlayerActionInfo.action)
}

// -------------------------------------------------------------------

// ProtoPot

// uint32 pot_chips = 1;
inline void ProtoPot::clear_pot_chips() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pot_chips_ = 0u;
}
inline ::uint32_t ProtoPot::pot_chips() const {
  // @@protoc_insertion_point(field_get:ProtoPot.pot_chips)
  return _internal_pot_chips();
}
inline void ProtoPot::set_pot_chips(::uint32_t value) {
  _internal_set_pot_chips(value);
  // @@protoc_insertion_point(field_set:ProtoPot.pot_chips)
}
inline ::uint32_t ProtoPot::_internal_pot_chips() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pot_chips_;
}
inline void ProtoPot::_internal_set_pot_chips(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pot_chips_ = value;
}

// repeated string eligible_ids = 2;
inline int ProtoPot::_internal_eligible_ids_size() const {
  return _internal_eligible_ids().size();
}
inline int ProtoPot::eligible_ids_size() const {
  return _internal_eligible_ids_size();
}
inline void ProtoPot::clear_eligible_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.eligible_ids_.Clear();
}
inline std::string* ProtoPot::add_eligible_ids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_eligible_ids()->Add();
  // @@protoc_insertion_point(field_add_mutable:ProtoPot.eligible_ids)
  return _s;
}
inline const std::string& ProtoPot::eligible_ids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ProtoPot.eligible_ids)
  return _internal_eligible_ids().Get(index);
}
inline std::string* ProtoPot::mutable_eligible_ids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ProtoPot.eligible_ids)
  return _internal_mutable_eligible_ids()->Mutable(index);
}
inline void ProtoPot::set_eligible_ids(int index, const std::string& value) {
  _internal_mutable_eligible_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ProtoPot.eligible_ids)
}
inline void ProtoPot::set_eligible_ids(int index, std::string&& value) {
  _internal_mutable_eligible_ids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ProtoPot.eligible_ids)
}
inline void ProtoPot::set_eligible_ids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_eligible_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoPot.eligible_ids)
}
inline void ProtoPot::set_eligible_ids(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_eligible_ids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoPot.eligible_ids)
}
inline void ProtoPot::set_eligible_ids(int index, absl::string_view value) {
  _internal_mutable_eligible_ids()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:ProtoPot.eligible_ids)
}
inline void ProtoPot::add_eligible_ids(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_eligible_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:ProtoPot.eligible_ids)
}
inline void ProtoPot::add_eligible_ids(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_eligible_ids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:ProtoPot.eligible_ids)
}
inline void ProtoPot::add_eligible_ids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_eligible_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ProtoPot.eligible_ids)
}
inline void ProtoPot::add_eligible_ids(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_eligible_ids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ProtoPot.eligible_ids)
}
inline void ProtoPot::add_eligible_ids(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_eligible_ids()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:ProtoPot.eligible_ids)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ProtoPot::eligible_ids() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ProtoPot.eligible_ids)
  return _internal_eligible_ids();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ProtoPot::mutable_eligible_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ProtoPot.eligible_ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_eligible_ids();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ProtoPot::_internal_eligible_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.eligible_ids_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ProtoPot::_internal_mutable_eligible_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.eligible_ids_;
}

// -------------------------------------------------------------------

// PotWinner

// uint32 pot_chips = 1;
inline void PotWinner::clear_pot_chips() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pot_chips_ = 0u;
}
inline ::uint32_t PotWinner::pot_chips() const {
  // @@protoc_insertion_point(field_get:PotWinner.pot_chips)
  return _internal_pot_chips();
}
inline void PotWinner::set_pot_chips(::uint32_t value) {
  _internal_set_pot_chips(value);
  // @@protoc_insertion_point(field_set:PotWinner.pot_chips)
}
inline ::uint32_t PotWinner::_internal_pot_chips() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pot_chips_;
}
inline void PotWinner::_internal_set_pot_chips(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pot_chips_ = value;
}

// string winner = 2;
inline void PotWinner::clear_winner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.winner_.ClearToEmpty();
}
inline const std::string& PotWinner::winner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PotWinner.winner)
  return _internal_winner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PotWinner::set_winner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.winner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PotWinner.winner)
}
inline std::string* PotWinner::mutable_winner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_winner();
  // @@protoc_insertion_point(field_mutable:PotWinner.winner)
  return _s;
}
inline const std::string& PotWinner::_internal_winner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.winner_.Get();
}
inline void PotWinner::_internal_set_winner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.winner_.Set(value, GetArena());
}
inline std::string* PotWinner::_internal_mutable_winner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.winner_.Mutable( GetArena());
}
inline std::string* PotWinner::release_winner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PotWinner.winner)
  return _impl_.winner_.Release();
}
inline void PotWinner::set_allocated_winner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.winner_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.winner_.IsDefault()) {
          _impl_.winner_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PotWinner.winner)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::ProtoCard_ProtoSuit> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ProtoCard_ProtoSuit>() {
  return ::ProtoCard_ProtoSuit_descriptor();
}
template <>
struct is_proto_enum<::ProtoCard_ProtoValue> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ProtoCard_ProtoValue>() {
  return ::ProtoCard_ProtoValue_descriptor();
}
template <>
struct is_proto_enum<::ProtoPlayer_ProtoPosition> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ProtoPlayer_ProtoPosition>() {
  return ::ProtoPlayer_ProtoPosition_descriptor();
}
template <>
struct is_proto_enum<::ProtoPlayer_ProtoPlayerStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ProtoPlayer_ProtoPlayerStatus>() {
  return ::ProtoPlayer_ProtoPlayerStatus_descriptor();
}
template <>
struct is_proto_enum<::ProtoStreet> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ProtoStreet>() {
  return ::ProtoStreet_descriptor();
}
template <>
struct is_proto_enum<::ProtoActionType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ProtoActionType>() {
  return ::ProtoActionType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_texas_5fholdem_2eproto_2epb_2eh
